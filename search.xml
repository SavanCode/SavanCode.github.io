<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js animation 动画</title>
      <link href="2020/11/30/js-animation/"/>
      <url>2020/11/30/js-animation/</url>
      
        <content type="html"><![CDATA[<h1 id="js实现动画"><a href="#js实现动画" class="headerlink" title="js实现动画"></a>js实现动画</h1><h2 id="运动的三要素"><a href="#运动的三要素" class="headerlink" title="运动的三要素"></a>运动的三要素</h2><ol><li>起始点</li></ol><blockquote><p>一个运动的起始点其实就是当前元素的位置，我们通过API获取当前元素的位置，让这个位置作为运动的起始。</p></blockquote><ol><li>目标</li><li>速度</li></ol><h2 id="基本的元素移动"><a href="#基本的元素移动" class="headerlink" title="基本的元素移动"></a>基本的元素移动</h2><pre class=" language-html"><code class="language-html">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">          <span class="token keyword">var</span> imgObj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            imgObj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myImage'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            imgObj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position<span class="token operator">=</span> <span class="token string">'relative'</span><span class="token punctuation">;</span>            imgObj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">'0px'</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">function</span> <span class="token function">moveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            imgObj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>imgObj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         window<span class="token punctuation">.</span>onload <span class="token operator">=</span>init<span class="token punctuation">;</span>       </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myImage<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/html.gif<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Click button below to move the image to right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Click Me<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>moveRight();<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="时间块"><a href="#时间块" class="headerlink" title="时间块"></a>时间块</h2><p><code>setTimeout(&quot;function&quot;, interval)</code>，让指定的函数经过某段时间（interval）之后才开始执行，单位为毫秒。 <code>variable = setTimeout(&quot;function&quot;, interval);</code> </p><p>取消等待执行的某个函数：<code>clearTimeout(variable)</code> 设置5秒后，移动，期间随时可以使用<code>clearTimeout(movement)</code>来取消移动。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>where<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>whoa!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">       <span class="token keyword">function</span> <span class="token function">positionMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"absolute"</span><span class="token punctuation">;</span>        elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">"50px"</span><span class="token punctuation">;</span>        elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">"100px"</span><span class="token punctuation">;</span>        <span class="token function">moveElement</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"message2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"absolute"</span><span class="token punctuation">;</span>        elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">"50px"</span><span class="token punctuation">;</span>        elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">"50px"</span><span class="token punctuation">;</span>        <span class="token function">moveElement</span><span class="token punctuation">(</span><span class="token string">"message2"</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//movement = setTimeout("moveMessage()", 5000);</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">moveElement</span><span class="token punctuation">(</span>elementID<span class="token punctuation">,</span>final_x<span class="token punctuation">,</span>final_y<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>elementID<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> xpos <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> ypos <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>xpos <span class="token operator">==</span> final_x <span class="token operator">&amp;&amp;</span> ypos <span class="token operator">==</span> final_y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>xpos <span class="token operator">&lt;</span> final_x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           xpos<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>xpos <span class="token operator">></span> final_x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        xpos<span class="token operator">--</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>ypos <span class="token operator">&lt;</span> final_y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           ypos<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>ypos <span class="token operator">></span> final_y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ypos<span class="token operator">--</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> xpos <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>    elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> ypos <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> repeat <span class="token operator">=</span> <span class="token string">"moveElement('"</span><span class="token operator">+</span>elementID<span class="token operator">+</span><span class="token string">"',"</span><span class="token operator">+</span>final_x<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>final_y<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>interval<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span>    movement <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>repeat<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// function moveMessage()&amp;#123;</span>    <span class="token comment" spellcheck="true">//     var elem = document.getElementById("message");</span>    <span class="token comment" spellcheck="true">//     elem.style.left = "200px";</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token function">positionMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// moveMessage();</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="css属性-动画注意点"><a href="#css属性-动画注意点" class="headerlink" title="css属性 动画注意点"></a>css属性 动画注意点</h2><p><code>overflow</code>属性处理元素尺寸超过容器的情况。 <code>overflow</code>可取属性有四种：visible，hidden，scroll，auto</p><ul><li>visible：不裁减溢出内容</li><li>hidden：隐藏溢出内容</li><li>scroll：隐藏溢出内容，但有一个滚动条</li><li>auto：发生溢出时才有滚动条，无溢出不滚动</li></ul><h2 id="动画例子"><a href="#动画例子" class="headerlink" title="动画例子"></a>动画例子</h2><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        #img&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        body&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这里插入图片地址<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> img<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//解决兼容问题</span>    event <span class="token operator">=</span> event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取鼠标的坐标</span>    <span class="token comment" spellcheck="true">//client可见窗口坐标</span>    <span class="token comment" spellcheck="true">// var X=event.clientX;</span>    <span class="token comment" spellcheck="true">// var Y=event.clientY;</span>    <span class="token comment" spellcheck="true">//div的偏移量是相对于整个页面的</span>    <span class="token comment" spellcheck="true">// var X=event.pageX;//IE8不适用</span>    <span class="token comment" spellcheck="true">// var Y=event.pageY;</span>    <span class="token keyword">var</span> X<span class="token operator">=</span>event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>    <span class="token keyword">var</span> Y<span class="token operator">=</span>event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置图片坐标</span>    img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token operator">=</span>X<span class="token operator">+</span>sl<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">=</span>Y<span class="token operator">+</span>st<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js validation</title>
      <link href="2020/11/29/js-validation/"/>
      <url>2020/11/29/js-validation/</url>
      
        <content type="html"><![CDATA[<h1 id="js判断是否为整数类型"><a href="#js判断是否为整数类型" class="headerlink" title="js判断是否为整数类型"></a>js判断是否为整数类型</h1><h3 id="方式一、使用取余运算符判断"><a href="#方式一、使用取余运算符判断" class="headerlink" title="方式一、使用取余运算符判断"></a>方式一、使用取余运算符判断</h3><p>任何整数都会被1整除，即余数是0。利用这个规则来判断是否是整数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> obj<span class="token operator">%</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false　</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true1234567891011</span></code></pre><p>对于空字符串、字符串类型数字、布尔true、空数组都返回了true。对这些类型的内部转换细节感兴趣的请参考：JavaScript中奇葩的假值<br>因此，需要先判断下对象是否是数字，比如加一个typeof</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">&amp;&amp;</span> obj<span class="token operator">%</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false12345678</span></code></pre><h3 id="方式二、使用Math-round、Math-ceil、Math-floor判断"><a href="#方式二、使用Math-round、Math-ceil、Math-floor判断" class="headerlink" title="方式二、使用Math.round、Math.ceil、Math.floor判断"></a>方式二、使用Math.round、Math.ceil、Math.floor判断</h3><p>整数取整后还是等于自己。利用这个特性来判断是否是整数，Math.floor示例，如下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> obj<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false1234567891011</span></code></pre><h3 id="方式三、通过parseInt判断"><a href="#方式三、通过parseInt判断" class="headerlink" title="方式三、通过parseInt判断"></a>方式三、通过parseInt判断</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">===</span> obj<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false、</span><span class="token comment" spellcheck="true">//很不错，但也有一个缺点</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1000000000000000000000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false12345678910111213</span></code></pre><p>原因是parseInt在解析整数之前强迫将第一个参数解析成字符串。这种方法将数字转换成整型不是一个好的选择。</p><h3 id="方式四、通过位运算判断"><a href="#方式四、通过位运算判断" class="headerlink" title="方式四、通过位运算判断"></a>方式四、通过位运算判断</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>obj <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> obj<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">//这个函数很不错，效率还很高。但有个缺陷，上文提到过，位运算只能处理32位以内的数字，对于超过32位的无能为力</span><span class="token function">isInteger</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 32位以上的数字返回false了12345678910111213</span></code></pre><h3 id="方式五、ES6提供了Number-isInteger"><a href="#方式五、ES6提供了Number-isInteger" class="headerlink" title="方式五、ES6提供了Number.isInteger"></a>方式五、ES6提供了Number.isInteger</h3><pre class=" language-js"><code class="language-js">Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3.1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h1 id="数字判断"><a href="#数字判断" class="headerlink" title="数字判断"></a>数字判断</h1><h2 id="验证数字type"><a href="#验证数字type" class="headerlink" title="验证数字type"></a>验证数字type</h2><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> checkNum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> num <span class="token operator">!==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> undefined<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> num<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="奇数偶数"><a href="#奇数偶数" class="headerlink" title="奇数偶数"></a>奇数偶数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">printOdd</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">printEven</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Prime-number"><a href="#Prime-number" class="headerlink" title="Prime number"></a>Prime number</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> number <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// return true if it is divisible by any number that is not itself.</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// if it passes the for loops conditions it is a prime</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js BOM</title>
      <link href="2020/11/27/js-BOM/"/>
      <url>2020/11/27/js-BOM/</url>
      
        <content type="html"><![CDATA[<h2 id="1-BOM-对象"><a href="#1-BOM-对象" class="headerlink" title="1. BOM 对象"></a>1. BOM 对象</h2><h4 id="1-1-BOM-结构体系"><a href="#1-1-BOM-结构体系" class="headerlink" title="1.1 BOM 结构体系"></a>1.1 BOM 结构体系</h4><p><img src="/2020/11/27/js-BOM/1606472485720.png"></p><h4 id="1-2-BOM-的作用"><a href="#1-2-BOM-的作用" class="headerlink" title="1.2 BOM 的作用"></a>1.2 BOM 的作用</h4><ul><li>BOM可实现功能<ul><li><code>弹出新的浏览器窗口</code></li><li><code>移动、关闭浏览器窗口以及调整窗口的大小</code></li><li><code>页面的前进、后退、刷新和重新加载</code></li><li><code>获取操作系统和浏览器的信息</code></li></ul></li></ul><h2 id="2-Window-对象"><a href="#2-Window-对象" class="headerlink" title="2. Window 对象"></a>2. Window 对象</h2><h4 id="2-1-常用属性"><a href="#2-1-常用属性" class="headerlink" title="2.1 常用属性"></a>2.1 常用属性</h4><ul><li><strong>常用属性</strong></li></ul><table><thead><tr><th>属性名称</th><th>说明</th></tr></thead><tbody><tr><td>history</td><td>有关用户访问过的URL的信息</td></tr><tr><td>location</td><td>有关当前 URL 的信息</td></tr><tr><td>document</td><td>有关页面文档的信息</td></tr><tr><td>navigator</td><td>有关浏览器的信息</td></tr><tr><td>screen</td><td>有关显示器屏幕的信息</td></tr><tr><td>innerHeight</td><td>浏览器窗口的高度和宽度</td></tr></tbody></table><p>浏览器高度和宽度</p><ul><li>window.innerWidth</li><li>window.innerHeight</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token comment" spellcheck="true">//全局成员是window对象的属性</span><span class="token keyword">function</span> <span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我是函数！'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//UI响应式设计innerWidth发挥应用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'浏览器窗口宽度：'</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'浏览器窗口高度：'</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token number">12345678</span></code></pre><h4 id="2-2-常用方法"><a href="#2-2-常用方法" class="headerlink" title="2.2 常用方法"></a>2.2 常用方法</h4><ul><li><strong>常用方法</strong></li></ul><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>prompt()</td><td>显示可提示用户输入的对话框</td></tr><tr><td>alert()</td><td>显示带有一个提示信息和一个确定按钮的警示框</td></tr><tr><td>confirm()</td><td>显示一个带有提示信息、确定和取消按钮的对话框</td></tr><tr><td>close()</td><td>关闭浏览器窗口</td></tr><tr><td>open()</td><td>打开一个新的浏览器窗口，加载给定 URL 所指定的文档</td></tr></tbody></table><h6 id="2-2-1-open-方法"><a href="#2-2-1-open-方法" class="headerlink" title="2.2.1 open 方法"></a>2.2.1 open 方法</h6><ul><li><code>window.open(&quot;弹出窗口的 url&quot;, &quot;窗口名称&quot;, &quot;窗口特征&quot;)</code></li></ul><table><thead><tr><th>属性名称</th><th>说明</th></tr></thead><tbody><tr><td>height、width</td><td>窗口文档显示区的高度、宽度、以像素计</td></tr><tr><td>left、top</td><td>窗口的 x 坐标、y 坐标，以像素计</td></tr></tbody></table><h4 id="2-3-其他方法"><a href="#2-3-其他方法" class="headerlink" title="2.3 其他方法"></a>2.3 其他方法</h4><ul><li><strong>其他方法</strong></li></ul><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>resizeBy()</td><td>把窗口的大小尺寸调整指定的像素</td></tr><tr><td>resizeTo()</td><td>把窗口的大小尺寸调整到指定的宽度和高度</td></tr><tr><td>moveBy()</td><td>把当前窗口移动指定的像素距离</td></tr><tr><td>moveTo()</td><td>把窗口的左上角移动到指定的坐标</td></tr><tr><td>scrollBy()</td><td>滚动指定的像素距离，内容必须大于窗口的尺寸</td></tr><tr><td>scrollTo()</td><td>滚动到指定的坐标位置</td></tr><tr><td>setTimeout()</td><td>在指定的毫秒数后调用函数或计算表达式</td></tr><tr><td>setInterval()</td><td>按照指定的周期（以毫秒计）来调用函数或表达式</td></tr></tbody></table><h4 id="2-4-方法案例"><a href="#2-4-方法案例" class="headerlink" title="2.4 方法案例"></a>2.4 方法案例</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">Buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//涉及到安全、数据更改、删除操作</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'您确定要下单吗？'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'用户已经确认，马上提交服务器。。。。。。'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'用户已经撤销，不再继续操作！'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">closeWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">openWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'page1.html'</span><span class="token punctuation">,</span><span class="token string">'myNewWin'</span><span class="token punctuation">,</span><span class="token string">'width=300px,height=300px,left=100px,top=100px'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">moveWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//适用于open打开的窗口，其他没有效果</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">scrollWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//实现页面滚动</span>        window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//实现页面滚动</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2000</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>下单<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Buy()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>关闭<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>closeWindow()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>打开新窗口<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>openWindow()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>移动窗口<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>moveWindow()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>滚动窗口<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scrollWindow()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="3-定时器方法"><a href="#3-定时器方法" class="headerlink" title="3. 定时器方法"></a>3. 定时器方法</h2><h4 id="3-1-设置定时器方法"><a href="#3-1-设置定时器方法" class="headerlink" title="3.1 设置定时器方法"></a>3.1 设置定时器方法</h4><h6 id="3-1-1-setTimeout"><a href="#3-1-1-setTimeout" class="headerlink" title="3.1.1 setTimeout()"></a>3.1.1 <code>setTimeout()</code></h6><ul><li><p><code>功能</code></p><ul><li>用于<code>在指定的毫秒数后调用函数或计算表达式</code></li><li><code>code 必需参数</code>，要调用的函数后要执行的 JavaScript 代码串</li><li><code>millisec 必需参数</code>，在执行代码前需等待的毫秒数</li><li>setTimeout() <code>只执行 code 一次</code></li></ul></li><li><p><strong>语法</strong></p><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"调用的函数"</span><span class="token punctuation">,</span>等待的毫秒数<span class="token punctuation">)</span></code></pre></li></ul><pre class=" language-js"><code class="language-js">举例<span class="token punctuation">:</span> 实现五秒后出现提示框<span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">startWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我在准备中！'</span><span class="token punctuation">)</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我开工了！'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"开始工作"</span> onclick<span class="token operator">=</span><span class="token string">"startWork()"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>                                                     <span class="token number">123456789101112131415</span></code></pre><h6 id="3-1-2-setInterval"><a href="#3-1-2-setInterval" class="headerlink" title="3.1.2 setInterval()"></a>3.1.2 <code>setInterval()</code></h6><ul><li><code>功能</code><ul><li>可<code>按照指定的周期(以毫秒计)来调用函数或计算表达式</code></li><li><code>code 必需</code>，要<code>调用的函数或要执行的代码串</code></li><li><code>millisec 必需</code>，周期性执行或调用 code 之间的<code>时间间隔</code>，以毫秒计</li><li>setInterval() 方法会不停地调用函数，<code>直到 clearInterval() 被调用或窗口被关闭</code></li><li>由 <code>setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数</code></li></ul></li><li><strong>语法</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"调用的函数"</span><span class="token punctuation">,</span>间隔的毫秒数<span class="token punctuation">)</span><span class="token number">1</span>举例<span class="token punctuation">:</span> 定时器<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"mydiv"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> mydiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'mydiv'</span><span class="token punctuation">)</span>        mydiv<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token number">123456789</span></code></pre><h4 id="3-2-清除定时器方法"><a href="#3-2-清除定时器方法" class="headerlink" title="3.2 清除定时器方法"></a>3.2 清除定时器方法</h4><h6 id="3-2-1-clearTimeout"><a href="#3-2-1-clearTimeout" class="headerlink" title="3.2.1 clearTimeout()"></a>3.2.1 <code>clearTimeout()</code></h6><ul><li><code>功能</code><ul><li>可<code>取消</code>由 setTimeout() 方法设置的 timeout</li><li>id_of_setTimeout 由 <code>setTimeout() 返回的 ID 值</code></li><li>该值标识要取消的延迟执行代码块</li></ul></li><li><strong>语法</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token function">clearTimeout</span><span class="token punctuation">(</span>id_of_setTimeout<span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">举例: 实现开始/暂停计数（如果没有点击“暂停计数”则一直计数，点击“暂停计数”后仍然可以再点击“开始计数”继续计数）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">//初始化定时器对象为空</span>    <span class="token keyword">function</span> <span class="token function">startRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断是否已存在定时器，防止定时器累加</span>            <span class="token comment" spellcheck="true">//创建定时器</span>            timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                num<span class="token operator">++</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'mydiv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> num            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">pauseRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//清除定时器，此时 timer 并没有为空</span>        timer <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mydiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>开始计数<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>startRecord()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>暂停计数<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pauseRecord()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h6 id="3-2-2-clearInterval"><a href="#3-2-2-clearInterval" class="headerlink" title="3.2.2 clearInterval()"></a>3.2.2 <code>clearInterval()</code></h6><ul><li><code>功能</code><ul><li>可<code>取消</code>由 setInterval() 设置的 timeout</li><li>id_of_setInterval <code>由 setInterval() 返回的 ID 值</code></li></ul></li><li><strong>语法</strong></li></ul><pre class=" language-html"><code class="language-html">clearInterval(id_of_setInterval)</code></pre><pre class=" language-html"><code class="language-html">举例: 实现停在获取系统的时间（获取了系统的时间，点击暂停后计时会停止）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clock<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>35<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span>javascript</span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token keyword">var</span> int <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"clock()"</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span>     <span class="token keyword">function</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"clock"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span>t     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int <span class="token punctuation">=</span> window.clearInterval(int)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>暂停<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>                  ```#### 3.3 定时器案例###### 3.3.1 随机漂浮的广告窗口```jssetInterval(function()<span class="token entity" title="&#123;">&amp;#123;</span>    var direction = [-1,1]    var x,y    var index = Math.round(Math.random()) // 0,1    x = Math.round(5*Math.random()) * direction[index] // 生成随机的水平偏移量    y = Math.round(5*Math.random()) * direction[index] // 生成随机的垂直偏移量    moveBy(x,y)<span class="token entity" title="&#125;">&amp;#125;</span>,2000) ```###### 3.3.2 自动轮播图```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> loopPics <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1.jpg'</span><span class="token punctuation">,</span><span class="token string">'2.jpg'</span><span class="token punctuation">,</span><span class="token string">'3.jpg'</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> myImg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'loopPic'</span><span class="token punctuation">)</span>        myImg<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'images/'</span> <span class="token operator">+</span> loopPics<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loopPic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> ```###### 3.3.2 手动轮播图```jsvar lis = document.getElementsByTagName('li')for(var i = 0; i &lt; lis.length; i++) <span class="token entity" title="&#123;">&amp;#123;</span>    lis[i].onclick = function()<span class="token entity" title="&#123;">&amp;#123;</span>        var myImg = document.getElementById('loopPic')        var currentIndex = this.innerHTML // 获取点击标签内部的内容        myImg.src = 'images/' + loopPic[currentIndex - 1]    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span> ```## 4. Window 对象事件#### 4.1 常用的事件| 名称     | 说明                       || -------- | -------------------------- || onload   | 一个页面或一幅图像完成加载 || onresize | 窗口尺寸大小发生变化时触发 || onscroll | 一个页面或一幅图像完成加载 || onunload | 一个页面或一幅图像完成加载 |###### 4.1.1 window.onload 事件- window.onload表示`页面标签全部加载````html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token number">1</span><span class="token punctuation">.</span> 不加 window<span class="token punctuation">.</span>onload 会报错       代码是从头加载到尾，还没有加载到 body 中的元素，所以获取不到<span class="token punctuation">,</span>会报错        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>          btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我被点击了！'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">==</span>    <span class="token number">2</span><span class="token punctuation">.</span> window<span class="token punctuation">.</span>onload 表示页面标签全部加载       window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>             btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我被点击了！'</span><span class="token punctuation">)</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">==</span>    <span class="token number">3</span><span class="token punctuation">.</span> 注意避免重复定义 onload 事件，以免覆盖       window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'start!'</span><span class="token punctuation">)</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点我<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> ```#### 4.2 文档加载过程###### 4.2.1 存在问题- 浏览器在加载一个页面时，是按照`自上向下`的顺序加载的- 如果将`script`标签写到`head`内部，在代码执行时，页面还没有加载，页面中的`DOM`对象也没有加载- 导致在`js`中无法获取到页面中的`DOM`对象```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"点我也没用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>结果：报错 ```###### 4.2.2 解决方案- `onload`事件  - `onload`事件会在`整个页面加载完成之后才触发`- 为 `window`绑定一个`onload`事件  - 该事件对应的响应函数将会在页面加载完成之后执    - 这样可以确保我们的代码执行时所有的`DOM`对象已经加载完毕了```jswindow.onload = function()<span class="token entity" title="&#123;">&amp;#123;</span>    ...<span class="token entity" title="&#125;">&amp;#125;</span> ```- 把`script`标签放在`body`尾部```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> ```- 建议: `两者综合`#### 4.3 window 事件练习```js- 实现以下的页面效果    - 当浏览器窗口宽度在低于800px时，页面背景是红色    - 当浏览器窗口宽度在800-1024px时，页面背景是蓝色    - 当浏览器窗口宽度在1024-1280px时，页面背景是绿色    - 当浏览器窗口宽度大于1280px时，页面背景是黄色//适合做滚动监听的页面特效window.onscroll = function()<span class="token entity" title="&#123;">&amp;#123;</span>    console.log('页面开始滚动了')<span class="token entity" title="&#125;">&amp;#125;</span>//响应式设计的原理window.onresize = function()<span class="token entity" title="&#123;">&amp;#123;</span> // 监听浏览器窗口变化    console.log('当前页面的宽度：' + innerWidth)    if(innerWidth &lt; 800)<span class="token entity" title="&#123;">&amp;#123;</span>        document.body.style.backgroundColor = '#ff0'    <span class="token entity" title="&#125;">&amp;#125;</span>else if(innerWidth &lt; 1024)<span class="token entity" title="&#123;">&amp;#123;</span>        document.body.style.backgroundColor = '#f0f'    <span class="token entity" title="&#125;">&amp;#125;</span>else if(innerWidth &lt; 1280)<span class="token entity" title="&#123;">&amp;#123;</span>        document.body.style.backgroundColor = '#0ff'    <span class="token entity" title="&#125;">&amp;#125;</span>else<span class="token entity" title="&#123;">&amp;#123;</span>        document.body.style.backgroundColor = '#0f0'    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>```## 实例[BOM实例](https://www.runoob.com/js/js-ex-browser.html)## reference:https://www.shuzhiduo.com/A/WpdKA9AqJV/</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js class</title>
      <link href="2020/11/27/js-class/"/>
      <url>2020/11/27/js-class/</url>
      
        <content type="html"><![CDATA[<h1 id="class基础"><a href="#class基础" class="headerlink" title="class基础"></a>class基础</h1><h2 id="class基本定义"><a href="#class基本定义" class="headerlink" title="class基本定义"></a>class基本定义</h2><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">method_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">method_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">method_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> year<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> yearclass Car <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> year<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Ford"</span><span class="token punctuation">,</span> <span class="token number">2014</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span><span class="token string">"My car is "</span> <span class="token operator">+</span> myCar<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" years old."</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>A JavaScript class is <strong>not</strong> an object.</p><p>It is a <strong>template</strong> for JavaScript objects.</p></blockquote><h2 id="class创建对象"><a href="#class创建对象" class="headerlink" title="class创建对象"></a>class创建对象</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> myCar1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Ford"</span><span class="token punctuation">,</span> <span class="token number">2014</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> myCar2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Audi"</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="class继承-extends"><a href="#class继承-extends" class="headerlink" title="class继承 - extends"></a>class继承 - extends</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>carname <span class="token operator">=</span> brand<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">present</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'I have a '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>carname<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Model</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用parent的constructor - 没有不行</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> mod<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">present</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">', it is a '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"Ford"</span><span class="token punctuation">,</span> <span class="token string">"Mustang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> myCar<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Getters-and-Setters"><a href="#Getters-and-Setters" class="headerlink" title="Getters and Setters"></a>Getters and Setters</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>carname <span class="token operator">=</span> brand<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">get</span> <span class="token function">cnam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>carname<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">set</span> <span class="token function">cnam</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>carname <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Ford"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> myCar<span class="token punctuation">.</span>cnam<span class="token punctuation">;</span></code></pre><h2 id="static-function"><a href="#static-function" class="headerlink" title="static function"></a>static function</h2><p>You cannot call a <code>static</code> method on an object, only on an object class.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"Hello!!"</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Ford"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// You can calll 'hello()' on the Car Class:</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> Car<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// But NOT on a Car Object:</span><span class="token comment" spellcheck="true">// document.getElementById("demo").innerHTML = myCar.hello();</span><span class="token comment" spellcheck="true">// this will raise an error.</span></code></pre><p>改为：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token function">hello</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> x<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Ford"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> Car<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>myCar<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js Node</title>
      <link href="2020/11/27/js-Node/"/>
      <url>2020/11/27/js-Node/</url>
      
        <content type="html"><![CDATA[<h2 id="DOM-节点基本理解"><a href="#DOM-节点基本理解" class="headerlink" title="DOM 节点基本理解"></a>DOM 节点基本理解</h2><ul><li>整个文档是文档节点</li><li>每个 HTML 元素是元素节点</li><li>HTML 元素内的文本是文本节点</li><li>每个 HTML 属性是属性节点</li><li>所有注释是注释节点</li></ul><p><img src="/2020/11/27/js-Node/1606445185786.png"></p><h2 id="node根节点"><a href="#node根节点" class="headerlink" title="node根节点"></a>node根节点</h2><ul><li>document.body - 文档的 body</li><li>document.documentElement - 完整文档</li></ul><h2 id="node基本节点"><a href="#node基本节点" class="headerlink" title="node基本节点"></a>node基本节点</h2><ul><li><p><strong>nodeName</strong> ：<strong>节点名</strong> （只读）。对于元素类型，则是元素的标签名(均为大写)，如”SPAN”、”DIV”；对于其他类型会有不同的值，下面每个类型会分别指出。</p></li><li><p><strong>nodeValue</strong> ：<strong>节点值</strong>。对于元素类型为<code>null</code>；对于其他类型会有不同的值，下面每个类型会分别指出。</p></li><li><p><strong>hasChildNodes</strong>() ：布尔值，<strong>是否含有子节点</strong>。</p></li><li><p><strong>childNodes</strong> ：<strong>NodeList 对象的集合</strong>，是一个<strong>类数组</strong>，实际是基于 DOM 结构动态查询的结果。</p></li><li><p>firstChild ：等效于 childNodes[0] ；</p></li><li><p>lastChild ：等效于 childNodes[childNodes.length - 1] 。</p></li><li><p><strong>parentNode</strong> ：指向<strong>父节点</strong>。</p></li><li><p>previousSibling ：前一个同胞节点；</p></li><li><p>nextSibling ：后一个同胞节点。</p></li><li><p>ownerDocument ：指向节点所在的整个文档节点。</p></li><li><p>nodeType ：常量值，一共有 12 种，如 “Node.ELEMENT_NODE” 或 数字 1 ，下面每个类型会分别给出对象的值。。（只读）</p></li></ul><h2 id="node方法"><a href="#node方法" class="headerlink" title="node方法"></a>node方法</h2><h3 id="创建节点、追加节点"><a href="#创建节点、追加节点" class="headerlink" title="创建节点、追加节点"></a>创建节点、追加节点</h3><ul><li>createElement（标签名）创建一个元素节点（具体的一个元素）。</li><li>appendChild（节点）追加一个节点。</li><li>createTextNode（节点文本内容）创建一个文本节点</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个div元素，因为是document对象的方法。</span><span class="token keyword">var</span> oDivText <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个文本节点内容是“666”，因为是document对象的方法。</span>oDiv<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oDivText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父级.appendChild(子节点);在div元素中添加“666”</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oDiv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父级.appendChild(子节点);;document.body是指向&lt;body>元素</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>createNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父级.appendChild(子节点);;document.documentElement是指向&lt;html>元素</span></code></pre><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><ul><li><strong>appendChild(newNode)</strong> 也是一种插入节点的方式，向 childNodes 集合的<strong>末尾添加一个新节点</strong>,还可以添加已经存在的元素，会将其元素从原来的位置移到新的位置。</li><li>insertBefore（a,b）是参照节点，意思是a节点会插入b节点的前面（可为<code>null</code>后添加新节点），并返回新节点</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是另一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> para <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"这是新文本。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>para<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>para<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        </code></pre><h3 id="删除、移除节点"><a href="#删除、移除节点" class="headerlink" title="删除、移除节点"></a>删除、移除节点</h3><ul><li>removeChild(node) 删除一个节点，用于移除删除一个指定参数（节点），并返回的被移除的节点，被移除的节点仍在文档中，只是文档中已没有其位置了。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h3><ul><li>replaceChild(newNode, node) ，用于替换节点，接受两个参数，第一参数是要插入的节点，第二个是要被替换的节点。返回的是被替换的节点。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> para <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"这是新文本。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>para<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parent<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>para<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h3><ul><li><p>childNodes 包含文本节点和元素节点的子节点。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oList<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//oList是做的ul的对象。</span>      <span class="token comment" spellcheck="true">//nodeType是节点的类型，利用nodeType来判断节点类型，再去控制子节点</span>      <span class="token comment" spellcheck="true">//nodeType==1 是元素节点</span>      <span class="token comment" spellcheck="true">//nodeType==3 是文本节点</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>oList<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找到oList内的元素节点</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oList<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在控制器日志中显示找到的元素节点</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>利用parentNode children 分别获取子节点父节点</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> oList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//oList是做的ul的对象</span>      <span class="token keyword">var</span> oChild<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//oChild是做的ul中的一个li的对象</span>      <span class="token comment" spellcheck="true">//通过子节点查找父节点//parentNode：获取父节点</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oChild<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在控制器日志中显示父节点</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oList<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在控制器日志中显示oList子节点</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//子节点的个数</span></code></pre></li><li><p>firstChild ; firstElementChild查找第一个子节点。此存在浏览器兼容问题：firstChild是IE兼容，firstElementChild是非IE兼容。</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//查找第一个子节点的封装函数</span>        <span class="token keyword">function</span> <span class="token function">firstChild</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果该条件是true则在该浏览器（IE或非IE）中兼容</span>                <span class="token keyword">return</span> ele<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ele<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">firstChild</span><span class="token punctuation">(</span>oList<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将获得的节点的背景变成红色</span></code></pre><ul><li>lastChild ; lastElementChild查找最后一个子节点。此存在浏览器兼容问题：lastChild 是IE兼容，lastElementChild是非IE兼容。</li></ul><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">//查找最后一个子节点的封装函数        </span><span class="token keyword">function</span> <span class="token function">lastChild</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果该条件是true则在该浏览器（IE或非IE）中兼容                </span>        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>lastChild<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">lastChild</span><span class="token punctuation">(</span>oList<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将获得的节点的背景变成红色</span></code></pre><ul><li>nextSibling ; nextElementSibling查找下一个兄弟节点。也是存在兼容性问题。</li></ul><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">//查找下一个兄弟节点的封装函数        </span><span class="token keyword">function</span> <span class="token function">nextSibling</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">nextSibling</span><span class="token punctuation">(</span>oMid<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span></code></pre><ul><li>previousSibling ; previousElementSibling查找上一个兄弟节点。也是存在兼容性问题。</li></ul><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">//查找上一个兄弟节点的封装函数        </span><span class="token keyword">function</span> <span class="token function">previousSibling</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">previousSibling</span><span class="token punctuation">(</span>oMid<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span></code></pre><h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><ul><li><strong>clone(isDeepClone?)</strong> ：<strong>克隆当前节点</strong>，可以接收一个参数：是否深克隆，深克隆表示包含其所有子节点，否则只复制节点本身。</li></ul><h3 id="移除空的文本节点"><a href="#移除空的文本节点" class="headerlink" title="移除空的文本节点"></a>移除空的文本节点</h3><ul><li>normalize() ：移除空的文本节点，并连接相邻的文本节点。</li></ul><p>Reference：</p><p><a href="https://juejin.cn/post/6844903807327928333">https://juejin.cn/post/6844903807327928333</a> – 详细内容</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js OOP</title>
      <link href="2020/11/26/js-OOP/"/>
      <url>2020/11/26/js-OOP/</url>
      
        <content type="html"><![CDATA[<h1 id="对象基础"><a href="#对象基础" class="headerlink" title="对象基础"></a>对象基础</h1><p>object ：propert + method</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>特点：</p><ul><li>函数体内部使用了<code>this</code>关键字，代表了所要生成的对象实例。</li><li>生成对象的时候，必须使用<code>new</code>命令</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Vehicle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="new命令"><a href="#new命令" class="headerlink" title="new命令"></a>new命令</h2><ol><li>创建一个空对象，作为将要返回的对象实例。</li><li>将这个空对象的原型，指向构造函数的<code>prototype</code>属性。</li><li>将这个空对象赋值给函数内部的<code>this</code>关键字。</li><li>开始执行构造函数内部的代码。</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Vehicle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span>price <span class="token comment" spellcheck="true">// 1000</span><span class="token comment" spellcheck="true">////////////////////////////////////////////</span><span class="token keyword">function</span> Cat <span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'大毛'</span><span class="token punctuation">,</span> <span class="token string">'白色'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// '大毛'</span>cat1<span class="token punctuation">.</span>color <span class="token comment" spellcheck="true">// '白色'</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Vehicle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 推荐的写法     var v = new Vehicle();<br>        不推荐的写法   var v = new Vehicle;</p><h2 id="Object-create-创建实例对象"><a href="#Object-create-创建实例对象" class="headerlink" title="Object.create() 创建实例对象"></a>Object.create() 创建实例对象</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span>  greeting<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi! I\'m '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>person2<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// 张三</span>person2<span class="token punctuation">.</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Hi! I'm 张三.</span></code></pre><p>对象<code>person1</code>是<code>person2</code>的模板，后者继承了前者的属性和方法</p><h1 id="对象继承"><a href="#对象继承" class="headerlink" title="对象继承"></a>对象继承</h1><h2 id="基本继承"><a href="#基本继承" class="headerlink" title="基本继承"></a>基本继承</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> Cat <span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'大毛'</span><span class="token punctuation">,</span> <span class="token string">'白色'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// '大毛'</span>cat1<span class="token punctuation">.</span>color <span class="token comment" spellcheck="true">// '白色'</span></code></pre><p>同一个构造函数的多个实例之间，无法共享属性，从而造成对系统资源的浪费。</p><h2 id="prototype-属性的作用"><a href="#prototype-属性的作用" class="headerlink" title="prototype 属性的作用"></a>prototype 属性的作用</h2><p>对于构造函数来说，生成实例的时候，该属性会自动成为实例对象的原型。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">;</span><span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'大毛'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'二毛'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span>color <span class="token comment" spellcheck="true">// 'white'</span>cat2<span class="token punctuation">.</span>color <span class="token comment" spellcheck="true">// 'white'</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js DOM</title>
      <link href="2020/11/26/js-DOM/"/>
      <url>2020/11/26/js-DOM/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>（文档对象模型）Document Object Model</p><h2 id="getElementById-方法"><a href="#getElementById-方法" class="headerlink" title="getElementById 方法"></a>getElementById 方法</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="innerHTML-属性"><a href="#innerHTML-属性" class="headerlink" title="innerHTML 属性"></a>innerHTML 属性</h2><p>innerHTML 属性可用于获取或替换 HTML 元素的内容。</p><p>innerHTML 属性可用于获取或改变任何 HTML 元素，包括 <html> 和 <body>。</body></html></p><h2 id="查找-HTML-元素-DOM"><a href="#查找-HTML-元素-DOM" class="headerlink" title="查找 HTML 元素/DOM"></a>查找 HTML 元素/DOM</h2><h3 id="通过标签"><a href="#通过标签" class="headerlink" title="通过标签"></a>通过标签</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">document.getElementById(<em>id</em>)</td><td align="left">通过元素 id 来查找元素</td></tr><tr><td align="left">document.getElementsByTagName(<em>name</em>)</td><td align="left">通过标签名来查找元素</td></tr><tr><td align="left">document.getElementsByClassName(<em>name</em>)</td><td align="left">通过类名来查找元素（少）</td></tr></tbody></table><h3 id="通过-CSS-选择器查找-HTML-元素"><a href="#通过-CSS-选择器查找-HTML-元素" class="headerlink" title="通过 CSS 选择器查找 HTML 元素"></a>通过 CSS 选择器查找 HTML 元素</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"p.intro"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="查找html-form元素"><a href="#查找html-form元素" class="headerlink" title="查找html form元素"></a>查找html form元素</h3><p>本例查找 id=”frm1” 的 form 元素，在 forms 集合中，然后显示所有元素值</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>frm1<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/demo/action_page.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  First name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Bill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  Last name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gates<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token comment" spellcheck="true">//打印出框中内容</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> x <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token string">"frm1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">.</span>length <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    text <span class="token operator">+</span><span class="token operator">=</span> x<span class="token punctuation">.</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="改变-HTML-元素"><a href="#改变-HTML-元素" class="headerlink" title="改变 HTML 元素"></a>改变 HTML 元素</h2><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">element.innerHTML = <em>new html content</em><br><em>document.write()</em></td><td align="left">改变元素的 inner HTML</td></tr><tr><td align="left">element.attribute = <em>new value</em><br>document.getElementById(“myImage”).src = “landscape.jpg”;</td><td align="left">改变 HTML 元素的属性值</td></tr><tr><td align="left">element.setAttribute(<em>attribute</em>, <em>value</em>)</td><td align="left">改变 HTML 元素的属性值</td></tr><tr><td align="left">element.style.property = <em>new style</em></td><td align="left">改变 HTML 元素的样式</td></tr></tbody></table><h2 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h2><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">document.createElement(<em>element</em>)</td><td align="left">创建 HTML 元素</td></tr><tr><td align="left">document.removeChild(<em>element</em>)</td><td align="left">删除 HTML 元素</td></tr><tr><td align="left">document.appendChild(<em>element</em>)</td><td align="left">添加 HTML 元素</td></tr><tr><td align="left">document.replaceChild(<em>element</em>)</td><td align="left">替换 HTML 元素</td></tr><tr><td align="left">document.write(<em>text</em>)</td><td align="left">写入 HTML 输出流</td></tr></tbody></table><h2 id="添加事件处理程序"><a href="#添加事件处理程序" class="headerlink" title="添加事件处理程序"></a>添加事件处理程序</h2><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">document.getElementById(id).onclick = function(){<em>code</em>}</td><td align="left">向 onclick 事件添加事件处理程序</td></tr></tbody></table><h2 id="改变css"><a href="#改变css" class="headerlink" title="改变css"></a>改变css</h2><p>语法：document.getElementById(id).style.property = new style</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的标题 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>document.getElementById(<span class="token punctuation">'</span>id1<span class="token punctuation">'</span>).style.color <span class="token punctuation">=</span> <span class="token punctuation">'</span>red<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击我！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h2 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events">基本事件总结表</a></p><p><strong>当id中string中有数字，需要自己增加； 直接number++；（不用转换）</strong></p><p><strong>但是如果用number+=1/ number=number+1； 这样要praseInt（number）</strong></p><h2 id="DOM-事件监听程序"><a href="#DOM-事件监听程序" class="headerlink" title="DOM 事件监听程序"></a>DOM 事件监听程序</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">,</span> useCapture<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第一个参数是事件的类型（比如 “click” 或 “mousedown”）。</p><p><strong>(注意：事件名称前不加on; 使用内联onclick属性似乎只能传递自身而不能传递事件对象; 事件监听可以在一种事件上绑定多个方法)</strong></p><p>第二个参数是当事件发生时我们需要调用的函数。</p><p>第三个参数是布尔值，指定使用事件冒泡还是事件捕获。此参数是可选的。</p><p><strong>注意：</strong>请勿对事件使用 “on” 前缀；请使用 “click” 代替 “onclick”。</p><h3 id="添加单个或者多个监听"><a href="#添加单个或者多个监听" class="headerlink" title="添加单个或者多个监听"></a>添加单个或者多个监听</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//单个元素单个事件</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//单个元素</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> myFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> mySecondFunction<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//单个元素多个不同事件</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseover"</span><span class="token punctuation">,</span> myFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> mySecondFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseout"</span><span class="token punctuation">,</span> myThirdFunction<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//自定义</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> sometext<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//有参数</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="删除事件监听"><a href="#删除事件监听" class="headerlink" title="删除事件监听"></a>删除事件监听</h3><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> myFunction<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseover"</span><span class="token punctuation">,</span> myFunction<span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseover"</span><span class="token punctuation">,</span> myFunction<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"Moused over!&lt;br>"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="解除绑定不能写全函数"><a href="#解除绑定不能写全函数" class="headerlink" title="解除绑定不能写全函数"></a>解除绑定不能写全函数</h4><p>解除绑定事件的时候一定要用函数的句柄，把整个函数写上是无法解除绑定的。</p><p>错误写法：</p><pre class=" language-js"><code class="language-js">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>正确写法：btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>eventTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>eventOne<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>事件对象自动传递给回调函数 element.onclick = function(e){}; // e就是事件对象</p><h3 id="e的常见属性："><a href="#e的常见属性：" class="headerlink" title="e的常见属性："></a>e的常见属性：</h3><ul><li>e.target; //获取触发此事件的元素（不一定是绑定元素）（e.target.style.backgroundColor=””）</li><li>e.currentTarget //获取触发此事件的元素（一定是绑定元素）</li><li>e.offsetX ||e.offsetY ; //获取鼠标基于target元素内部的偏移x和y</li><li>e.clientX ||e.clientY ; //获取鼠标基于浏览器视窗的偏移x和y</li><li>e.keyCode ||e.which; //返回键盘上的字符的代码</li><li>事件回调中的this：指向事件的触发元素</li><li>—-如果事件处理函数的绑定在元素生成之前，则此元素不能绑定事件处理函数，需重新设置</li></ul><h3 id="target、this、currentTarget区别"><a href="#target、this、currentTarget区别" class="headerlink" title="target、this、currentTarget区别"></a>target、this、currentTarget区别</h3><blockquote><ul><li>先诉重点理论：</li><li>target:<strong>触发</strong>事件的某个具体对象，只会出现在事件流的目标阶段（谁触发谁命中，所以肯定是目标阶段）</li><li>currentTarget:<strong>绑定</strong>事件的对象，<strong>恒等于this</strong>，可能出现在事件流的任意一个阶段中</li><li>通常情况下terget和currentTarget是一致的，我们只要使用terget即可，但有一种情况必须区分这三者的关系，那就是在父子嵌套的关系中，父元素绑定了事件，单击了子元素（根据事件流，在不阻止事件流的前提下他会传递至父元素，导致父元素的事件处理函数执行），这时候currentTarget指向的是父元素，因为他是<strong>绑定事件的对象</strong>，而target指向了子元素，因为他是<strong>触发事件的那个具体对象</strong></li></ul></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">one<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//one - 函数对应的区域</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//three  - 多层套叠的时候，选中直接触发的区域</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//one</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="捕获-阻止捕获、冒泡-阻止冒泡"><a href="#捕获-阻止捕获、冒泡-阻止冒泡" class="headerlink" title="捕获/阻止捕获、冒泡/阻止冒泡"></a>捕获/阻止捕获、冒泡/阻止冒泡</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>DOM事件流</strong></p><p>这就要经过事件流，整个事件流分三个阶段：</p><ul><li>第一阶段是 捕获，事件从上（window）往下的过程；</li><li>第二阶段是 目标阶段，如点击某个目标元素，事件通过捕获到达目标元素，就是目标阶段；</li><li>第三个阶段是 冒泡，从目标元素再上传到window对象，就是冒泡的过程。</li></ul><p><img src="/2020/11/26/js-DOM/1606715897933.png"></p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token boolean">true</span><span class="token punctuation">:</span>时间捕捉 外入内<span class="token boolean">false</span><span class="token punctuation">:</span>事件冒泡 内到外</code></pre><h3 id="事件冒泡例子（内到外）"><a href="#事件冒泡例子（内到外）" class="headerlink" title="事件冒泡例子（内到外）"></a>事件冒泡例子（内到外）</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>bubble<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        button&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #third&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>thin solid red<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #second&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>thin solid red<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #first&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>thin solid red<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>third<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>事件冒泡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><pre class=" language-js"><code class="language-js">        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="事件捕获例子（外到内）"><a href="#事件捕获例子（外到内）" class="headerlink" title="事件捕获例子（外到内）"></a>事件捕获例子（外到内）</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>bubble<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        button&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #third&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>thin solid red<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #second&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>thin solid red<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #first&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>thin solid red<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>third<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>事件冒泡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>stopPropagation()方法只能阻止事件的冒泡，而不能阻止事件捕获。</strong></p></blockquote><h3 id="阻止事件捕获"><a href="#阻止事件捕获" class="headerlink" title="阻止事件捕获"></a>阻止事件捕获</h3><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            event<span class="token punctuation">.</span><span class="token function">stopImmediatePropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="stopImmediatePropagation-和-stopPropagation-的区别"><a href="#stopImmediatePropagation-和-stopPropagation-的区别" class="headerlink" title="stopImmediatePropagation() 和 stopPropagation()的区别"></a>stopImmediatePropagation() 和 stopPropagation()的区别</h3><p>　　<strong>后者只会阻止冒泡或者是捕获。 但是前者除此之外还会阻止该元素的其他事件发生，但是后者就不会阻止其他事件的发生</strong></p><h2 id="js进行css操作"><a href="#js进行css操作" class="headerlink" title="js进行css操作"></a>js进行css操作</h2><h3 id="改变-HTML-样式"><a href="#改变-HTML-样式" class="headerlink" title="改变 HTML 样式"></a>改变 HTML 样式</h3><p>语法</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">style</span></code></pre><h3 id="1-直接设置style属性"><a href="#1-直接设置style属性" class="headerlink" title="1.直接设置style属性"></a>1.直接设置style属性</h3><pre class=" language-js"><code class="language-js"> element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'100px'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span> </code></pre><h3 id="2-直接设置属性"><a href="#2-直接设置属性" class="headerlink" title="2.直接设置属性"></a>2.直接设置属性</h3><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'100px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-使用setAttribute设置style属性"><a href="#3-使用setAttribute设置style属性" class="headerlink" title="3.使用setAttribute设置style属性"></a>3.使用setAttribute设置style属性</h3><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token string">'height: 100px !important'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-使用setProperty设置属性，通过第三个参数设置important"><a href="#4-使用setProperty设置属性，通过第三个参数设置important" class="headerlink" title="4.使用setProperty设置属性，通过第三个参数设置important"></a>4.使用setProperty设置属性，通过第三个参数设置important</h3><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'300px'</span><span class="token punctuation">,</span> <span class="token string">'important'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-设置cssText"><a href="#5-设置cssText" class="headerlink" title="5.设置cssText"></a>5.设置cssText</h3><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">'height: 100px !important'</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'height: 100px !important'</span><span class="token punctuation">;</span></code></pre><h3 id="6-改变class"><a href="#6-改变class" class="headerlink" title="6. 改变class"></a>6. 改变class</h3><p>比如JQ的更改class相关方法</p><p>因JS获取不到css的伪元素，所以可以通过改变伪元素父级的class来动态更改伪元素的样式</p><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span>className <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'blue fb'</span><span class="token punctuation">;</span></code></pre><h3 id="7-创建引入新的css样式文件"><a href="#7-创建引入新的css样式文件" class="headerlink" title="7. 创建引入新的css样式文件"></a>7. 创建引入新的css样式文件</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addNewStyle</span><span class="token punctuation">(</span>newStyle<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> styleElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'styles_js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>styleElement<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                styleElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                styleElement<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/css'</span><span class="token punctuation">;</span>                styleElement<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'styles_js'</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>styleElement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            styleElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>newStyle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">addNewStyle</span><span class="token punctuation">(</span><span class="token string">'.box &amp;#123;height: 100px !important;&amp;#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="8-使用addRule、insertRule"><a href="#8-使用addRule、insertRule" class="headerlink" title="8. 使用addRule、insertRule"></a>8. 使用addRule、insertRule</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在原有样式操作</span>        document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">,</span> <span class="token string">'height: 100px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insertRule</span><span class="token punctuation">(</span><span class="token string">'.box &amp;#123;height: 100px&amp;#125;'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 或者插入新样式时操作</span>        <span class="token keyword">var</span> styleEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            styleSheet <span class="token operator">=</span> styleEl<span class="token punctuation">.</span>sheet<span class="token punctuation">;</span>        styleSheet<span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">,</span> <span class="token string">'height: 100px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        styleSheet<span class="token punctuation">.</span><span class="token function">insertRule</span><span class="token punctuation">(</span><span class="token string">'.box &amp;#123;height: 100px&amp;#125;'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>styleEl<span class="token punctuation">)</span><span class="token punctuation">;</span>        </code></pre><h1 id="DOM-集合"><a href="#DOM-集合" class="headerlink" title="DOM 集合"></a>DOM 集合</h1><p>getElementsByTagName() 方法返回 <em>HTMLCollection</em> 对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取集合中的第二个p元素</span></code></pre><p>length 属性定义了 HTMLCollection 中元素的数量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myCollection <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> myCollection<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//另一个实际利用</span><span class="token keyword">var</span> myCollection <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myCollection<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    myCollection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>HTMLCollection 并非数组！</p></blockquote><h1 id="NodeList-对象"><a href="#NodeList-对象" class="headerlink" title="NodeList 对象"></a>NodeList 对象</h1><p>querySelectorAll() 方法返回 NodeList 对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myNodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">=</span> myNodeList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//索引从 0 开始。</span></code></pre><p>length 属性定义节点列表中的节点数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myNodelist <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> myNodelist<span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre><h1 id="HTMLCollection-与-NodeList-的区别"><a href="#HTMLCollection-与-NodeList-的区别" class="headerlink" title="HTMLCollection 与 NodeList 的区别"></a>HTMLCollection 与 NodeList 的区别</h1><ul><li>HTMLCollection（前一章）是 HTML 元素的集合。</li><li>NodeList 是文档节点的集合。</li><li>NodeList 和 HTML 集合几乎完全相同。</li><li>HTMLCollection 和 NodeList 对象都是类数组的对象列表（集合）。</li><li>它们都有定义列表（集合）中项目数的 length 属性。</li><li>它们都可以通过索引 (0, 1, 2, 3, 4, …) 像数组那样访问每个项目。</li><li>访问 HTMLCollection 项目，可以通过它们的名称、id 或索引号。</li><li>访问 NodeList 项目，只能通过它们的索引号。</li><li>只有 NodeList 对象能包含属性节点和文本节点。</li><li>节点列表不是数组！</li><li>节点数组看起来像数组，但并不是。</li><li>您能够遍历节点列表并像数组那样引用其节点。</li><li>不过，您无法对节点列表使用数组方法，比如 valueOf()、push()、pop() 或 join()。</li></ul><p><a href="https://www.jianshu.com/p/f6ff5ebe45fd">HTMLCollection vs. NodeList</a></p><h1 id="DOM实例"><a href="#DOM实例" class="headerlink" title="DOM实例"></a>DOM实例</h1><h2 id="例子集合"><a href="#例子集合" class="headerlink" title="例子集合"></a><a href="https://www.runoob.com/js/js-ex-dom.html">例子集合</a></h2><h2 id="查找集合"><a href="#查找集合" class="headerlink" title="查找集合"></a><a href="https://juejin.cn/post/6844903888886185998#heading-17">查找集合</a></h2><h2 id="多个监听事件覆盖"><a href="#多个监听事件覆盖" class="headerlink" title="多个监听事件覆盖"></a>多个监听事件覆盖</h2><p>当同一个对象使用.onclick的写法触发多个方法的时候，后一个方法会把前一个方法覆盖掉，也就是说，在对象的onclick事件发生时，只会执行最后绑定的方法。而用事件监听则不会有覆盖的现象，每个绑定的事件都会被执行。如下：</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"yuanEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"第一个事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"第二个事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"第三个事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>最后只输出：第三个事件，因为后一个方法都把前一个方法覆盖掉了。<br>原生态的事件绑定函数addEventListener：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> eventOne <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"第一个监听事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">eventTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"第二个监听事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"yuanEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//addEventListener：绑定函数</span> btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>eventOne<span class="token punctuation">)</span><span class="token punctuation">;</span> btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>eventTwo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出：第一个监听事件 和 第二个监听事件</p><h2 id="一次性事件绑定-执行中松绑"><a href="#一次性事件绑定-执行中松绑" class="headerlink" title="一次性事件绑定(执行中松绑)"></a>一次性事件绑定(执行中松绑)</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// create a one-time event</span><span class="token keyword">function</span> <span class="token function">onetime</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// create event</span>    node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// remove event</span>        e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">,</span> arguments<span class="token punctuation">.</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// call handler</span>        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">removeEvenListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="批量绑定事件-js"><a href="#批量绑定事件-js" class="headerlink" title="批量绑定事件 js"></a>批量绑定事件 js</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> list_obj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//var list_obj = document.getElementsByTagName('li'); </span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> list_obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          list_obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  </code></pre><p><strong>易错点</strong>  </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> list_obj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> list_obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          list_obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当onclick事件发生的时候，会向上找到i对象的值。这个时候，由于已经循环完毕（编译），所以i的值是5</span><span class="token comment" spellcheck="true">//所以注意闭包</span></code></pre><p><strong>解决办法</strong></p><ol><li>let是块作用域，而var是函数或者全局作用域</li><li>利用闭包</li></ol><pre class=" language-js"><code class="language-js">list_obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//return function()&amp;#123; alert(i);&amp;#125;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> </code></pre><h2 id="控制网页前进和后退（历史页面）"><a href="#控制网页前进和后退（历史页面）" class="headerlink" title="控制网页前进和后退（历史页面）"></a>控制网页前进和后退（历史页面）</h2><p>这个前进后退按钮是需要在特定环境下才有效果的，即你需要从另一个页面进入到这个页面后，点击这个后退按钮才有后退的效果，否则是没有的。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>后退<span class="token punctuation">"</span></span> <span class="token attr-name">οnclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:history.go(-1);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>前进<span class="token punctuation">"</span></span> <span class="token attr-name">οnclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:history.go(1);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="无刷新更改URL"><a href="#无刷新更改URL" class="headerlink" title="无刷新更改URL"></a>无刷新更改URL</h2><p>data是你要存放的数据，可以使用history.state获取，title是标题，为空则不改变，url是新url</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span>json<span class="token punctuation">,</span>title<span class="token punctuation">:</span>string<span class="token punctuation">,</span>url<span class="token punctuation">:</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会存储在url历史中</span>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span>json<span class="token punctuation">,</span>title<span class="token punctuation">:</span>string<span class="token punctuation">,</span>url<span class="token punctuation">:</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不会存储。。。</span></code></pre><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><p>用来控制页面跳转</p><pre class=" language-js"><code class="language-js">location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//跳转</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'xxxx'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//同上</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//刷新页面</span></code></pre><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p><code>setInterval</code>在执行完一次代码之后，经过了那个固定的时间间隔，它还会<strong>自动重复</strong>执行代码，而<code>setTimeout</code><strong>只执行一次</strong>那段代码。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>callback<span class="token operator">/</span><span class="token keyword">function</span><span class="token punctuation">,</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//每隔ms毫秒执行一次函数（回调函数只写函数名）</span><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token operator">/</span><span class="token keyword">function</span><span class="token punctuation">,</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在ms毫秒后执行一次函数</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清理掉setInterval定时器</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//让setTimeout定时器失效</span>window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>callBack<span class="token operator">/</span><span class="token keyword">function</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//专门为动画设置的定时器（效果比setInterval流畅，每秒执行60次，大部分浏览器中，每秒执行次数和显示器刷新率一致）</span></code></pre><h2 id="滚动动态加载内容"><a href="#滚动动态加载内容" class="headerlink" title="滚动动态加载内容"></a>滚动动态加载内容</h2><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 页面滚动事件（一般加给window）</span>    <span class="token comment" spellcheck="true">// 页面被卷起来的高度距离顶部或底部的距离</span>    <span class="token keyword">var</span> juan <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取页面被卷起来的高度，documentElement相当于html标签</span>    <span class="token keyword">var</span> total <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取页面总高度</span>    <span class="token keyword">var</span> visul <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取可见区的高度（即浏览器显示出来的高度）</span>    <span class="token keyword">var</span> bot <span class="token operator">=</span> total <span class="token operator">-</span> juan <span class="token operator">-</span> visul<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// bot就是可见区下面的高度（这是我们需要的）</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 当bot小于某值时，加载新元素</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><a href="https://www.cnblogs.com/xiaohuochai/p/5294409.html">详细讲解1</a></p><p><a href="https://www.cnblogs.com/xiaohuochai/p/5831640.html">详细讲解2</a></p><h2 id="右键点击事件"><a href="#右键点击事件" class="headerlink" title="右键点击事件"></a>右键点击事件</h2><p>oncontextmenu</p><h2 id="表单绑定事件的触发"><a href="#表单绑定事件的触发" class="headerlink" title="表单绑定事件的触发"></a>表单绑定事件的触发</h2><ul><li>onkeydown // 按下按键时立即触发，该事件一般绑定在document/window上，因为即使被绑定的表单没有获得焦点，该事件也会执行</li><li>onkeypress // 按下按键时立即触发，只有被绑定的元素获得焦点了，才会执行事件（适用于动态search）</li><li>onchange // 表单值改变时执行，按下按键时不是立即触发，而是等到输入完毕时才会触发（输入完毕指的是按下回车或表单失去焦点）</li><li>oninput // 表单值改变时立即触发</li></ul><h2 id="动画事件"><a href="#动画事件" class="headerlink" title="动画事件"></a>动画事件</h2><ul><li>animationend 该事件在 CSS 动画结束播放时触发</li><li>animationiteration 该事件在 CSS 动画重复播放时触发</li><li>animationstart 该事件在 CSS 动画开始播放时触发</li><li>transitionend 该事件在 CSS 完成过渡后触发</li></ul><h2 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h2><p>建立onclick事件方法，加入var ev=window.event; ev.preventDefault();</p><p>阻止a标签的默认事件：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:void(0)"</span><span class="token operator">></span>链接<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js object</title>
      <link href="2020/11/26/js-object/"/>
      <url>2020/11/26/js-object/</url>
      
        <content type="html"><![CDATA[<h1 id="对象基本操作"><a href="#对象基本操作" class="headerlink" title="对象基本操作"></a>对象基本操作</h1><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><h3 id="基本生成办法（直接生成obj）"><a href="#基本生成办法（直接生成obj）" class="headerlink" title="基本生成办法（直接生成obj）"></a>基本生成办法（直接生成obj）</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  foo<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span>  <span class="token string">'h w'</span><span class="token punctuation">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">,</span>  <span class="token string">'p+q'</span><span class="token punctuation">:</span> <span class="token string">'Hello World'</span>，  m<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>  <span class="token number">3.2</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>  <span class="token number">1e2</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token number">1e-2</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token number">234</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token number">0xFF</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Object &amp;#123;</span><span class="token comment" spellcheck="true">//   1: "a",</span><span class="token comment" spellcheck="true">//   3.2: "b",</span><span class="token comment" spellcheck="true">//   100: true,</span><span class="token comment" spellcheck="true">//   0.01: true,</span><span class="token comment" spellcheck="true">//   0.234: true,</span><span class="token comment" spellcheck="true">//   255: true</span><span class="token comment" spellcheck="true">// &amp;#125;</span>obj<span class="token punctuation">[</span><span class="token string">'100'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="constructor（用构造函数-new生成对象）"><a href="#constructor（用构造函数-new生成对象）" class="headerlink" title="constructor（用构造函数+new生成对象）"></a>constructor（用构造函数+new生成对象）</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//构造函数</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> age<span class="token punctuation">,</span> eye<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> first<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> last<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>eyeColor <span class="token operator">=</span> eye<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>changeName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化</span><span class="token keyword">var</span> myFather <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> myMother <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Sally"</span><span class="token punctuation">,</span> <span class="token string">"Rally"</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Only change code below this line</span>Dog<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  numLegs<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  eat<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"nom nom nom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  describe<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"My name is "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  foo<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  bar<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>foo  <span class="token comment" spellcheck="true">// 1</span>obj<span class="token punctuation">[</span>foo<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 2</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token number">0.7</span><span class="token punctuation">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">,</span>  <span class="token number">123</span><span class="token punctuation">:</span> <span class="token string">'this is 123'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token string">'0.7'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// "Hello World"</span>obj<span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// "Hello World"</span>obj<span class="token number">.123</span> <span class="token comment" spellcheck="true">// 报错</span>obj<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// "this is 123"</span></code></pre><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token string">'bar'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></code></pre><h2 id="查看obj内属性，验证obj是否有某属性"><a href="#查看obj内属性，验证obj是否有某属性" class="headerlink" title="查看obj内属性，验证obj是否有某属性"></a>查看obj内属性，验证obj是否有某属性</h2><p><code>Object.keys</code>方法和<code>Object.getOwnPropertyNames</code>方法都用来遍历对象的属性。</p><p><code>Object.hasOwnProperty(Property)</code>确定是否含有对应属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  key1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  key2<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ['key1', 'key2']</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ['key1', 'key2']</span>Object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token function">Boolean</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key1<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="验证obj的原型链"><a href="#验证obj的原型链" class="headerlink" title="验证obj的原型链"></a>验证obj的原型链</h2><p><strong>instanceof</strong> <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链</p><pre class=" language-js"><code class="language-js">object <span class="token keyword">instanceof</span> <span class="token class-name">constructor</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> make<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> auto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'Honda'</span><span class="token punctuation">,</span> <span class="token string">'Accord'</span><span class="token punctuation">,</span> <span class="token number">1998</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>auto <span class="token keyword">instanceof</span> <span class="token class-name">Car</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>auto <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: true</span></code></pre><h2 id="删除obj属性"><a href="#删除obj属性" class="headerlink" title="删除obj属性"></a>删除obj属性</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> p<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["p"]</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">// true</span>obj<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">// undefined</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// []</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>p12 <span class="token comment" spellcheck="true">// true</span><span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  value<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">// 123</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">// false</span></code></pre><blockquote><p>删除一个不存在的属性，<code>delete</code>不报错，而且返回<code>true</code></p><p><code>delete</code>命令会返回<code>false</code>，那就是该属性存在，且不得删除。</p><p><code>delete</code>命令只能删除对象本身的属性，无法删除继承的属性</p></blockquote><h2 id="增加属性和方法"><a href="#增加属性和方法" class="headerlink" title="增加属性和方法"></a>增加属性和方法</h2><h3 id="增加constructor的办法"><a href="#增加constructor的办法" class="headerlink" title="增加constructor的办法"></a>增加constructor的办法</h3><p> prototype 属性允许您为对象构造器添加新属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> age<span class="token punctuation">,</span> eyecolor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eyeColor <span class="token operator">=</span> eyecolor<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>nationality <span class="token operator">=</span> <span class="token string">"English"</span><span class="token punctuation">;</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> age<span class="token punctuation">,</span> eye<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> first<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> last<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>eyeColor <span class="token operator">=</span> eye<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> myFriend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Bill"</span><span class="token punctuation">,</span> <span class="token string">"Gates"</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span><span class="token string">"My friend is "</span> <span class="token operator">+</span> myFriend<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="增加单个的object的办法"><a href="#增加单个的object的办法" class="headerlink" title="增加单个的object的办法"></a>增加单个的object的办法</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Constructor function for Person objects</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> age<span class="token punctuation">,</span> eye<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> first<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> last<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>eyeColor <span class="token operator">=</span> eye<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create 2 Person objects</span><span class="token keyword">var</span> myFather <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Add a name method to first object</span>myFather<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="属性是否存在-in运算符"><a href="#属性是否存在-in运算符" class="headerlink" title="属性是否存在 in运算符"></a>属性是否存在 in运算符</h2><p>属性 in obj</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> p<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">'p'</span> <span class="token keyword">in</span> obj <span class="token comment" spellcheck="true">// true</span><span class="token string">'toString'</span> <span class="token keyword">in</span> obj <span class="token comment" spellcheck="true">// true</span></code></pre><p><code>in</code>运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的。就像上面代码中，对象<code>obj</code>本身并没有<code>toString</code>属性，但是<code>in</code>运算符会返回<code>true</code>，因为这个属性是继承的。</p><p>这时，可以使用对象的<code>hasOwnProperty</code>方法判断一下，是否为对象自身的属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'toString'</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="属性的遍历：for…in-循环"><a href="#属性的遍历：for…in-循环" class="headerlink" title="属性的遍历：for…in 循环"></a>属性的遍历：for…in 循环</h2><ul><li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li><li>它不仅遍历对象自身的属性，还遍历继承的属性。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'键名：'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'键值：'</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 键名： a</span><span class="token comment" spellcheck="true">// 键值： 1</span><span class="token comment" spellcheck="true">// 键名： b</span><span class="token comment" spellcheck="true">// 键值： 2</span><span class="token comment" spellcheck="true">// 键名： c</span><span class="token comment" spellcheck="true">// 键值： 3</span></code></pre><h2 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h2><p>格式如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">with</span> <span class="token punctuation">(</span>对象<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  语句<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 例一</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  p1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  p2<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  p1 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  p2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span>obj<span class="token punctuation">.</span>p1 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>p2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 例二</span><span class="token keyword">with</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>links<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>links<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>links<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>links<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><code>with</code>区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  p1 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  p2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>p1 <span class="token comment" spellcheck="true">// undefined</span>p1 <span class="token comment" spellcheck="true">// 4</span></code></pre><h2 id="额外的object静态方法"><a href="#额外的object静态方法" class="headerlink" title="额外的object静态方法"></a>额外的object<a href="https://wangdoc.com/javascript/stdlib/attributes.html">静态方法</a></h2><p>（1）对象属性模型的相关方法</p><ul><li><code>Object.getOwnPropertyDescriptor()</code>：获取某个属性的描述对象。</li><li><code>Object.defineProperty()</code>：通过描述对象，定义某个属性。</li><li><code>Object.defineProperties()</code>：通过描述对象，定义多个属性。</li></ul><p>（ 2）控制对象状态的方法</p><ul><li><code>Object.preventExtensions()</code>：防止对象扩展。</li><li><code>Object.isExtensible()</code>：判断对象是否可扩展。</li><li><code>Object.seal()</code>：禁止对象配置。</li><li><code>Object.isSealed()</code>：判断一个对象是否可配置。</li><li><code>Object.freeze()</code>：冻结一个对象。</li><li><code>Object.isFrozen()</code>：判断一个对象是否被冻结。</li></ul><p><strong>（3）原型链相关方法</strong></p><ul><li><code>Object.create()</code>：该方法可以指定原型对象和属性，返回一个新的对象。</li><li><code>Object.getPrototypeOf()</code>：获取对象的<code>Prototype</code>对象。</li></ul><h2 id="实例对象方法-Object-prototype"><a href="#实例对象方法-Object-prototype" class="headerlink" title="实例对象方法 - Object.prototype"></a>实例对象方法 - Object.prototype</h2><ul><li><code>Object.prototype.valueOf()</code>：返回当前对象对应的值。</li><li><code>Object.prototype.toString()</code>：返回当前对象对应的字符串形式。</li><li><code>Object.prototype.toLocaleString()</code>：返回当前对象对应的本地字符串形式。</li><li><code>Object.prototype.hasOwnProperty()</code>：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。</li><li><code>Object.prototype.isPrototypeOf()</code>：判断当前对象是否为另一个对象的原型。</li><li><code>Object.prototype.propertyIsEnumerable()</code>：判断某个属性是否可枚举。</li></ul><p>Reference:</p><ol><li><a href="https://wangdoc.com/javascript/types/object.html#%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95">https://wangdoc.com/javascript/types/object.html#%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95</a></li><li><a href="https://wangdoc.com/javascript/stdlib/object.html#object-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">https://wangdoc.com/javascript/stdlib/object.html#object-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0</a></li></ol><h1 id="练习例子"><a href="#练习例子" class="headerlink" title="练习例子"></a>练习例子</h1><h2 id="从超类型继承行为"><a href="#从超类型继承行为" class="headerlink" title="从超类型继承行为"></a>从超类型继承行为</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"nom nom nom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有缺点所以不用</span><span class="token keyword">let</span> animal <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Object.create(obj)</code>创建一个新对象，并将其设置<code>obj</code>为新对象的<code>prototype</code>。回想一下，<code>prototype</code>就像创建对象的“配方”一样。通过将<code>prototype</code>of设置<code>animal</code>为<code>Animal&#39;s</code> <code>prototype</code>，您可以有效地给该<code>animal</code>实例与的任何其他实例相同的“配方” <code>Animal</code>。</p><pre class=" language-js"><code class="language-js">animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints "nom nom nom"</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span></code></pre><h2 id="将子代的原型设置为父代的实例-（2层继承的函数）"><a href="#将子代的原型设置为父代的实例-（2层继承的函数）" class="headerlink" title="将子代的原型设置为父代的实例 （2层继承的函数）"></a>将子代的原型设置为父代的实例 （2层继承的函数）</h2><h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Animal<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  constructor<span class="token punctuation">:</span> Animal<span class="token punctuation">,</span>  eat<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"nom nom nom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Only change code below this line</span>Dog<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> beagle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"nom nom nom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Bird<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个要最前面 注意是create！！！</span>Bird<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Bird<span class="token punctuation">;</span>Bird<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fly <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm flying!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>duck<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints "nom nom nom"</span>duck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints "I'm flying!</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>firstAndLast<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Only change code below this line</span>  <span class="token comment" spellcheck="true">// Complete the method below and implement the others similarly</span>  <span class="token keyword">var</span> firstName<span class="token operator">=</span>firstAndLast<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> lastName<span class="token operator">=</span>firstAndLast<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> fullName<span class="token operator">=</span>firstAndLast<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>setFullName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nameStr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr<span class="token operator">=</span>nameStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     fullName<span class="token operator">=</span>nameStr<span class="token punctuation">;</span>    firstName<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    lastName<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>setFirstName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nameStr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     firstName<span class="token operator">=</span>nameStr<span class="token punctuation">;</span>     fullName<span class="token operator">=</span>firstName<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>lastName<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>setLastName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nameStr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     lastName<span class="token operator">=</span>nameStr<span class="token punctuation">;</span>     fullName<span class="token operator">=</span>firstName<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>lastName<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getFullName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstName<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fullName<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getFirstName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> firstName<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>getLastName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> lastName<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> bob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Bob Ross'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bob<span class="token punctuation">.</span><span class="token function">setFullName</span><span class="token punctuation">(</span><span class="token string">"Haskell Curry"</span><span class="token punctuation">)</span>bob<span class="token punctuation">.</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bob<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="重写继承下来的方法"><a href="#重写继承下来的方法" class="headerlink" title="重写继承下来的方法"></a>重写继承下来的方法</h2><pre class=" language-js"><code class="language-js">ChildObject<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ParentObject<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继承</span></code></pre><pre class=" language-js"><code class="language-js">ChildObject<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>methodName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变                                          </span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"nom nom nom"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Inherit all methods from Animal</span>Bird<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Bird.eat() overrides Animal.eat()</span>Bird<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"peck peck peck"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>JavaScript在<code>duck’s</code> <code>prototype</code>链上查找方法的方式：</p><ol><li>duck=&gt;在这里定义了eat（）吗？没有。</li><li>bird=&gt;在这里定义了eat（）吗？=&gt;是的。执行它并停止搜索。</li><li>还定义了Animal =&gt; eat（），但是JavaScript在达到此级别之前停止搜索。</li><li>Object =&gt; JavaScript在达到此级别之前已停止搜索。</li></ol><h2 id="重置继承的构造方法属性"><a href="#重置继承的构造方法属性" class="headerlink" title="重置继承的构造方法属性"></a>重置继承的构造方法属性</h2><p>当一个对象<code>prototype</code>从另一个对象继承其对象时，它还将继承超类型的构造函数属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Bird<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>duck<span class="token punctuation">.</span>constructor <span class="token comment" spellcheck="true">// function Animal()&amp;#123;...&amp;#125;</span></code></pre><p>但是<code>duck</code>和的所有实例<code>Bird</code>都应表明它们是由<code>Bird</code>和不是构造的<code>Animal</code>。为此，您可以手动将<code>Bird&#39;s</code>构造函数属性设置为该<code>Bird</code>对象：</p><pre class=" language-js"><code class="language-js">Bird<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Bird<span class="token punctuation">;</span>duck<span class="token punctuation">.</span>constructor <span class="token comment" spellcheck="true">// function Bird()&amp;#123;...&amp;#125;</span></code></pre><p>修改代码，<code>duck.constructor</code>然后<code>beagle.constructor</code>返回它们各自的构造函数。</p><h2 id="使用Mixin在不相关的对象之间添加通用行为"><a href="#使用Mixin在不相关的对象之间添加通用行为" class="headerlink" title="使用Mixin在不相关的对象之间添加通用行为"></a>使用Mixin在不相关的对象之间添加通用行为</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> bird <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">"Donald"</span><span class="token punctuation">,</span>  numLegs<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> boat <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">"Warrior"</span><span class="token punctuation">,</span>  type<span class="token punctuation">:</span> <span class="token string">"race-boat"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此处创建办法</span><span class="token keyword">let</span> glideMixin  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>glide <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Flying, wooosh!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">glideMixin</span><span class="token punctuation">(</span>bird<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints "Flying, wooosh!"</span><span class="token function">glideMixin</span><span class="token punctuation">(</span>boat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints "Flying, wooosh!"</span></code></pre><h2 id="创建模块-利用立马执行函数"><a href="#创建模块-利用立马执行函数" class="headerlink" title="创建模块-利用立马执行函数"></a>创建模块-利用立马执行函数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> motionModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    glideMixin<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>glide <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Gliding on the water"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    flyMixin<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>fly <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Flying, wooosh!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// The two parentheses cause the function to be immediately invoked</span><span class="token comment" spellcheck="true">//////////////////////////////////////////////////////////</span>motionModule<span class="token punctuation">.</span><span class="token function">glideMixin</span><span class="token punctuation">(</span>duck<span class="token punctuation">)</span><span class="token punctuation">;</span>duck<span class="token punctuation">.</span><span class="token function">glide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="查看obj-array中-每个obj是否都存有有效的属性（-NaN-undefined-）"><a href="#查看obj-array中-每个obj是否都存有有效的属性（-NaN-undefined-）" class="headerlink" title="查看obj array中 每个obj是否都存有有效的属性（ NaN undefined ）"></a>查看obj array中 每个obj是否都存有有效的属性（ NaN undefined ）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">truthCheck</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> pre<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Is everyone being true?</span>  <span class="token keyword">return</span> collection<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>obj <span class="token operator">=</span><span class="token operator">></span> obj<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">truthCheck</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"single"</span><span class="token punctuation">:</span> <span class="token string">"double"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"single"</span><span class="token punctuation">:</span> <span class="token number">NaN</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"single"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">truthCheck</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> pre<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> collection<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js arrowFunction 箭头函数</title>
      <link href="2020/11/26/js-arrowFunction/"/>
      <url>2020/11/26/js-arrowFunction/</url>
      
        <content type="html"><![CDATA[<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><h2 id="1-一般使用箭头函数时，代码块部分只有一条语句时，不使用大括号"><a href="#1-一般使用箭头函数时，代码块部分只有一条语句时，不使用大括号" class="headerlink" title="1. 一般使用箭头函数时，代码块部分只有一条语句时，不使用大括号"></a>1. 一般使用箭头函数时，代码块部分只有一条语句时，不使用大括号</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num1 <span class="token operator">+</span> num2 </code></pre><ul><li>同样的写法</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>等同于</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="2-如果有多条语句，使用大括号，同时使用return-否则没有返回值"><a href="#2-如果有多条语句，使用大括号，同时使用return-否则没有返回值" class="headerlink" title="2. 如果有多条语句，使用大括号，同时使用return(否则没有返回值)"></a>2. 如果有多条语句，使用大括号，同时使用return(否则没有返回值)</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="3-使用箭头函数返回对象：必须在对象外面加上括号，否则就只是个代码块，从而就不会返回对象"><a href="#3-使用箭头函数返回对象：必须在对象外面加上括号，否则就只是个代码块，从而就不会返回对象" class="headerlink" title="3. 使用箭头函数返回对象：必须在对象外面加上括号，否则就只是个代码块，从而就不会返回对象"></a>3. 使用箭头函数返回对象：必须在对象外面加上括号，否则就只是个代码块，从而就不会返回对象</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><ul><li>等同于</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'a'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="4-当遇到this"><a href="#4-当遇到this" class="headerlink" title="4.当遇到this"></a>4.当遇到this</h2><p>箭头函数和匿名函数有个明显的区别：箭头函数内部的<code>this</code>是词法作用域，由上下文确定。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    birth<span class="token punctuation">:</span> <span class="token number">1990</span><span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1990</span>        <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this指向window或undefined</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    birth<span class="token punctuation">:</span> <span class="token number">1990</span><span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1990</span>        <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this指向obj对象</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 26，箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj1</span></code></pre><h2 id="5-什么时候不要用箭头函数"><a href="#5-什么时候不要用箭头函数" class="headerlink" title="5.什么时候不要用箭头函数"></a>5.什么时候不要用箭头函数</h2><p><a href="https://segmentfault.com/a/1190000007074846">详细解释</a></p><p>Reference：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 模块化编程</title>
      <link href="2020/11/26/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
      <url>2020/11/26/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="JS模块写法"><a href="#JS模块写法" class="headerlink" title="JS模块写法"></a>JS模块写法</h1><h2 id="一般写法"><a href="#一般写法" class="headerlink" title="一般写法"></a>一般写法</h2><pre class=" language-js"><code class="language-js">　<span class="token keyword">function</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token comment" spellcheck="true">//...</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token keyword">function</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token comment" spellcheck="true">//...</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>缺点：”污染”了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系。</p><h2 id="对象写法"><a href="#对象写法" class="headerlink" title="对象写法"></a>对象写法</h2><pre class=" language-js"><code class="language-js">　　<span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　_count <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>　　　　m1 <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token comment" spellcheck="true">//...</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>　　　　m2 <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token comment" spellcheck="true">//...</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>缺点：写法会暴露所有模块成员，内部状态可以被外部改写（对象私有属性会被改）</p><h2 id="立即执行函数写法-Immediately-Invoked-Function-Expression，IIFE（不算做严谨闭包）"><a href="#立即执行函数写法-Immediately-Invoked-Function-Expression，IIFE（不算做严谨闭包）" class="headerlink" title="立即执行函数写法-Immediately-Invoked Function Expression，IIFE（不算做严谨闭包）"></a>立即执行函数写法-Immediately-Invoked Function Expression，IIFE（不算做严谨闭包）</h2><p>达到不暴露私有成员的目的</p><p>是为了形成块级作用域，不污染全局。常用的写法有：</p><ul><li>(function(形参){函数体})(实参)</li><li>(function(形参){函数体}(实参))</li><li>!function(形参){函数体}(实参)</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* code */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* code */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>甚至像下面这样写，也是可以的。</p><pre class=" language-js"><code class="language-js"><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* code */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">~</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* code */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* code */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* code */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">　　<span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> _count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> m1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token comment" spellcheck="true">//...</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> m2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token comment" spellcheck="true">//...</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　<span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　m1 <span class="token punctuation">:</span> m1<span class="token punctuation">,</span>　　　　　　m2 <span class="token punctuation">:</span> m2　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>module1<span class="token punctuation">.</span>_count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span></code></pre><h2 id="放大模式"><a href="#放大模式" class="headerlink" title="放大模式"></a>放大模式</h2><pre class=" language-js"><code class="language-js">　　<span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　mod<span class="token punctuation">.</span>m3 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token comment" spellcheck="true">//...</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　<span class="token keyword">return</span> mod<span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>module1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="宽放大模式（Loose-augmentation）"><a href="#宽放大模式（Loose-augmentation）" class="headerlink" title="宽放大模式（Loose augmentation）"></a>宽放大模式（Loose augmentation）</h2><pre class=" language-js"><code class="language-js">　<span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token comment" spellcheck="true">//...</span>　　　　<span class="token keyword">return</span> mod<span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>module1 <span class="token operator">||</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>与”放大模式”相比，＂宽放大模式＂就是”立即执行函数”的参数可以是空对象。</p><h2 id="输入全局变量"><a href="#输入全局变量" class="headerlink" title="输入全局变量"></a>输入全局变量</h2><p>独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。</p><p>为了在模块内部调用全局变量，必须显式地将其他变量输入模块。</p><pre class=" language-js"><code class="language-js">　　<span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">,</span> YAHOO<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token comment" spellcheck="true">//...</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">,</span> YAHOO<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步(或者同步)任务中，只要使用了回调函<br>数，实际上就是在使用闭包!<br>定时器闭包案例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">wait</span><span class="token punctuation">(</span> <span class="token string">"Hello, closure!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>事件监听闭包案例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">setupBot</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> selector<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">activator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Activating: "</span> <span class="token operator">+</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">setupBot</span><span class="token punctuation">(</span> <span class="token string">"Closure Bot 1"</span><span class="token punctuation">,</span> <span class="token string">"#bot_1"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setupBot</span><span class="token punctuation">(</span> <span class="token string">"Closure Bot 2"</span><span class="token punctuation">,</span> <span class="token string">"#bot_2"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的案例中，有个相同的特点：先定义函数，后执行函数时能够调用到函数中的私有变量或者实参。这便是闭包的特点吧</p><h2 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Un-curried function</span><span class="token keyword">function</span> <span class="token function">unCurried</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Curried function</span><span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Alternative using ES6</span><span class="token keyword">const</span> curried <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> y <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token function">curried</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Returns 3</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Only change code below this line</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Only change code above this line</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="自测"><a href="#自测" class="headerlink" title="自测"></a>自测</h1><ul><li>下面代码会输出什么？</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>答案：5个6</p><ul><li>如何处理能够输出1-5</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 闭包方式</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> index <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> index<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6 方式</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js IIFE 立即执行函数</title>
      <link href="2020/11/26/js-IIFE/"/>
      <url>2020/11/26/js-IIFE/</url>
      
        <content type="html"><![CDATA[<h1 id="IIFE-Imdiately-Invoked-Function-Expression"><a href="#IIFE-Imdiately-Invoked-Function-Expression" class="headerlink" title="IIFE - Imdiately Invoked Function Expression"></a>IIFE - Imdiately Invoked Function Expression</h1><p>一般用于构造私有变量，避免全局空间污染</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js closure</title>
      <link href="2020/11/26/js-closure/"/>
      <url>2020/11/26/js-closure/</url>
      
        <content type="html"><![CDATA[<h1 id="基本作用域"><a href="#基本作用域" class="headerlink" title="基本作用域"></a>基本作用域</h1><p>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。</p><p><img src="/2020/11/26/js-closure/1606362501029.png" alt="基本作用域例子"></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">　　alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> 　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 999</span></code></pre><p>另一方面，在函数外部自然无法读取函数内的局部变量。</p><pre class=" language-js"><code class="language-js">　<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">　　alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error</span></code></pre><p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">　　f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">　　alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 999</span></code></pre><h1 id="外部读取局部变量"><a href="#外部读取局部变量" class="headerlink" title="外部读取局部变量"></a>外部读取局部变量</h1><ol><li>在函数的内部，再定义一个函数</li><li>将内部函数值返回</li></ol><pre class=" language-js"><code class="language-js">　<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>　　　　<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">　　　　　　alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 999</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Javascript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>　　　　<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">　　　　　　alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　　　<span class="token keyword">return</span> f2<span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token keyword">var</span> result<span class="token operator">=</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">　　result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 999</span></code></pre><h1 id="闭包实际概念"><a href="#闭包实际概念" class="headerlink" title="闭包实际概念"></a>闭包实际概念</h1><p>一个函数和对其周围状态（<strong>lexical environment，词法环境</strong>）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是<strong>闭包</strong>（<strong>closure</strong>）。</p><blockquote><p>闭包就是能够读取其他函数内部变量的函数。</p><p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。</p><p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p></blockquote><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以<strong>读取函数内部的变量</strong>，另一个就是<strong>让这些变量的值始终保持在内存中</strong>。</p><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>　　　　nAdd<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>n<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　　　<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">　　　　　　alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　　　<span class="token keyword">return</span> f2<span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token keyword">var</span> result<span class="token operator">=</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">　　result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 999</span><span class="token function">　　nAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">　　result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1000</span></code></pre><p>自测</p><pre class=" language-js"><code class="language-js">　　<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"The Window"</span><span class="token punctuation">;</span>　　<span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　name <span class="token punctuation">:</span> <span class="token string">"My Object"</span><span class="token punctuation">,</span>　　　　getNameFunc <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　　　<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>　　　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">　　alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">　<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"The Window"</span><span class="token punctuation">;</span>　　<span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　name <span class="token punctuation">:</span> <span class="token string">"My Object"</span><span class="token punctuation">,</span>　　　　getNameFunc <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　　　<span class="token keyword">return</span> that<span class="token punctuation">.</span>name<span class="token punctuation">;</span>　　　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">　　alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Reference：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures</a></p><p><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html">http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js this keyword</title>
      <link href="2020/11/25/js-this-keyword/"/>
      <url>2020/11/25/js-this-keyword/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-this-关键字"><a href="#JavaScript-this-关键字" class="headerlink" title="JavaScript this 关键字"></a>JavaScript this 关键字</h1><p>面向对象语言中 this 表示当前对象的一个引用, 它会随着执行环境的改变而改变。</p><blockquote><p><code>this</code>绑定的四种情况：</p><ol><li>new 绑定。<code>new</code>实例化</li><li>显示绑定。<code>call</code>、<code>apply</code>、<code>bind</code>手动更改指向</li><li>隐式绑定。由上下文对象调用，如 <code>obj.fn()</code>，<code>this</code> 指向 <code>obj</code></li><li>默认绑定。默认绑定全局对象，在严格模式下会绑定到<code>undefined</code></li></ol><p>优先级new绑定最高，最后到默认绑定。 </p></blockquote><h2 id="在obj-function中，this-表示该方法所属的对象"><a href="#在obj-function中，this-表示该方法所属的对象" class="headerlink" title="在obj function中，this 表示该方法所属的对象"></a>在obj function中，this 表示该方法所属的对象</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>m <span class="token operator">=</span> test<span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 </span></code></pre><h2 id="variable-定义使用，this-表示全局对象"><a href="#variable-定义使用，this-表示全局对象" class="headerlink" title="variable 定义使用，this 表示全局对象"></a>variable 定义使用，this 表示全局对象</h2><p>window 就是该全局对象为 [<strong>object Window</strong>]</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> x<span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="在函数中，this-表示全局对象。"><a href="#在函数中，this-表示全局对象。" class="headerlink" title="在函数中，this 表示全局对象。"></a>在函数中，this 表示全局对象。</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>思考下面的函数作用域</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">y</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">y</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ReferenceError: a is not defined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>函数<code>x</code>是在函数<code>f</code>的外部声明的，所以它的作用域绑定外层，内部变量<code>a</code>不会到函数<code>f</code>体内取值，所以输出<code>1</code>，而不是<code>2</code>。</p><p>总之，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> bar<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>函数体内部声明的函数，作用域绑定函数体内部。</p><h2 id="在函数中，在严格模式下，this-是未定义的-undefined-。"><a href="#在函数中，在严格模式下，this-是未定义的-undefined-。" class="headerlink" title="在函数中，在严格模式下，this 是未定义的(undefined)。"></a>在函数中，在严格模式下，this 是未定义的(undefined)。</h2><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="在事件中，this-表示接收事件的元素。"><a href="#在事件中，this-表示接收事件的元素。" class="headerlink" title="在事件中，this 表示接收事件的元素。"></a>在事件中，this 表示接收事件的元素。</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>this.style.display<span class="token punctuation">=</span><span class="token punctuation">'</span>none<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我后我就消失了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h2 id="显示函数绑定，类似-call-和-apply-方法可以将-this-引用到任何对象。"><a href="#显示函数绑定，类似-call-和-apply-方法可以将-this-引用到任何对象。" class="headerlink" title="显示函数绑定，类似 call() 和 apply() 方法可以将 this 引用到任何对象。"></a>显示函数绑定，类似 call() 和 apply() 方法可以将 this 引用到任何对象。</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  fullName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  firstName<span class="token punctuation">:</span><span class="token string">"John"</span><span class="token punctuation">,</span>  lastName<span class="token punctuation">:</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span>fullName<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回 "John Doe"</span></code></pre><p><code>apply()</code>是函数的一个方法，作用是改变函数的调用对象。它的第一个参数就表示改变后的调用这个函数的对象。因此，这时<code>this</code>指的就是这第一个参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>m <span class="token operator">=</span> test<span class="token punctuation">;</span>obj<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span></code></pre><p><code>apply()</code>的参数为空时，默认调用全局对象。因此，这时的运行结果为<code>0</code>，证明<code>this</code>指的是全局对象。</p><p>如果把最后一行代码修改为</p><pre class=" language-javascript"><code class="language-javascript">obj<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span></code></pre><h2 id="改变-this-指向-this-apply-bind"><a href="#改变-this-指向-this-apply-bind" class="headerlink" title="改变 this 指向- this apply bind"></a>改变 this 指向- this apply bind</h2><h3 id="Function-prototype-call"><a href="#Function-prototype-call" class="headerlink" title="Function.prototype.call()"></a>Function.prototype.call()</h3><ul><li>使用方法, 就直接连接再函数名后面使用</li><li>语法:<br>-&gt; fn.call() / func.call(thisValue, arg1, arg2, …)<br>-&gt; obj.fn.call()</li><li>参数:<br>-&gt; 第一个参数, 就是函数内部的 this 指向<br>-&gt; 第二个参数开始, 依次给函数传递参数</li><li>特点:<br>-&gt; 会立即执行函数(不适合用作定时器处理函数或者事件处理函数)</li><li>作用:<br>-&gt; 伪数组借用数组方法</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> n<span class="token punctuation">:</span> <span class="token number">456</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 456</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//调用原生</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 覆盖掉继承的 hasOwnProperty 方法</span>obj<span class="token punctuation">.</span>hasOwnProperty <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'toString'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p><code>hasOwnProperty</code>是<code>obj</code>对象继承的方法，如果这个方法一旦被覆盖，就不会得到正确结果。<code>call</code>方法可以解决这个问题，它将<code>hasOwnProperty</code>方法的原始定义放到<code>obj</code>对象上执行，这样无论<code>obj</code>上有没有同名方法，都不会影响结果。</p><h3 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h3><ul><li>使用方法, 就直接连接再函数名后面使用</li><li>语法:<br>-&gt; fn.apply()<br>-&gt; obj.fn.apply()</li><li>参数: func.apply(thisValue, [arg1, arg2, …])<br>-&gt; 第一个参数, 就是函数内部的 this 指向<br>-&gt; 第二个参数: 是一个<strong>数组</strong>, 里面的每一项依次给函数传递参数</li><li>特点:<br>-&gt; 会立即执行函数</li><li>作用: 可以以数组的形式给某些功能函数传参<br>-&gt; Math.max()</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//跟for each的差别， 会有跳过</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// a</span><span class="token comment" spellcheck="true">// b</span>Array<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// a</span><span class="token comment" spellcheck="true">// undefined</span><span class="token comment" spellcheck="true">// b</span></code></pre><h3 id="Function-prototype-bind"><a href="#Function-prototype-bind" class="headerlink" title="Function.prototype.bind()"></a>Function.prototype.bind()</h3><ul><li>使用方法, 就直接连接再函数名后面使用</li><li>语法:<br>-&gt; fn.apply()<br>-&gt; obj.fn.apply()</li><li>参数:<br>-&gt; 第一个参数. 就是函数内部的 this 指向<br>-&gt; 从第二个参数开始, 依次给函数传递参数</li><li>特点:<br>-&gt; 不会立即调用函数<br>-&gt; 会返回一个新的函数, 一个已经被改变好 this 指向的函数</li><li>作用:<br>-&gt; 改变事件处理函数或者定时器处理函数的 this 指向</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  inc<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的this是windows</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> func <span class="token operator">=</span> counter<span class="token punctuation">.</span>inc<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新绑定为obj</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>counter<span class="token punctuation">.</span>count <span class="token comment" spellcheck="true">// 1</span></code></pre><p>Reference：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html">http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html</a></li><li><a href="https://javascript.ruanyifeng.com/oop/this.html#toc3">https://javascript.ruanyifeng.com/oop/this.html#toc3</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js copy object</title>
      <link href="2020/11/25/js-copy-object/"/>
      <url>2020/11/25/js-copy-object/</url>
      
        <content type="html"><![CDATA[<h1 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h1><h2 id="简单拷贝"><a href="#简单拷贝" class="headerlink" title="简单拷贝"></a>简单拷贝</h2><p>  新建一个空对象，使用for-in循环，将对象的所有属性复制到新建的空对象中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">simpleClone1</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!=</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cloneObj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cloneObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">simpleClone1</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><h2 id="使用属性描述符"><a href="#使用属性描述符" class="headerlink" title="使用属性描述符"></a>使用属性描述符</h2><p>  通过对象的原型，建立一个空的实例对象。通过forEach语句，获取到对象的所有属性的属性描述符，将其作为参数，设置到新建的空实例对象中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">simpleClone2</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> copy <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>propKey<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> desc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>orig<span class="token punctuation">,</span>propKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>copy<span class="token punctuation">,</span>propKey<span class="token punctuation">,</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> copy<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">simpleClone1</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><h2 id="使用jquery的extend-方法"><a href="#使用jquery的extend-方法" class="headerlink" title="使用jquery的extend()方法"></a>使用jquery的extend()方法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span>$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><h2 id="遍历复制"><a href="#遍历复制" class="headerlink" title="遍历复制"></a>遍历复制</h2><p>复制对象的属性时，对其进行判断，如果是数组或对象，则再次调用拷贝函数；否则，直接复制对象属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone1</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>cloneObj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!=</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cloneObj <span class="token operator">=</span> cloneObj <span class="token operator">||</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cloneObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>cloneObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cloneObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">deepClone1</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p>用JSON全局对象的parse和stringify方法来实现深复制算是一个简单讨巧的方法，它能正确处理的对象只有Number、String、Boolean、Array、扁平对象，即那些能够被json直接表示的数据结构</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">jsonClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">jsonClone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre><h2 id="使用jquery的extend-方法-1"><a href="#使用jquery的extend-方法-1" class="headerlink" title="使用jquery的extend()方法"></a>使用jquery的extend()方法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span>$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js form validation 表单验证</title>
      <link href="2020/11/25/js-form-validation/"/>
      <url>2020/11/25/js-form-validation/</url>
      
        <content type="html"><![CDATA[<h1 id="基本使用JS"><a href="#基本使用JS" class="headerlink" title="基本使用JS"></a>基本使用JS</h1><h2 id="添加交互事件"><a href="#添加交互事件" class="headerlink" title="添加交互事件"></a>添加交互事件</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>this.innerHTML<span class="token punctuation">=</span><span class="token punctuation">'</span>Ooops!<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击文本!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><h1 onclick="this.innerHTML='Ooops!'">点击文本!</h1><h2 id="操作DOM元素"><a href="#操作DOM元素" class="headerlink" title="操作DOM元素"></a>操作DOM元素</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例：向button元素分配onclick事件：</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">displayDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="操作css"><a href="#操作css" class="headerlink" title="操作css"></a>操作css</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法</span>dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>属性名 <span class="token operator">=</span> 属性值<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例如：</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span></code></pre><h1 id="验证表单"><a href="#验证表单" class="headerlink" title="验证表单"></a>验证表单</h1><h2 id="必填（或必选）"><a href="#必填（或必选）" class="headerlink" title="必填（或必选）"></a>必填（或必选）</h2><pre><code>&lt;script&gt;function validateForm()&#123;var x=document.forms[&quot;myForm&quot;][&quot;fname&quot;].value;if (x==null || x==&quot;&quot;)&#123;  alert(&quot;姓必须填写&quot;);  return false;  &#125;&#125;&lt;/script&gt; &lt;form name=&quot;myForm&quot; action=&quot;demo-form.php&quot; onsubmit=&quot;return validateForm()&quot; method=&quot;post&quot;&gt;姓: &lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;</code></pre><h2 id="Email验证"><a href="#Email验证" class="headerlink" title="Email验证"></a>Email验证</h2><p>检查输入的数据是否符合电子邮件地址的基本语法，只能做些基本检查：</p><p>输入的数据必须包含 @ 符号和点号(.)。同时，@ 不可以是邮件地址的首字符，并且 @ 之后需有至少一个点号</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myForm<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo-form.php<span class="token punctuation">"</span></span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return validateForm();<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Email: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>function validateForm()<span class="token entity" title="&#123;">&amp;#123;</span>  var x=document.forms["myForm"]["email"].value;  var atpos=x.indexOf("@");  var dotpos=x.lastIndexOf(".");  if (atpos&lt;1 || dotpos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>atpos+2</span> <span class="token attr-name">||</span> <span class="token attr-name">dotpos+2</span><span class="token punctuation">></span></span>=x.length)<span class="token entity" title="&#123;">&amp;#123;</span>    alert("不是一个有效的 e-mail 地址");    return false;  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js type identification 数据类型查找</title>
      <link href="2020/11/25/js-type/"/>
      <url>2020/11/25/js-type/</url>
      
        <content type="html"><![CDATA[<h1 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h1><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'string'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'string'</span></code></pre><h1 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h1><p>操作数是一个对象，右操作数是一个构造函数。如果左侧的对象是右侧构造函数的实例对象，则表达式返回true；否则返回false。</p><ul><li>可以识别内置对象类型、自定义类型及其父类型</li><li>不能识别标准类型，会返回false</li><li>不能识别undefined、null，会报错</li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token keyword">instanceof</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//Uncaught TypeError: Right-hand side of 'instanceof' is not an object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">instanceof</span> <span class="token class-name">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"jerry"</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>undefined <span class="token keyword">instanceof</span> <span class="token class-name">Undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">"jerry"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h1 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h1><ul><li><p>可以识别标准类型、内置对象类型及自定义类型</p></li><li><p>不能识别undefined、null，会报错，因为它俩没有构造函数</p></li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"jerry"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function String()&amp;#123;[native code]&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function Number()&amp;#123;[native code]&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function Boolean()&amp;#123;[native code]&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">"jerry"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function Object()&amp;#123;[native code]&amp;#125;</span></code></pre><h1 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h1><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"jerry"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object String]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Number]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Boolean]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Undefined]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Null]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">"jerry"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Object]</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js date</title>
      <link href="2020/11/25/js-date/"/>
      <url>2020/11/25/js-date/</url>
      
        <content type="html"><![CDATA[<h1 id="date基本"><a href="#date基本" class="headerlink" title="date基本"></a>date基本</h1><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>格林尼治标准时间(GMT) –伦敦</p><p>世界协调时间(UTC)又称世界统一时间</p><h2 id="闰年"><a href="#闰年" class="headerlink" title="闰年"></a>闰年</h2><p>诀是：四年一闰，百年不闰，四百年再闰</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">IsLeapYear</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> year <span class="token operator">==</span> <span class="token string">'number'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">'leap year'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">'common year'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'please input number'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">IsLeapYear</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'leap year'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">IsLeapYear</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'leap year'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">IsLeapYear</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'leap year'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">IsLeapYear</span><span class="token punctuation">(</span><span class="token number">1900</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'common year'</span></code></pre><h2 id="计算时分秒"><a href="#计算时分秒" class="headerlink" title="计算时分秒"></a>计算时分秒</h2><pre class=" language-js"><code class="language-js">date <span class="token operator">=</span> 100000s<span class="token function">day</span><span class="token punctuation">(</span>天<span class="token punctuation">)</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token operator">/</span><span class="token number">86400</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token function">hour</span><span class="token punctuation">(</span>小时<span class="token punctuation">)</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token operator">%</span><span class="token number">86400</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3600</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token function">minute</span><span class="token punctuation">(</span>分<span class="token punctuation">)</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token operator">%</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">46</span><span class="token function">second</span><span class="token punctuation">(</span>秒<span class="token punctuation">)</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">40</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100000</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">86400</span><span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">3600</span><span class="token operator">+</span> <span class="token number">46</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h1 id="Date-构造函数"><a href="#Date-构造函数" class="headerlink" title="Date()构造函数"></a>Date()构造函数</h1><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'7/12/2016'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Tue Jul 12 2016 00:00:00 GMT+0800 (中国标准时间)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2016-7-12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Tue Jul 12 2016 00:00:00 GMT+0800 (中国标准时间)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2016-07-12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Tue Jul 12 2016 08:00:00 GMT+0800 (中国标准时间)</span></code></pre><h1 id="date函数"><a href="#date函数" class="headerlink" title="date函数"></a>date函数</h1><h2 id="to类别"><a href="#to类别" class="headerlink" title="to类别"></a>to类别</h2><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>　　返回本地时区的日期字符串</p><h3 id="toUTCString"><a href="#toUTCString" class="headerlink" title="toUTCString()"></a>toUTCString()</h3><p>　　返回UTC时间的日期字符串</p><h3 id="toISOString"><a href="#toISOString" class="headerlink" title="toISOString()"></a>toISOString()</h3><p>　　返回Date对象的标准的日期时间字符串格式的字符串</p><h3 id="toDateString"><a href="#toDateString" class="headerlink" title="toDateString()"></a>toDateString()</h3><p>　　返回Date对象的日期部分的字符串</p><h3 id="toTimeString"><a href="#toTimeString" class="headerlink" title="toTimeString()"></a>toTimeString()</h3><p>　　返回Date对象的时间部分的字符串</p><h3 id="toJSON"><a href="#toJSON" class="headerlink" title="toJSON()"></a>toJSON()</h3><p>　　返回一个符合JSON格式的日期字符串，与toISOString方法的返回结果完全相同</p><h3 id="toLocaleString-NaN"><a href="#toLocaleString-NaN" class="headerlink" title="toLocaleString()"></a>toLocaleString()</h3><p>　　toString()方法的本地化转换</p><h3 id="toLocaleTimeString"><a href="#toLocaleTimeString" class="headerlink" title="toLocaleTimeString()"></a>toLocaleTimeString()</h3><p>　　toTimeString()方法的本地化转换</p><h3 id="toLocaleDateString"><a href="#toLocaleDateString" class="headerlink" title="toLocaleDateString()"></a>toLocaleDateString()</h3><p>　　toDateString()方法的本地化转换</p><h2 id="get类"><a href="#get类" class="headerlink" title="get类"></a>get类</h2><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h3><p>　　返回距离1970年1月1日0点的毫秒数</p><h3 id="getTimezoneOffset"><a href="#getTimezoneOffset" class="headerlink" title="getTimezoneOffset()"></a>getTimezoneOffset()</h3><p>　　返回当前时间与UTC的时区差异，以分钟表示(8*60=480分钟)，返回结果考虑到了夏令时因素</p><h3 id="get-UTC-FullYear"><a href="#get-UTC-FullYear" class="headerlink" title="get[UTC]FullYear()"></a>get[UTC]FullYear()</h3><p>　　返回年份(4位数)</p><h3 id="get-UTC-Month"><a href="#get-UTC-Month" class="headerlink" title="get[UTC]Month()"></a>get[UTC]Month()</h3><p>　　返回月份(0-11)</p><h3 id="get-UTC-Date"><a href="#get-UTC-Date" class="headerlink" title="get[UTC]Date()"></a>get[UTC]Date()</h3><p>　　返回第几天(1-31)</p><h3 id="get-UTC-Day"><a href="#get-UTC-Day" class="headerlink" title="get[UTC]Day()"></a>get[UTC]Day()</h3><p>　　返回星期几(0-6)</p><h3 id="get-UTC-Hours"><a href="#get-UTC-Hours" class="headerlink" title="get[UTC]Hours()"></a>get[UTC]Hours()</h3><p>　　返回小时值(0-23)</p><h3 id="get-UTC-Minutes"><a href="#get-UTC-Minutes" class="headerlink" title="get[UTC]Minutes()"></a>get[UTC]Minutes()</h3><p>　　返回分钟值(0-59)</p><h3 id="get-UTC-Seconds"><a href="#get-UTC-Seconds" class="headerlink" title="get[UTC]Seconds()"></a>get[UTC]Seconds()</h3><p>　　返回秒值(0-59)</p><h3 id="get-UTC-Milliseconds"><a href="#get-UTC-Milliseconds" class="headerlink" title="get[UTC]Milliseconds()"></a>get[UTC]Milliseconds()</h3><p>　　返回毫秒值(0-999)</p><p>　　[注意]通过标准日期时间格式字符串，且有前置0的形式的参数设置，设置的是UTC时间</p><h2 id="set类"><a href="#set类" class="headerlink" title="set类"></a>set类</h2><h3 id="setTime"><a href="#setTime" class="headerlink" title="setTime()"></a>setTime()</h3><p>使用毫秒的格式，设置一个Date对象的值</p><h3 id="set-UTC-Month"><a href="#set-UTC-Month" class="headerlink" title="set[UTC]Month()"></a>set[UTC]Month()</h3><p>设置月份(0-11)，以及可选的日期值</p><h3 id="set-UTC-Date"><a href="#set-UTC-Date" class="headerlink" title="set[UTC]Date()"></a>set[UTC]Date()</h3><p>设置第几天(1-31) </p><h3 id="set-UTC-Hours"><a href="#set-UTC-Hours" class="headerlink" title="set[UTC]Hours()"></a>set[UTC]Hours()</h3><p>设置小时值(0-23)，以及可选的分钟值、秒值及毫秒值</p><h3 id="set-UTC-Minutes"><a href="#set-UTC-Minutes" class="headerlink" title="set[UTC]Minutes()"></a>set[UTC]Minutes()</h3><p>设置分钟值(0-59)，以及可选的秒值及毫秒值</p><h3 id="set-UTC-Seconds"><a href="#set-UTC-Seconds" class="headerlink" title="set[UTC]Seconds()"></a>set[UTC]Seconds()</h3><p>设置秒值(0-59)，以及可选的毫秒值</p><h3 id="set-UTC-Milliseconds"><a href="#set-UTC-Milliseconds" class="headerlink" title="set[UTC]Milliseconds()"></a>set[UTC]Milliseconds()</h3><p>设置毫秒值(0-999)</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js error</title>
      <link href="2020/11/25/js-error/"/>
      <url>2020/11/25/js-error/</url>
      
        <content type="html"><![CDATA[<h1 id="error-参数"><a href="#error-参数" class="headerlink" title="error 参数"></a>error 参数</h1><ul><li>try语句可以测试代码块是否存在错误</li><li>catch语句使您可以处理错误</li><li>throw语句使您可以创建自定义错误 </li><li>finally语句使您可以在尝试捕获后执行代码，而不管结果如何</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> message<span class="token punctuation">,</span> x<span class="token punctuation">;</span>  message <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  message<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  x <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">"is empty"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">"is not a number"</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">"is too high"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">"is too low"</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"Error: "</span> <span class="token operator">+</span> err <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="error对象属性"><a href="#error对象属性" class="headerlink" title="error对象属性"></a>error对象属性</h1><table><thead><tr><th align="left">Property</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">设置返回error名字</td></tr><tr><td align="left">message</td><td align="left">设置返回error信息</td></tr></tbody></table><h1 id="Error类型"><a href="#Error类型" class="headerlink" title="Error类型"></a>Error类型</h1><ul><li>EvalError(eval函数错误)</li><li>RangeError(超出范围错误)</li><li>ReferenceError(引用不存在值错误)</li><li>SyntaxError(语法错误)</li><li>TypeError(类型错误)</li><li>URIError(URI错误)</li></ul><h1 id="error事件"><a href="#error事件" class="headerlink" title="error事件"></a>error事件</h1><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//DOM0级</span>window<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>url<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//DOM2级</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>url<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//控制台显示错误消息</span>window<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>url<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台不显示错误消息</span>window<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>url<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'smilex.gif'</span><span class="token punctuation">;</span>image<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js copy array</title>
      <link href="2020/11/25/js-copy-array/"/>
      <url>2020/11/25/js-copy-array/</url>
      
        <content type="html"><![CDATA[<h1 id="PUSH"><a href="#PUSH" class="headerlink" title="PUSH"></a>PUSH</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">copyArray</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><h1 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h1><p>使用该方法的缺点是数组中的项全部变成了字符串形式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">copyArray</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['1','2','3']</span>obj2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['1','2','3',4]</span></code></pre><h1 id="CONCAT"><a href="#CONCAT" class="headerlink" title="CONCAT"></a>CONCAT</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">copyArray</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><h1 id="SLICE"><a href="#SLICE" class="headerlink" title="SLICE"></a>SLICE</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">copyArray</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><p>  以上方法实现的仅是数组的浅拷贝，如果要实现数组的深拷贝，需要使用递归方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> result <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">copyArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">copyArray</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3,4]</span>obj2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3,4,5]</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js array</title>
      <link href="2020/11/25/js-array/"/>
      <url>2020/11/25/js-array/</url>
      
        <content type="html"><![CDATA[<h1 id="创建array"><a href="#创建array" class="headerlink" title="创建array"></a>创建array</h1><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> empty <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//没有元素的数组</span><span class="token keyword">var</span> primes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//有5个数值的数组</span><span class="token keyword">var</span> misc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//3个不同类型的元素</span></code></pre><h2 id="构建函数"><a href="#构建函数" class="headerlink" title="构建函数"></a>构建函数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Array本质是对象"><a href="#Array本质是对象" class="headerlink" title="Array本质是对象"></a>Array本质是对象</h1><pre class=" language-js"><code class="language-js">o<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//创建一个普通的对象</span>o<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"one"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用一个整数来索引它</span><span class="token comment" spellcheck="true">//数值键名被自动转成字符串</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 'a'</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 'a'</span></code></pre><h1 id="Array-基本的进出"><a href="#Array-基本的进出" class="headerlink" title="Array 基本的进出"></a>Array 基本的进出</h1><p>在数组最后增加一个元素,删除数组最后一个元素, 在数组头部增加一个元素,删除数组第一个元素</p><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>yourElement<span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>yourElement<span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2020/11/25/js-array/1606539463669.png"></p><h1 id="Array字符串化-toString"><a href="#Array字符串化-toString" class="headerlink" title="Array字符串化 - toString()"></a>Array字符串化 - toString()</h1><p>将数组字符串化。用逗号分割。相当于join(“,”);</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token keyword">var</span> n <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="稀疏数组-（不连续索引的数组）"><a href="#稀疏数组-（不连续索引的数组）" class="headerlink" title="稀疏数组 （不连续索引的数组）"></a>稀疏数组 （不连续索引的数组）</h1><h2 id="使用delete操作符"><a href="#使用delete操作符" class="headerlink" title="使用delete操作符"></a>使用delete操作符</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><h2 id="省略元素值"><a href="#省略元素值" class="headerlink" title="省略元素值"></a>省略元素值</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><h2 id="undefined元素"><a href="#undefined元素" class="headerlink" title="undefined元素"></a>undefined元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h1 id="数组乱序（shuffle）"><a href="#数组乱序（shuffle）" class="headerlink" title="数组乱序（shuffle）"></a>数组乱序（shuffle）</h1><p>sort()方法传入一个函数，此函数随机返回1或-1，达到随机排列数组元素的目的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[2,1,5,4,3]</span></code></pre><h1 id="数组max-min"><a href="#数组max-min" class="headerlink" title="数组max min"></a>数组max min</h1><p>Math.max.apply 来查找数组中的最高值：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myArrayMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Math.min.apply 来查找数组中的最低值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myArrayMin</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="数组排序办法"><a href="#数组排序办法" class="headerlink" title="数组排序办法"></a>数组排序办法</h1><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><p>reverse()方法用于反转数组的顺序，返回经过排序之后的数组；而原数组顺序也发生改变</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[5,3,4,2,1] [5,3,4,2,1]</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3,true,'str'] [3,true,'str']</span></code></pre><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><h3 id="默认排序"><a href="#默认排序" class="headerlink" title="默认排序"></a>默认排序</h3><p>　　默认情况下，sort()方法按字符串升序排列数组项，sort方法会调用每个数组项的toString()方法，然后比较得到的字符串排序，返回经过排序之后的数组，而原数组顺序也发生改变</p><blockquote><p>sort方法会调用每个数组项的<code>toString()</code>方法，得到字符串，然后再对得到的字符串进行排序。虽然数值15比3大，但在进行字符串比较时”15”则排在”3”前面。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5] [1,2,3,4,5]</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'3str'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[2, "2", 3, "3str"] [2, "2", 3, "3str"]</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1, 10, 5, 50] [1, 10, 5, 50]</span><span class="token comment" spellcheck="true">//强行要求</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span></code></pre><p>　　<strong>如果数组包含undefined元素，它们会被排到数组的尾部</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["2", 2, "3", 3, undefined] ["2", 2, "3", 3, undefined]</span></code></pre><h3 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h3><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p><strong>Array.sort(function(a,b));</strong></p><blockquote><p>方法函数function有两个参数a和b，通过比较两个值的大小，然后返回比较的结果，用于表明用何种方法进行排序。</p></blockquote><ul><li>**负值(a&lt;b)**：如果返回一个小于零的数，数组将按照升序排序。</li><li>**零(a=b)**： 如果返回一个等于零的数，即两个参数相等。</li><li>**正值(a&gt;b)**：如果返回一个大于零的数，数组将按照降序排序。</li></ul><p><strong>简单的来说就是：</strong></p><ul><li>若：<strong>return a-b;</strong> <strong>表示数组将按照升序排序。</strong></li><li>若：<strong>return a=b;</strong> <strong>表示数组不进行排序。</strong></li><li>若：<strong>return b-a;</strong> <strong>表示数组将按照降序排序。</strong></li></ul><p><strong>例1：Array数组均为数字或数字型字符串，则按指定的规则顺序：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//降序</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'87'</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token string">'81'</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出：21,27,64,81,87</span><span class="token comment" spellcheck="true">//升序</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'87'</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token string">'81'</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">xmx</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> b<span class="token operator">-</span>a<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>xmx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出：87,81,64,27,21</span></code></pre><h4 id="区分大小写的字母排序"><a href="#区分大小写的字母排序" class="headerlink" title="区分大小写的字母排序"></a>区分大小写的字母排序</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Z'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'V'</span><span class="token punctuation">,</span><span class="token string">'I'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> x <span class="token operator">></span> y <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>——————OUTPUT——————<span class="token punctuation">[</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span> <span class="token punctuation">]</span></code></pre><h4 id="对象属性条件排序"><a href="#对象属性条件排序" class="headerlink" title="对象属性条件排序"></a>对象属性条件排序</h4><p>当数组元素为多属性的对象时，我们可能需要根据不同的属性来具体排序，比如以下数组中，我们想按照年龄降序排列：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"code"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span>grade<span class="token punctuation">:</span><span class="token number">98</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"zevin"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>grade<span class="token punctuation">:</span><span class="token number">94</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"j"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">,</span>grade<span class="token punctuation">:</span><span class="token number">91</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age <span class="token operator">></span> b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>——————OUTPUT——————<span class="token punctuation">[</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'zevin'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token number">94</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'j'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token number">91</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'code'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token number">98</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre><h4 id="自定义根据对象属性"><a href="#自定义根据对象属性" class="headerlink" title="自定义根据对象属性"></a>自定义根据对象属性</h4><p>封装一个函数sort，接收两个形参：需要排序的数组arr以及排序依据的属性键名property。其中用闭包的写法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"code"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span>grade<span class="token punctuation">:</span><span class="token number">98</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"zevin"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>grade<span class="token punctuation">:</span><span class="token number">94</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"j"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">,</span>grade<span class="token punctuation">:</span><span class="token number">91</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>property<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> a<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token string">"grade"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>——————OUTPUT——————<span class="token punctuation">[</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'code'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token number">98</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'zevin'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token number">94</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'j'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token number">91</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre><h1 id="数组拼接concat-string也有"><a href="#数组拼接concat-string也有" class="headerlink" title="数组拼接concat()- string也有"></a>数组拼接concat()- string也有</h1><p>先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。所以concat()<strong>不影响原数组</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>numbers<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2] [1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>numbers<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2] [1,2,5,4,3,3,4,5,1,2]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> array3 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> newArray <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>concat<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [&amp;#123; a: 1 &amp;#125;, &amp;#123; b: 2 &amp;#125;]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span></code></pre><h1 id="创建子数组方法slice-string也有"><a href="#创建子数组方法slice-string也有" class="headerlink" title="创建子数组方法slice()- string也有"></a>创建子数组方法slice()- string也有</h1><p>slice(start,end)方法需要两个参数start和end，返回这个数组中从start位置到(但不包含)end位置的一个子数组；如果end为undefined或不存在，则返回从start位置到数组结尾的所有项，不影响原数组。</p><ul><li>　　如果start是负数，则start = max(length + start,0)</li><li>　　如果end是负数，则end = max(length + end,0)</li><li>　　start和end无法交换位置</li><li>　　如果没有参数，则返回原数组</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-3+5=2 -> [3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//max(5 + -8,0)=0 -> [1,2,3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-3+5=2 -> [1,2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-2+5=3;-1+5=4; -> [4</span></code></pre><p>slice()方法返回当前数组的一个浅拷贝</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>newNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2] [1,2]</span></code></pre><p>对于参数，实际转换成数字</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3,4,5]</span></code></pre><h1 id="数组删改特定位置内容方法-splice"><a href="#数组删改特定位置内容方法-splice" class="headerlink" title="数组删改特定位置内容方法  splice()"></a>数组删改特定位置内容方法  splice()</h1><p>用于删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，该方法<strong>会改变原数组</strong></p><p>splice()返回一个由删除元素组成的数组，或者如果没有删除元素就返回一个空数组</p><p>splice(start,end)的第一个参数start指定了插入或删除的起始位置。如果start是负数，则start = max(length + start,0)；如果start是NaN，则相当于start = 0</p><p>如果只提供一个元素，相当于将原数组在指定位置拆分成两个数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1,2,3,4] [5,6,7,8]</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-4+8=4; [1,2,3,4] [5,6,7,8]</span></code></pre><p>splice(start,end)中start/end是负数或NaN或undefined，则number=0，因此不删除元素</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [3,4,5,6,7,8] [1,2]</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1,2,3,4,5,6,7,8] []</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1] [2,3,4,5,6,7,8]</span></code></pre><h2 id="删除并添加（中间插入）"><a href="#删除并添加（中间插入）" class="headerlink" title="删除并添加（中间插入）"></a>删除并添加（中间插入）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,'a','b',3,4,5] []</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,[1,2],3,3,4,5] ['a','b']</span></code></pre><h1 id="数组位置方法"><a href="#数组位置方法" class="headerlink" title="数组位置方法"></a>数组位置方法</h1><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h2><p>ndexOf(search,start)，返回search首次出现的位置，如果没有找到则返回-1</p><p>search参数表示要搜索的项；使用严格相等运算符（===）进行比较</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//max(0,-1+7)=6; -1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//max(0,-5+7)=2; 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//max(0,-50+7)=0; 0</span></code></pre><p>对于对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'Nicholas'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'Nicholas'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> morePeople <span class="token operator">=</span> <span class="token punctuation">[</span>person<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1,因为person和people[0]虽然值相同，但是是两个引用</span><span class="token function">alert</span><span class="token punctuation">(</span>morePeople<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0，因为person和morepeople[0]是同一个引用</span><span class="token function">alert</span><span class="token punctuation">(</span>morePeople<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'Nicholas'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1,因为不是同一个引用</span></code></pre><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><p>lastIndexOf()从右向左查找</p><p>lastIndexOf(search,start)方法接收search和start两个参数，返回search第一次出现的位置，如果没有找到则返回-1</p><p>search参数表示要搜索的项；使用严格相等运算符（===）进行比较</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span></code></pre><p>函数会将start非数字值(undefined除外)转换为数。若忽略该参数或该参数为undefined或NaN时，start = 0</p><p>与字符串的lastIndexOf()方法不同，当search方法为负数时，search = max(0,length+search)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//max(0,-1+7)=6; 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//max(0,-50+7)=0; -1</span></code></pre><h1 id="数组归并方法"><a href="#数组归并方法" class="headerlink" title="数组归并方法"></a>数组归并方法</h1><h2 id="reduce-prev-cur-index-array-–求和-求积-求最大值-去重-obj中乘积求和"><a href="#reduce-prev-cur-index-array-–求和-求积-求最大值-去重-obj中乘积求和" class="headerlink" title="reduce(prev, cur, index, array) –求和 求积 求最大值 去重 obj中乘积求和"></a>reduce(prev, cur, index, array) –求和 求积 求最大值 去重 obj中乘积求和</h2><ul><li>初始变量，当前变量，索引，原数组对象</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组求和</span><span class="token keyword">var</span> product <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组求积</span><span class="token keyword">var</span> max <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span><span class="token operator">?</span>x<span class="token punctuation">:</span>y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求最大值</span><span class="token comment" spellcheck="true">//数组去重：</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">const</span> slimArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>prev<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prev  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求对象里的数乘积再求和：</span><span class="token keyword">const</span> fruitArr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> quantity<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> quantity<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> totalPrice <span class="token operator">=</span> fruitArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> prev <span class="token operator">+</span> current<span class="token punctuation">.</span>price <span class="token operator">*</span> current<span class="token punctuation">.</span>quantity<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>    <span class="token keyword">return</span> prev<span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1 2</span><span class="token comment" spellcheck="true">// 3 3</span><span class="token comment" spellcheck="true">// 6 4</span><span class="token comment" spellcheck="true">// 10 5</span><span class="token comment" spellcheck="true">//最后结果：15</span></code></pre><p>二维数组的扁平化</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 二维数组扁平化</span><span class="token keyword">var</span> flatten <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flatten<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5, 6]</span></code></pre><h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h2><p>它按照数组索引从高到低（从右到左）处理数组，而不是从低到高</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5 4</span><span class="token comment" spellcheck="true">//9 3</span><span class="token comment" spellcheck="true">//12 2</span><span class="token comment" spellcheck="true">//14 1</span><span class="token comment" spellcheck="true">//15</span></code></pre><h1 id="数组迭代方法"><a href="#数组迭代方法" class="headerlink" title="数组迭代方法"></a>数组迭代方法</h1><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>对数组的每一项运行给定函数，返回每次函数调用的结果组成的数组。array.map(currentValue, index, arr)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> newarray <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>myFunction<span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> newarray<span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> persons <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>firstname <span class="token punctuation">:</span> <span class="token string">"Malcom"</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">"Reynolds"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>firstname <span class="token punctuation">:</span> <span class="token string">"Kaylee"</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">"Frye"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>firstname <span class="token punctuation">:</span> <span class="token string">"Jayne"</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">"Cobb"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> fullname <span class="token operator">=</span> <span class="token punctuation">[</span>item<span class="token punctuation">.</span>firstname<span class="token punctuation">,</span>item<span class="token punctuation">.</span>lastname<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> fullname<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>getFullName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// The global variable</span><span class="token keyword">var</span> watchList <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"Title"</span><span class="token punctuation">:</span> <span class="token string">"Inception"</span><span class="token punctuation">,</span>    <span class="token string">"Year"</span><span class="token punctuation">:</span> <span class="token string">"2010"</span><span class="token punctuation">,</span>    <span class="token string">"Rated"</span><span class="token punctuation">:</span> <span class="token string">"PG-13"</span><span class="token punctuation">,</span>    <span class="token string">"Released"</span><span class="token punctuation">:</span> <span class="token string">"16 Jul 2010"</span><span class="token punctuation">,</span>    <span class="token string">"imdbRating"</span><span class="token punctuation">:</span> <span class="token string">"8.8"</span><span class="token punctuation">,</span>    <span class="token string">"imdbVotes"</span><span class="token punctuation">:</span> <span class="token string">"1,446,708"</span><span class="token punctuation">,</span>    <span class="token string">"imdbID"</span><span class="token punctuation">:</span> <span class="token string">"tt1375666"</span><span class="token punctuation">,</span>    <span class="token string">"Type"</span><span class="token punctuation">:</span> <span class="token string">"movie"</span><span class="token punctuation">,</span>    <span class="token string">"Response"</span><span class="token punctuation">:</span> <span class="token string">"True"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"Title"</span><span class="token punctuation">:</span> <span class="token string">"Interstellar"</span><span class="token punctuation">,</span>    <span class="token string">"Year"</span><span class="token punctuation">:</span> <span class="token string">"2014"</span><span class="token punctuation">,</span>    <span class="token string">"Rated"</span><span class="token punctuation">:</span> <span class="token string">"PG-13"</span><span class="token punctuation">,</span>    <span class="token string">"Released"</span><span class="token punctuation">:</span> <span class="token string">"07 Nov 2014"</span><span class="token punctuation">,</span>    <span class="token string">"imdbRating"</span><span class="token punctuation">:</span> <span class="token string">"8.6"</span><span class="token punctuation">,</span>    <span class="token string">"imdbVotes"</span><span class="token punctuation">:</span> <span class="token string">"910,366"</span><span class="token punctuation">,</span>    <span class="token string">"imdbID"</span><span class="token punctuation">:</span> <span class="token string">"tt0816692"</span><span class="token punctuation">,</span>    <span class="token string">"Type"</span><span class="token punctuation">:</span> <span class="token string">"movie"</span><span class="token punctuation">,</span>    <span class="token string">"Response"</span><span class="token punctuation">:</span> <span class="token string">"True"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"Title"</span><span class="token punctuation">:</span> <span class="token string">"The Dark Knight"</span><span class="token punctuation">,</span>    <span class="token string">"Year"</span><span class="token punctuation">:</span> <span class="token string">"2008"</span><span class="token punctuation">,</span>    <span class="token string">"Rated"</span><span class="token punctuation">:</span> <span class="token string">"PG-13"</span><span class="token punctuation">,</span>    <span class="token string">"Released"</span><span class="token punctuation">:</span> <span class="token string">"18 Jul 2008"</span><span class="token punctuation">,</span>    <span class="token string">"imdbRating"</span><span class="token punctuation">:</span> <span class="token string">"9.0"</span><span class="token punctuation">,</span>    <span class="token string">"imdbVotes"</span><span class="token punctuation">:</span> <span class="token string">"1,652,832"</span><span class="token punctuation">,</span>    <span class="token string">"imdbID"</span><span class="token punctuation">:</span> <span class="token string">"tt0468569"</span><span class="token punctuation">,</span>    <span class="token string">"Type"</span><span class="token punctuation">:</span> <span class="token string">"movie"</span><span class="token punctuation">,</span>    <span class="token string">"Response"</span><span class="token punctuation">:</span> <span class="token string">"True"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Only change code below this line</span><span class="token comment" spellcheck="true">//筛选元素</span><span class="token keyword">var</span> ratings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ratings<span class="token operator">=</span>watchList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item  <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  title<span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"Title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  rating<span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"imdbRating"</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Only change code above this line</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ratings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> filteredList <span class="token operator">=</span> watchList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>movie <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      title<span class="token punctuation">:</span> movie<span class="token punctuation">.</span>Title<span class="token punctuation">,</span>      rating<span class="token punctuation">:</span> movie<span class="token punctuation">.</span>imdbRating    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>movie <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// return true it will keep the item</span>    <span class="token comment" spellcheck="true">// return false it will reject the item</span>    <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>movie<span class="token punctuation">.</span>rating<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">8.0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><p>本质上与for循环迭代数组一样。如果需要有返回值，一般使用map方法</p><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>elem <span class="token operator">*</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, 4, 9]</span></code></pre><h2 id="forEach（）和map（）区别"><a href="#forEach（）和map（）区别" class="headerlink" title="forEach（）和map（）区别"></a>forEach（）和map（）区别</h2><ul><li>forEach：用来遍历数组中的每一项，这个方法执行没有返回值，不影响原数组</li><li>map：支持return，相当与原数组克隆了一份，把克隆的每项改变了，也不影响原数组</li></ul><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>对数组中的每一项运行给定函数，该函数会返回true的项组成的数组。该方法常用于查询符合条件的所有数组项 </p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>elem <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [4, 5]    </span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, "a"]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, 3, 5]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getRating</span><span class="token punctuation">(</span>watchList<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Only change code below this line</span>  <span class="token keyword">var</span> averageRating<span class="token operator">=</span>watchList    <span class="token comment" spellcheck="true">// Use filter to find films directed by Christopher Nolan</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>film <span class="token operator">=</span><span class="token operator">></span> film<span class="token punctuation">.</span>Director <span class="token operator">===</span> <span class="token string">"Christopher Nolan"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Use map to convert their ratings from strings to numbers</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>film <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Number</span><span class="token punctuation">(</span>film<span class="token punctuation">.</span>imdbRating<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Use reduce to add together their ratings</span>    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sumOfRatings<span class="token punctuation">,</span> rating<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> sumOfRatings <span class="token operator">+</span> rating<span class="token punctuation">)</span> <span class="token operator">/</span>  <span class="token comment" spellcheck="true">// Divide by the number of Nolan films to get the average rating</span>  watchList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>film <span class="token operator">=</span><span class="token operator">></span> film<span class="token punctuation">.</span>Director <span class="token operator">===</span> <span class="token string">"Christopher Nolan"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">return</span> averageRating<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h2><p>对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。并且当且仅当数值中的所有元素调用判定函数都返回false，它才返回false</p><pre class=" language-js"><code class="language-js">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> elem<span class="token operator">%</span><span class="token number">2</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isNaN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token keyword">const</span> isCheap <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>price <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token keyword">const</span> isExpensive <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>price <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><p>对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true；只要有一项返回false，则返回false</p><pre class=" language-js"><code class="language-js">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>elem <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> elem<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><h2 id="遍历array-for…-in…-amp-for-…-of-…"><a href="#遍历array-for…-in…-amp-for-…-of-…" class="headerlink" title="遍历array for… in… &amp; for … of …."></a>遍历array for… in… &amp; for … of ….</h2><p>for….in 是es5标准， 此方法遍历数组效率低，主要是用来循环遍历对象的属性</p><p>1)、 for……in  遍历数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/25/js-array/1606722436063.png"></p><p>2)、for…..in 遍历对象</p><p>循环遍历对象的属性，js中动态获取key，得到某对象中相对应的value = obj[key]</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span><span class="token number">3</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">'---'</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p> for…….of   方法    （es6支持）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="实例总结"><a href="#实例总结" class="headerlink" title="实例总结"></a>实例总结</h1><h1 id="单个array"><a href="#单个array" class="headerlink" title="单个array"></a>单个array</h1><blockquote><p>可以改变原数组的方法总共有7种：包括unshift()、shift()、push()、pop()这4种栈和队列方法，reverse()和sort()这2种数组排列方法，数组删改方法splice()</p></blockquote><h2 id="判断数组中是否存在某个元素"><a href="#判断数组中是否存在某个元素" class="headerlink" title="判断数组中是否存在某个元素"></a>判断数组中是否存在某个元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> includeNum4 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">const</span> includeNum7 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> includeNum4 <span class="token operator">=</span> <span class="token boolean">true</span>  includeNum7 <span class="token operator">=</span> <span class="token boolean">false</span>  </code></pre><h2 id="单个array除掉重复的元素"><a href="#单个array除掉重复的元素" class="headerlink" title="单个array除掉重复的元素"></a>单个array除掉重复的元素</h2><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>norepeat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'ab'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">norepeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//['a','ab']</span></code></pre><h2 id="创造本地copy-arry"><a href="#创造本地copy-arry" class="headerlink" title="创造本地copy-arry"></a>创造本地copy-arry</h2><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> a <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 创造本身的copy</span></code></pre><h2 id="特定位置后面增加一个元素"><a href="#特定位置后面增加一个元素" class="headerlink" title="特定位置后面增加一个元素"></a>特定位置后面增加一个元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'kevin'</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">,</span> 'rose’<span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span>’Lily’<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//请注意 参数是 (index+1)</span><span class="token comment" spellcheck="true">//当下arr的结果是 ['kevin’, ‘Lily' , 'jack', 'rose']</span></code></pre><h2 id="删除特定位置的元素"><a href="#删除特定位置的元素" class="headerlink" title="删除特定位置的元素"></a>删除特定位置的元素</h2><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//请注意 参数是 index</span></code></pre><h2 id="替换特定位置的元素"><a href="#替换特定位置的元素" class="headerlink" title="替换特定位置的元素"></a>替换特定位置的元素</h2><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'John'</span><span class="token punctuation">)</span></code></pre><h2 id="array中删除删掉偶数，只保留奇数"><a href="#array中删除删掉偶数，只保留奇数" class="headerlink" title="array中删除删掉偶数，只保留奇数"></a>array中删除删掉偶数，只保留奇数</h2><pre class=" language-js"><code class="language-js">　<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 　　　　　　　<span class="token keyword">var</span> r <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> 　　　　　　　<span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span> 　　　　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 　　　　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 5, 9, 15]</span></code></pre><h2 id="array中删除删掉-null-0-NaN-undefined-“”"><a href="#array中删除删掉-null-0-NaN-undefined-“”" class="headerlink" title="array中删除删掉 null, 0, NaN, undefined, “”"></a>array中删除删掉 null, 0, NaN, undefined, “”</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]</span></code></pre><h2 id="找到Array中第一个满足条件的元素"><a href="#找到Array中第一个满足条件的元素" class="headerlink" title="找到Array中第一个满足条件的元素"></a>找到Array中第一个满足条件的元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">const</span> bigNum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> bigNum <span class="token operator">=</span> <span class="token number">22</span></code></pre><h2 id="array中满足某一条件的index位置"><a href="#array中满足某一条件的index位置" class="headerlink" title="array中满足某一条件的index位置"></a>array中满足某一条件的index位置</h2><pre class=" language-js"><code class="language-js"><span class="token function">dropElements</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">dropElements</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找出满足条件的index</span> <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">:</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="单个array中含有多层array，flatten-array"><a href="#单个array中含有多层array，flatten-array" class="headerlink" title="单个array中含有多层array，flatten array"></a>单个array中含有多层array，flatten array</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">steamrollArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> flat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> flat<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">steamrollArray</span><span class="token punctuation">(</span>flat<span class="token punctuation">)</span> <span class="token punctuation">:</span> flat<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">steamrollArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="两个array"><a href="#两个array" class="headerlink" title="两个array"></a>两个array</h1><h2 id="两个数组中的不同元素"><a href="#两个数组中的不同元素" class="headerlink" title="两个数组中的不同元素"></a>两个数组中的不同元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getArrDifference</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">===</span> arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">diff</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> arr3<span class="token operator">=</span>arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将arr1和arr2合并为arr3</span>      <span class="token keyword">function</span> <span class="token function">isContain</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//找出arr3中不存在于arr1和arr2中的元素</span>      <span class="token keyword">return</span> arr1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>arr2<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span>；   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      newArr <span class="token operator">=</span> arr3<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isContain<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">diffArray</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">diff</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">diff</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">diff</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//return index true/false</span></code></pre><h2 id="取出两个数组的相同元素"><a href="#取出两个数组的相同元素" class="headerlink" title="取出两个数组的相同元素"></a>取出两个数组的相同元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getArrEqual</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getArrEqual</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="array中找出-array1没有的"><a href="#array中找出-array1没有的" class="headerlink" title="array中找出 array1没有的"></a>array中找出 array1没有的</h2><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">!</span>arr1<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="两个array的遍历（多层array）"><a href="#两个array的遍历（多层array）" class="headerlink" title="两个array的遍历（多层array）"></a>两个array的遍历（多层array）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">whatIsInAName</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> source<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Only change code below this line </span>  <span class="token keyword">var</span> sourceKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> person <span class="token keyword">in</span> collection<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> haveAll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> sourceKeys<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>collection<span class="token punctuation">[</span>person<span class="token punctuation">]</span><span class="token punctuation">[</span>sourceKeys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> source<span class="token punctuation">[</span>sourceKeys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        haveAll <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>haveAll<span class="token punctuation">)</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>collection<span class="token punctuation">[</span>person<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Only change code above this line</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">whatIsInAName</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> first<span class="token punctuation">:</span> <span class="token string">"Romeo"</span><span class="token punctuation">,</span> last<span class="token punctuation">:</span> <span class="token string">"Montague"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> first<span class="token punctuation">:</span> <span class="token string">"Mercutio"</span><span class="token punctuation">,</span> last<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> first<span class="token punctuation">:</span> <span class="token string">"Tybalt"</span><span class="token punctuation">,</span> last<span class="token punctuation">:</span> <span class="token string">"Capulet"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> last<span class="token punctuation">:</span> <span class="token string">"Capulet"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="计算两个数组的交集、差集、并集、补集-（用filter-concat）"><a href="#计算两个数组的交集、差集、并集、补集-（用filter-concat）" class="headerlink" title="计算两个数组的交集、差集、并集、补集 （用filter concat）"></a>计算两个数组的交集、差集、并集、补集 （用filter concat）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//交集</span><span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//差集</span><span class="token keyword">var</span> d <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//补集</span><span class="token keyword">var</span> e <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//并集</span><span class="token keyword">var</span> f <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">////jquery</span><span class="token comment" spellcheck="true">// 交集</span><span class="token keyword">let</span> intersect <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 差集</span><span class="token keyword">let</span> minus <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 补集</span><span class="token keyword">let</span> complement  <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 并集</span><span class="token keyword">let</span> unionSet <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数组a："</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数组b："</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的交集："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的差集："</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的补集："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的并集："</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的交集："</span><span class="token punctuation">,</span> intersect<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的差集："</span><span class="token punctuation">,</span> minus<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的补集："</span><span class="token punctuation">,</span> complement<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的并集："</span><span class="token punctuation">,</span> unionSet<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="数组功能扩展"><a href="#数组功能扩展" class="headerlink" title="数组功能扩展"></a>数组功能扩展</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//数组功能扩展</span><span class="token comment" spellcheck="true">//数组迭代函数</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>each <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  fn <span class="token operator">=</span> fn <span class="token operator">||</span> Function<span class="token punctuation">.</span>K<span class="token punctuation">;</span>   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> res <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组是否包含指定元素</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>contains <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>suArr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> suArr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不重复元素构成的数组</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uniquelize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> ra <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ra<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          ra<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> ra<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个数组的交集</span>Array<span class="token punctuation">.</span>intersect <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">uniquelize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">?</span> o <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个数组的差集</span>Array<span class="token punctuation">.</span>minus <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">uniquelize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> o<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个数组的补集</span>Array<span class="token punctuation">.</span>complement <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span>Array<span class="token punctuation">.</span><span class="token function">intersect</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个数组并集</span>Array<span class="token punctuation">.</span>union <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uniquelize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数组a："</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数组b："</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的交集："</span><span class="token punctuation">,</span> Array<span class="token punctuation">.</span><span class="token function">intersect</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的差集："</span><span class="token punctuation">,</span> Array<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的补集："</span><span class="token punctuation">,</span> Array<span class="token punctuation">.</span><span class="token function">complement</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的并集："</span><span class="token punctuation">,</span> Array<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js regular expression</title>
      <link href="2020/11/24/js-regular-expression/"/>
      <url>2020/11/24/js-regular-expression/</url>
      
        <content type="html"><![CDATA[<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><ul><li>g: 表示全局(global)模式，即模式将被应用于所有字符串，而并非在发现第一个匹配项时立即停止</li><li>i: 表示不区分大小写(case-insensitive)模式，即在确定匹配项时忽略模式与字符串的大小写</li><li>m: 表示多行(multi-line)模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项</li><li>s: dotAll / singleline模式：. 可以匹配换行符</li><li>u: unicode，unicode模式：匹配unicode字符集</li></ul><pre><code> console.log(/^.$/.test(&quot;\uD842\uDFB7&quot;)); console.log(/^.$/u.test(&quot;\uD842\uDFB7&quot;));复制代码</code></pre><ul><li><p>y: sticky，粘性模式：匹配正则中lastIndex属性指定位置的字符，并且如果没有匹配也不尝试从任何后续的索引中进行匹配</p><h2 id><a href="#" class="headerlink" title></a></h2></li></ul><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p><code>. </code>转义符</p><ul><li>匹配行结束符（\n \r \u2028 或 \u2029）以外的任意单个字符</li><li>在 <code>字符集合（Character Sets）</code> 中，. 将失去其特殊含义，表示的是原始值</li></ul><p><code>\ </code>转义符，它有两层含义 </p><ul><li>表示下一个具有特殊含义的字符为字面值 </li><li>表示下一个字符具有特殊含义（转义后的结果是元字符内约定的）</li></ul><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配除换行符外的任意一个字符</td></tr><tr><td><code>\d</code></td><td>匹配任意一个数字（0-9）</td></tr><tr><td><code>\w</code></td><td>匹配任意一个字母、数字或下划线</td></tr><tr><td><code>\s</code></td><td>匹配任意一个空白符</td></tr></tbody></table><blockquote><p> <strong><code>\d</code> <code>\w</code> <code>\s</code> 如果把小写变为大写，就是取相反的意思，比如 <code>\D</code> 表示任意一个非数字字符。</strong></p></blockquote><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\s</code></td><td>匹配任意一个空白符</td></tr><tr><td><code>\t</code></td><td>匹配一个制表符</td></tr><tr><td><code>\n</code></td><td>匹配一个换行符</td></tr><tr><td><code>\f</code></td><td>匹配一个换页符</td></tr><tr><td><code>\v</code></td><td>匹配一个垂直制表符</td></tr><tr><td><code>\r</code></td><td>匹配一个回车符</td></tr></tbody></table><h2 id="字符集合"><a href="#字符集合" class="headerlink" title="字符集合"></a>字符集合</h2><p><code>[xyz]</code>  一个字符集合。匹配方括号中的任意字符，包括<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types">转义序列</a>。你可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。<br>例如，<code>[abcd]</code> 和 <code>[a-d]</code>是一样的。他们都匹配”brisket”中的‘b’,也都匹配“city”中的‘c’。<code>/[a-z.]+/</code> 和<code>/[\w.]+/</code>与字符串“test.i.ng”匹配。</p><h2 id="范围的元字符"><a href="#范围的元字符" class="headerlink" title="范围的元字符"></a>范围的元字符</h2><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>`</td><td>`</td></tr><tr><td><code>[...]</code></td><td>多选一，匹配括号中任意一个元素</td></tr><tr><td><code>[a-z]</code></td><td>匹配 a 到 z 之间任意一个元素（按照 ASCII 表，包含 a,z）</td></tr><tr><td><code>[^...]</code></td><td>取反，匹配不能是括号中的任意一个元素</td></tr></tbody></table><h2 id="量词元字符"><a href="#量词元字符" class="headerlink" title="量词元字符"></a>量词元字符</h2><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>出现 0 到多次</td></tr><tr><td><code>+</code></td><td>出现 1 到多次</td></tr><tr><td><code>？</code></td><td>出现 0 或 1 次，如 colou?r</td></tr><tr><td><code>&#123;m&#125;</code></td><td>出现 m 次</td></tr><tr><td><code>&#123;m&#125;</code></td><td>至少出现 m 次</td></tr><tr><td><code>&#123;m,n&#125;</code></td><td>出现 m 到 n 次</td></tr></tbody></table><blockquote><p>注意：</p><ol><li>量词的使用要注意其作用范围，其一般只作用于前面的那个字符，如正则 <code>a+</code> 表示匹配字符 <code>a</code> 1 次或多次。如果量词跟在分组 <code>()</code> 后，那么量词的作用范围就是前面 <code>()</code> 内的内容。</li><li>量词默认是贪婪的，即极可能多的去匹配字符。如果要实现把量词变为非贪婪的，那么要在量词后加个 <code>?</code>，这样量词就变为非贪婪了。</li></ol></blockquote><h2 id="断言-定位单词边界、行的开始结束以及环视"><a href="#断言-定位单词边界、行的开始结束以及环视" class="headerlink" title="断言(定位单词边界、行的开始结束以及环视)"></a>断言(定位单词边界、行的开始结束以及环视)</h2><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\b</code></td><td>匹配单词的边界</td></tr><tr><td><code>^</code></td><td>匹配行的开始，多行模式时，可以匹配任意行开头</td></tr><tr><td><code>$</code></td><td>匹配行的结束，多行模式时，可以匹配任意行结尾</td></tr><tr><td><code>\A</code></td><td>只匹配整个字符串的开始，不支持多行模式</td></tr><tr><td><code>\Z</code></td><td>只匹配整个字符串的结束，不支持多行模式</td></tr><tr><td><code>(?&lt;=Y)X</code></td><td>匹配前面是 Y 的 X</td></tr><tr><td><code>(?&lt;!Y)X</code></td><td>匹配前面不是 Y 的 X</td></tr><tr><td><code>(?=Y)X</code></td><td>匹配后面是 Y 的 X</td></tr><tr><td><code>(?!Y)X</code></td><td>匹配后面不是 Y 的 X</td></tr></tbody></table><blockquote><p>注意：</p><ol><li>反向引用里面“断言是没有带过去的”，复用的部分只是匹配到的文本内容，这段很重要，也是自己也开始没有意识到的。</li><li>断言只是匹配位置，准确地说就是只负责定位，不会匹配任何字符！这点很重要。</li><li>环视中 <code>\W</code> 不等于 <code>!\w</code>，</li></ol></blockquote><p><strong>Reference</strong></p><p>1.<a href="https://blog.csdn.net/lxcnn/category_538256.html">https://blog.csdn.net/lxcnn/category_538256.html</a></p><p>2.<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></p><p>3.<a href="https://www.cnblogs.com/xiaohuochai/p/5612230.html">https://www.cnblogs.com/xiaohuochai/p/5612230.html</a></p><p><strong>Tool</strong></p><p><a href="https://regex101.com/">https://regex101.com/</a></p><p><a href="https://juejin.cn/post/6844904182835757064">https://juejin.cn/post/6844904182835757064</a></p><p><a href="https://regexper.com/">https://regexper.com/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js string</title>
      <link href="2020/11/24/js-string/"/>
      <url>2020/11/24/js-string/</url>
      
        <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p><img src="/2020/11/24/js-string/1606214735012.png"></p><h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><p>字符串String是由双引号(“)或单引号(‘)声明的</p><h2 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线"></a>反斜线</h2><pre class=" language-js"><code class="language-js"><span class="token string">'Wouldn\'t you prefer this book?'</span>    <span class="token comment" spellcheck="true">//"Wouldn't you prefer this book?"</span><span class="token string">'Did she say \'Hello\'?'</span>             <span class="token comment" spellcheck="true">//"Did she say 'Hello'?"</span><span class="token string">"Did she say \"Hello\"?"</span>             <span class="token comment" spellcheck="true">//"Did she say "Hello"?"</span><span class="token string">"Prev \\ Next"</span>                         <span class="token comment" spellcheck="true">// "Prev \ Next"</span><span class="token string">'\a'</span>                                 <span class="token comment" spellcheck="true">// "a"</span></code></pre><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><pre class=" language-js"><code class="language-js">\<span class="token number">0</span> 空字节\n 换行\t 制表\b 空格\r 回车\f 进纸\\ 斜杠\' 单引号\" 双引号\xnn <span class="token function">以十六进制nn表示一个字符</span><span class="token punctuation">(</span>n为<span class="token number">0</span><span class="token operator">-</span>f<span class="token punctuation">)</span>，如\x41表示<span class="token string">'A'</span>\unnnn <span class="token function">以十六进制nnnn表示一个Unicode字符</span><span class="token punctuation">(</span>n为<span class="token number">0</span><span class="token operator">-</span>f<span class="token punctuation">)</span>，如\u03a3表示希腊字符ε</code></pre><p>快速转为string 用+</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> lang <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span>lang <span class="token operator">=</span> lang <span class="token operator">+</span> <span class="token string">"script"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//'javascript'</span></code></pre><h2 id="string内容操作函数-toString-、toLocaleString-、valueOf"><a href="#string内容操作函数-toString-、toLocaleString-、valueOf" class="headerlink" title="string内容操作函数 toString()、toLocaleString()、valueOf()"></a>string内容操作函数 toString()、toLocaleString()、valueOf()</h2><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"test"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"test"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"test"</span></code></pre><p>由于alert()要接收字符串参数，它会在后台调用toString()方法，会得到与toString()方法相同的结果</p><pre class=" language-js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'1,2,3'</span></code></pre><h2 id="chartAt-、中括号-、charCodeAt-和fromCharCode"><a href="#chartAt-、中括号-、charCodeAt-和fromCharCode" class="headerlink" title="chartAt()、中括号[]、charCodeAt()和fromCharCode()"></a>chartAt()、中括号[]、charCodeAt()和fromCharCode()</h2><p>chartAt()</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//e</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//''</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//h </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//h</span><span class="token comment" spellcheck="true">//argument会被转为数字</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'e'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'h'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'h'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'h'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'l'</span></code></pre><p>其他方式的取char</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'e'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'e'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'e'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'e'</span></code></pre><p>中括号[]</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//h</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//e</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span></code></pre><p>charCodeAt() 返回的是指定位置的字符16位Unicode编码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//104</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//104</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//101</span></code></pre><p>fromCharCode()接收一个或多个字符编码，然后把它们转换成一个字符串</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">0x6211</span><span class="token punctuation">,</span><span class="token number">0x662f</span><span class="token punctuation">,</span><span class="token number">0x5c0f</span><span class="token punctuation">,</span><span class="token number">0x706b</span><span class="token punctuation">,</span><span class="token number">0x67f4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'我是小火柴'</span></code></pre><h2 id="字符串拼接-concat-和加号"><a href="#字符串拼接-concat-和加号" class="headerlink" title="字符串拼接   concat()和加号+"></a>字符串拼接   concat()和加号+</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> stringValue <span class="token operator">=</span> <span class="token string">'hello '</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> stringValue<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world!'</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'false'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错，第一个参数必须字符串</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>valueOf<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>o <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'12'</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>valueOf<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>o <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span></code></pre><blockquote><p>[注意]由于数组也存在concat()方法，参数会按照首先出现的参数是数组还是字符串来决定如何转换</p><p>‘1,2,3,’.concat([4,5]);    //    ‘1,2,3,4,5’<br>        [1,2,3].concat(‘,4,5’);    //    [1, 2, 3, “,4,5”]</p></blockquote><h2 id="string变array-split"><a href="#string变array-split" class="headerlink" title="string变array - split()"></a>string变array - split()</h2><pre class=" language-js"><code class="language-js">stringObject<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>separator<span class="token punctuation">,</span>howmany<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//字符串或正则表达式，从该参数指定的地方分割 stringObject。</span><span class="token comment" spellcheck="true">//howmany (可选)该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</span></code></pre><pre class=" language-js"><code class="language-js">str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\W/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去掉所有的非字母</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//按照空格</span></code></pre><h2 id="创建子字符串-slice-、substr-（弃用）和substring"><a href="#创建子字符串-slice-、substr-（弃用）和substring" class="headerlink" title="创建子字符串 slice()、substr()（弃用）和substring()"></a>创建子字符串 slice()、substr()（弃用）和substring()</h2><p>slice() 返回这个字符串中从start位置的字符到(但不包含)end位置的字符的一个子字符串；如果end为undefined或不存在，则返回从start位置到字符串结尾的所有字符。 <strong>start 和 end 不能调换</strong></p><p>　　<strong>如果start是负数</strong>，则start = max(length + start,0)</p><p>　　<strong>如果end是负数</strong>，则end = max(length + end,0)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> stringValue <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'he'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello wor'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'ld'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo '</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//''</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//''</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//''</span></code></pre><p>特殊argument</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> stringValue <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//''</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'el'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo'</span></code></pre><p>substring(start,end) 返回这个字符串中从start位置的字符到(但不包含)end位置的字符的一个子字符串；如果end为undefined或不存在，则返回从start位置到字符串结尾的所有字符</p><p><strong>如果任一参数是NaN或负数</strong>，则被0取代</p><p><strong>如果任一参数大于字符串长度</strong>，则被字符串长度取代</p><p><strong>如果start 大于 end</strong>，则交换它们的值 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> stringValue <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//''</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'he'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'he'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span></code></pre><p>特殊的值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> stringValue <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'el'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo'</span></code></pre><h2 id="大小写转换-toLowerCase-、toLocaleLowerCase-针对地区-、toUpperCase-、toLocaleUpperCase-针对地区"><a href="#大小写转换-toLowerCase-、toLocaleLowerCase-针对地区-、toUpperCase-、toLocaleUpperCase-针对地区" class="headerlink" title="大小写转换 toLowerCase()、toLocaleLowerCase()(针对地区)、toUpperCase()、toLocaleUpperCase()(针对地区)"></a>大小写转换 toLowerCase()、toLocaleLowerCase()(针对地区)、toUpperCase()、toLocaleUpperCase()(针对地区)</h2><h2 id="查找子串位置-indexOf-和lastIndexOf"><a href="#查找子串位置-indexOf-和lastIndexOf" class="headerlink" title="查找子串位置  indexOf()和lastIndexOf()"></a>查找子串位置  indexOf()和lastIndexOf()</h2><p>indexOf(searchString,start) 返回searchString首次出现的位置，如果没有找到则返回-1</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'hello world world'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//15</span></code></pre><p>与indexOf()不同，lastIndexOf()从右向左查找</p><p>lastIndexOf(searchString,start) 返回searchString第一次出现的位置，如果没有找到则返回-1。 searchString表示要搜索的子字符串；start表示该搜索的开始位置，若忽略该参数或该参数为undefined、NaN时，start = length - 1；若start为负数，start = 0。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'hello world world'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//15</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//15</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//15</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//12 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9 </span></code></pre><p><strong>lastIndexOf()方法常用于获取URL地址中的扩展名</strong> </p><h2 id="正则匹配方法"><a href="#正则匹配方法" class="headerlink" title="正则匹配方法"></a>正则匹配方法</h2><p>match()</p><p>　　若匹配失败，则match()方法返回null</p><pre class=" language-js"><code class="language-js"><span class="token string">'x'</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/y/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'cat,bat,sat,fat'</span><span class="token punctuation">;</span><span class="token keyword">var</span> matches <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'at'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">,</span>matches<span class="token punctuation">.</span>index<span class="token punctuation">,</span>matches<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//['at'] 1 'cat,bat,sat,fat'</span><span class="token comment" spellcheck="true">//正则</span><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">'j1h342jg24g234j 3g24j1'</span><span class="token punctuation">;</span>array <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["1", "342", "24", "234", "3", "24", "1"]</span></code></pre><p>　search()方法接受一个正则或字符串的参数，返回匹配的内容在字符串中首次出现的位置，类似于不能设置起始位置的indexOf，找不到返回-1 (全局标志g影响)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'cat,bat,sat,fat'</span><span class="token punctuation">;</span><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex">/.at/</span><span class="token punctuation">;</span><span class="token keyword">var</span> pos <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'cat,bat,sat,fat'</span><span class="token punctuation">;</span><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex">/.at/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> pos <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'cat,bat,sat,fat'</span><span class="token punctuation">;</span><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token string">'at'</span><span class="token punctuation">;</span><span class="token keyword">var</span> pos <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span></code></pre><p>　replace()方法用于替换一个或多个子字符串。它接收两个参数：第一个是正则表达式或字符串，表示待查找的内容；第二个是字符串或函数，表示替换内容。返回替换后的字符串 (全局标志g影响)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'cat,bat,sat,fat'</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'at'</span><span class="token punctuation">,</span><span class="token string">'ond'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// var result = string.replace(/at/,'ond');</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'cond,bat,sat,fat'</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'cat,bat,sat,fat'</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/at/g</span><span class="token punctuation">,</span><span class="token string">'ond'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'cond,bond,sond,fond'</span></code></pre><p>plit()方法基于指定的分隔符将一个字符串分割成多个字符串，并将结果放在一个数组中，分隔符可以是字符串，也可以是一个RegExp</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colorText <span class="token operator">=</span> <span class="token string">'red,blue,green,yellow'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["r", "e", "d", ",", "b", "l", "u", "e", ",", "g", "r", "e", "e", "n", ",", "y", "e", "l", "l", "o", "w"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["red", "blue", "green", "yellow"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["red", "blue"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["red", "blue", "green", "yellow"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["red,blue,green,yellow"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\,/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["red", "blue", "green", "yellow"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/e/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["r", "d,blu", ",gr", "", "n,y", "llow"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/[^\,]+/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将除去逗号以外的字符串变为分隔符["", ",", ",", ",", ""],IE8-会识别为[",",",",","]</span></code></pre><h2 id="去除首尾空格"><a href="#去除首尾空格" class="headerlink" title="去除首尾空格"></a>去除首尾空格</h2><p>trim()返回的是字符串的副本，所以原始字符串中的前置及后缀空格会保持不变，包括制表符(\t)、换行符(\n)和回车符(\r)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'    hello world   '</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span><span class="token string">'\r\nabc \t'</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'abc'</span></code></pre><h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><p>localeCompare()方法用于比较两个字符串</p><ul><li> 如果字符串在字母表中应该排在字符串参数之前，则返回一个负数(大多数情况下为-1)</li><li> 如果字符串等于字符串参数，则返回0</li><li> 如果字符串在字母表中应该排在字符串参数之后，则返回一个正数(大多数情况下为1)</li></ul><h2 id="结合array-join（）"><a href="#结合array-join（）" class="headerlink" title="结合array - join（）"></a>结合array - join（）</h2><p>如果不给join()方法传入任何值，则使用逗号作为分隔符</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'1,2,3'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'1 2 3'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'123'</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'---------'，9个连字符组成的字符串</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'1,,2,,3'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "h-e-l-l-o"</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'a-b'</span></code></pre><blockquote><p>若对象没有length属性，就不是类数组，也就不能调用数组的方法</p></blockquote><h2 id="栈-amp-LIFO-Last-In-First-Out"><a href="#栈-amp-LIFO-Last-In-First-Out" class="headerlink" title="栈&amp;LIFO - Last-In-First-Out"></a>栈&amp;LIFO - Last-In-First-Out</h2><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><p>接收任意数量的参数， 添加到数组末尾，并 修改后数组的长度。所以，该数组会改变原数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1] 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,'a'] 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,'a',true,&amp;#123;&amp;#125;] 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,'a',true,&amp;#123;&amp;#125;,[5,6]] 5</span></code></pre><p>　　如果需要合并两个数组，可以使用apply方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5,6] 6</span></code></pre><p>push()方法也可以向对象中添加元素，添加后的对象变成类数组对象，即新加入元素的键对应数组的索引，并且对象有一个length属性</p><p>push()方法也可以向对象中添加元素，添加后的对象变成类数组对象，即新加入元素的键对应数组的索引，并且对象有一个length属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// &amp;#123;a:1, 0:2, length: 1&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// &amp;#123;a:1, 0:2, 1:[3], length: 2&amp;#125;</span></code></pre><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p>　　pop()方法从数组末尾移除最后一项，减少数组的length值，然后返回移除的项。所以，该数组会改变原数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 'b'] 'c'</span></code></pre><p>　 </p><h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><p>　　shift()方法移除数组中的第一个项并返回该项，同时数组的长度减1。所以，该数组会改变原数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//['b', 'c'] 'a'</span></code></pre><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><p>　　unshift()方法在数组前端添加任意个项并返回新数组长度。所以，该数组会改变原数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['x', 'a', 'b', 'c'] 4</span></code></pre><p>　　当使用多个参数调用unshift()时，参数是一次性插入的而非一次一个地插入。这意味着最终的数组中插入的元素的顺序和它们在参数列表中的顺序一致</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['x','y','z','a', 'b', 'c'] 6</span></code></pre><h1 id="操作方程"><a href="#操作方程" class="headerlink" title="操作方程"></a>操作方程</h1><h2 id="js-替换指定位置的字符串"><a href="#js-替换指定位置的字符串" class="headerlink" title="js 替换指定位置的字符串"></a>js 替换指定位置的字符串</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//str:原始字符串，index,开始位置,changeStr，改变后的字</span><span class="token function">changeStr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>index<span class="token punctuation">,</span>changeStr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">+</span> changeStr<span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>index <span class="token operator">+</span> changeStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>js去掉所有的空格（连续空格）提内容</p><pre class=" language-js"><code class="language-js">array<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\s+/</span><span class="token punctuation">)</span></code></pre><h2 id="js-正则将大小写之间分开"><a href="#js-正则将大小写之间分开" class="headerlink" title="js 正则将大小写之间分开"></a>js 正则将大小写之间分开</h2><pre class=" language-js"><code class="language-js">str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/([a-z])([A-Z])/g</span><span class="token punctuation">,</span> <span class="token string">"$1 $2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//TheAndyGriffith_Show</span><span class="token comment" spellcheck="true">//The Andy Griffith_Show</span><span class="token comment" spellcheck="true">//is followed by an uppercase letter [(?=[A-Z])]</span><span class="token comment" spellcheck="true">//whitespace character [\s]</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\s|_|(?=[A-Z])/</span><span class="token punctuation">)</span></code></pre><h2 id="应用正则"><a href="#应用正则" class="headerlink" title="应用正则"></a>应用正则</h2><h3 id="替换指定符号"><a href="#替换指定符号" class="headerlink" title="替换指定符号"></a>替换指定符号</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">convertHTML</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Use Object Lookup to declare as many HTML entities as needed.</span>  <span class="token keyword">const</span> htmlEntities <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"&amp;"</span><span class="token punctuation">:</span> <span class="token string">"&amp;amp;"</span><span class="token punctuation">,</span>    <span class="token string">"&lt;"</span><span class="token punctuation">:</span> <span class="token string">"&amp;lt;"</span><span class="token punctuation">,</span>    <span class="token string">">"</span><span class="token punctuation">:</span> <span class="token string">"&amp;gt;"</span><span class="token punctuation">,</span>    <span class="token string">'"'</span><span class="token punctuation">:</span> <span class="token string">"&amp;quot;"</span><span class="token punctuation">,</span>    <span class="token string">"'"</span><span class="token punctuation">:</span> <span class="token string">"&amp;apos;"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Using a regex, replace characters with it's corresponding html entity</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/([&amp;&lt;>\"'])/g</span><span class="token punctuation">,</span> match <span class="token operator">=</span><span class="token operator">></span> htmlEntities<span class="token punctuation">[</span>match<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Binary-to-string-变化"><a href="#Binary-to-string-变化" class="headerlink" title="Binary to string 变化"></a>Binary to string 变化</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">binaryAgent</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\s/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">binaryAgent</span><span class="token punctuation">(</span><span class="token string">"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="字符串中的数字"><a href="#字符串中的数字" class="headerlink" title="字符串中的数字"></a>字符串中的数字</h2><pre class=" language-js"><code class="language-js"><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会提取字符串中的整数部分，遇到非整数会立即停止提取；适合去掉css中的单位</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 同上，可以提取小数</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js  data types</title>
      <link href="2020/11/24/js-data-types/"/>
      <url>2020/11/24/js-data-types/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h1><p>包含值的数据类型：</p><ul><li>字符串（string）</li><li>数字（number）</li><li>布尔（boolean）</li><li>对象（object）</li><li>函数（function）</li></ul><p>有三种对象类型：</p><ul><li>对象（Object）</li><li>日期（Date）</li><li>数组（Array）</li></ul><p>同时有两种不能包含值的数据类型：</p><ul><li><p>null</p></li><li><p>undefined</p></li></ul><h2 id="原始值-primitive-values"><a href="#原始值-primitive-values" class="headerlink" title="原始值( primitive values )"></a>原始值( primitive values )</h2><p>除 Object 以外的所有类型都是不可变的（值本身无法被改变。类似于：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p><p>原始值明显的特征是不可更改，任何方法都无法更改一个原始值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> s<span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello'</span></code></pre><h2 id="复杂值（引用数据类型）"><a href="#复杂值（引用数据类型）" class="headerlink" title="复杂值（引用数据类型）"></a>复杂值（<strong>引用数据类型</strong>）</h2><p>复杂值可以由很多不同类型的javascript对象组成。复杂对象其在内存中的大小是未知的，因为复杂对象可以包含任何值，而不是一个特定的已知值。比如：对象(Object)、数组(Array)、函数(Function)。</p><p>对象和原始值不同，它们是可变的，它们的值是可修改的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><h2 id="储存方式"><a href="#储存方式" class="headerlink" title="储存方式"></a>储存方式</h2><h3 id="栈存储"><a href="#栈存储" class="headerlink" title="栈存储"></a>栈存储</h3><p>　　因为原始值占据空间固定，是简单的数据段，为了便于提升变量查询速度，将其存储在栈(stack)中</p><h3 id="堆存储"><a href="#堆存储" class="headerlink" title="堆存储"></a>堆存储</h3><p>　　由于复杂值的大小会改变，所以不能将其存放在栈中，否则会降低变量查询速度，因此其存储在堆(heap)中，存储在变量处的值是一个指针，指向存储对象的内存处</p><p><img src="/2020/11/24/js-data-types/1606200294359.png"></p><h2 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h2><h3 id="按值访问"><a href="#按值访问" class="headerlink" title="按值访问"></a>按值访问</h3><p>　　原始值是作为不可细化的值进行存储和操作的，引用它们会转移其值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myString <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span class="token keyword">var</span> myStringCopy <span class="token operator">=</span> myString<span class="token punctuation">;</span><span class="token keyword">var</span> myString <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myString<span class="token punctuation">,</span>myStringCopy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null,'foo'</span></code></pre><h3 id="引用访问"><a href="#引用访问" class="headerlink" title="引用访问"></a>引用访问</h3><p>　　复杂值是通过引用进行存储和操作的，而不是实际的值。创建一个包含复杂对象的变量时，其值是内存中的一个引用地址。引用一个复杂对象时，使用它的名称(即变量或对象属性)通过内存中的引用地址获取该对象值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> copyOfMyObject <span class="token operator">=</span> myObject<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有复制值，而是复制了引用</span>myObject<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//操作myObject中的值</span><span class="token comment" spellcheck="true">//现在如果输出myObject和copyOfMyObject，则都会输出foo属性，因为它们引用的是同一个对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span>copyOfMyObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object&amp;#123;foo="bar"&amp;#125;</span></code></pre><h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><p>当声明的变量未初始化时，该变量的默认值是undefined.</p><p>会出现场景</p><ul><li>已声明未赋值的变量</li><li>获取对象不存在的属性</li><li>无返回值的函数的执行结果</li><li>函数的参数没有传入</li><li>void(expression)</li></ul><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>它表示一个特殊值，常用来描述”空值”</p><p>null是空对象指针，而[]是空数组，{}是空对象，三者不相同</p><blockquote><p>null表示”空值”，undefined表示”未定义”。两者往往可以互换。判断相等运算符==认为两者是相等的</p></blockquote><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><p>用Boolean()转型函数，转换成false的值称为假值(falsy value)，这7个值包括undefined、null、+0、-0、NaN、false、””(空字符串)</p><blockquote><p>空字符串””转换为false，而空白字符串” “转换为true</p></blockquote><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>isFinite()来确定一个数值是不是有穷的</p><p>isNaN()来判断这个数字是不是NaN、</p><p>把非数值转换成数值：Number()、parseInt()和parseFloat()</p><p>Number()解析字符串时会识别出字符串的前置空格并去掉</p><p>parseInt()专门用于把字符串转换成整数。在转换字符串时，会忽略字符串前面的空格，直到找到第一个非空格字符。如果第一个字符不是数字字符或者负号，parseInt()就会返回NaN。（接受进制）</p><p>parseFloat()专门用于字符串转换浮点数。同样地，解析时会忽略字符串前面的空格，直到找到第一个非空格字符，然后一直解析到字符串末尾或一个无效的浮点数字字符为止</p><blockquote><p>valueOf()方法返回对象的数字字面量</p><p>toString()方法将数字转换为字符串</p><p>toLocalString()方法将数字转换为本地惯例格式化数字的字符串</p><p>toFixed()方法按照指定的小数位返回数值四舍五入后的字符串表示(常用于处理货币值)</p><p>toExponential()方法返回数值四舍五入后的指数表示法(e表示法)的字符串表示，参数表示转换后的小数位数</p></blockquote><p>Number.toFixed(n) // 保留n位小数，为0则只保留整数<br>        Number.round() // 返回最接近的整数（相当于四舍五入）<br>        Number.floor() // 向小取整</p><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><pre class=" language-js"><code class="language-js">Math<span class="token punctuation">.</span>E             <span class="token function">自然对数的底数，即常量e的值</span><span class="token punctuation">(</span>约等于<span class="token number">2.71828</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>LN2           <span class="token number">2</span><span class="token function">的自然对数</span><span class="token punctuation">(</span>约等于<span class="token number">0.693</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>LN10          <span class="token number">10</span><span class="token function">的自然对数</span><span class="token punctuation">(</span>约等于<span class="token number">2.303</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>LOG2E         <span class="token function">以2为底e的对数</span><span class="token punctuation">(</span>约等于<span class="token number">1.443</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>LOG10E        <span class="token function">以10为底e的对数</span><span class="token punctuation">(</span>约等于<span class="token number">0.434</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>PI            <span class="token function">派的值</span><span class="token punctuation">(</span>约等于<span class="token number">3.14</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>SQRT2         <span class="token number">2</span><span class="token function">的平方根</span><span class="token punctuation">(</span>约等于<span class="token number">1.414</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>SQRT1_2       <span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token function">的平方根，即2的平方根的倒数</span><span class="token punctuation">(</span>约等于<span class="token number">0.707</span><span class="token punctuation">)</span></code></pre><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">abs(x)</td><td align="left">返回 x 的绝对值</td></tr><tr><td align="left">acos(x)</td><td align="left">返回 x 的反余弦值，以弧度计</td></tr><tr><td align="left">asin(x)</td><td align="left">返回 x 的反正弦值，以弧度计</td></tr><tr><td align="left">atan(x)</td><td align="left">以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。</td></tr><tr><td align="left">atan2(y,x)</td><td align="left">返回从 x 轴到点 (x,y) 的角度</td></tr><tr><td align="left">ceil(x)</td><td align="left">对 x 进行上舍入</td></tr><tr><td align="left">cos(x)</td><td align="left">返回 x 的余弦</td></tr><tr><td align="left">exp(x)</td><td align="left">返回 Ex 的值</td></tr><tr><td align="left">floor(x)</td><td align="left">对 x 进行下舍入</td></tr><tr><td align="left">log(x)</td><td align="left">返回 x 的自然对数（底为e）</td></tr><tr><td align="left">max(x,y,z,…,n)</td><td align="left">返回最高值</td></tr><tr><td align="left">min(x,y,z,…,n)</td><td align="left">返回最低值</td></tr><tr><td align="left">pow(x,y)</td><td align="left">返回 x 的 y 次幂</td></tr><tr><td align="left">random()</td><td align="left">返回 0 ~ 1 之间的随机数</td></tr><tr><td align="left">round(x)</td><td align="left">把 x 四舍五入为最接近的整数</td></tr><tr><td align="left">sin(x)</td><td align="left">返回 x（x 以角度计）的正弦</td></tr><tr><td align="left">sqrt(x)</td><td align="left">返回 x 的平方根</td></tr><tr><td align="left">tan(x)</td><td align="left">返回角的正切</td></tr></tbody></table><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">比较</th><th align="left">返回</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">等于</td><td align="left">x == 8</td><td align="left">false</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x == 5</td><td align="left">true</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x == “5”</td><td align="left">true</td></tr><tr><td align="left">===</td><td align="left">值相等并且类型相等</td><td align="left">x === 5</td><td align="left">true</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x === “5”</td><td align="left">false</td></tr><tr><td align="left">!=</td><td align="left">不相等</td><td align="left">x != 8</td><td align="left">true</td></tr><tr><td align="left">!==</td><td align="left">值不相等或类型不相等</td><td align="left">x !== 5</td><td align="left">false</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x !== “5”</td><td align="left">true</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x !== 8</td><td align="left">true</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td><td align="left">x &gt; 8</td><td align="left">false</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td><td align="left">x &lt; 8</td><td align="left">true</td></tr><tr><td align="left">&gt;=</td><td align="left">大于或等于</td><td align="left">x &gt;= 8</td><td align="left">false</td></tr><tr><td align="left">&lt;=</td><td align="left">小于或等于</td><td align="left">x &lt;= 8</td><td align="left">true</td></tr></tbody></table><blockquote><p>Javascript有两组相等运算符，一组是==和!=，另一组是===和!==。前者只比较值的相等，后者除了值以外，还比较类型是否相同。</p><p>请尽量不要使用前一组，永远只使用===和!==。因为==默认会进行类型转换，规则十分难记。如果你不相信的话，请回答下面五个判断式的值是true还是false：</p><p>　　false == ‘false’</p><p>　　false == undefined</p><p>　　false == null</p><p>　　null == undefined</p><p>　　0 == ‘’</p><p>前三个是false，后两个是true。</p></blockquote><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p><img src="/2020/11/24/js-data-types/1606214735012.png"></p><table><thead><tr><th align="left">原始值</th><th align="left">转换为数字</th><th align="left">转换为字符串</th><th align="left">转换为逻辑</th></tr></thead><tbody><tr><td align="left">false</td><td align="left">0</td><td align="left">“false”</td><td align="left">false</td></tr><tr><td align="left">true</td><td align="left">1</td><td align="left">“true”</td><td align="left">true</td></tr><tr><td align="left">0</td><td align="left">0</td><td align="left">“0”</td><td align="left">false</td></tr><tr><td align="left">1</td><td align="left">1</td><td align="left">“1”</td><td align="left">true</td></tr><tr><td align="left">“0”</td><td align="left">0</td><td align="left">“0”</td><td align="left"><strong>true</strong></td></tr><tr><td align="left">“000”</td><td align="left">0</td><td align="left">“000”</td><td align="left"><strong>true</strong></td></tr><tr><td align="left">“1”</td><td align="left">1</td><td align="left">“1”</td><td align="left">true</td></tr><tr><td align="left">NaN</td><td align="left">NaN</td><td align="left">“NaN”</td><td align="left">false</td></tr><tr><td align="left">Infinity</td><td align="left">Infinity</td><td align="left">“Infinity”</td><td align="left">true</td></tr><tr><td align="left">-Infinity</td><td align="left">-Infinity</td><td align="left">“-Infinity”</td><td align="left">true</td></tr><tr><td align="left">“”</td><td align="left"><strong>0</strong></td><td align="left">“”</td><td align="left"><strong>false</strong></td></tr><tr><td align="left">“20”</td><td align="left">20</td><td align="left">“20”</td><td align="left">true</td></tr><tr><td align="left">“twenty”</td><td align="left">NaN</td><td align="left">“twenty”</td><td align="left">true</td></tr><tr><td align="left">[ ]</td><td align="left"><strong>0</strong></td><td align="left">“”</td><td align="left">true</td></tr><tr><td align="left">[20]</td><td align="left"><strong>20</strong></td><td align="left">“20”</td><td align="left">true</td></tr><tr><td align="left">[10,20]</td><td align="left">NaN</td><td align="left">“10,20”</td><td align="left">true</td></tr><tr><td align="left">[“twenty”]</td><td align="left">NaN</td><td align="left">“twenty”</td><td align="left">true</td></tr><tr><td align="left">[“ten”,”twenty”]</td><td align="left">NaN</td><td align="left">“ten,twenty”</td><td align="left">true</td></tr><tr><td align="left">function(){}</td><td align="left">NaN</td><td align="left">“function(){}”</td><td align="left">true</td></tr><tr><td align="left">{ }</td><td align="left">NaN</td><td align="left">“[object Object]”</td><td align="left">true</td></tr><tr><td align="left">null</td><td align="left"><strong>0</strong></td><td align="left">“null”</td><td align="left">false</td></tr><tr><td align="left">undefined</td><td align="left">NaN</td><td align="left">“undefined”</td><td align="left">false</td></tr></tbody></table><h1 id="JavaScript-对象-实例"><a href="#JavaScript-对象-实例" class="headerlink" title="JavaScript 对象 实例"></a>JavaScript 对象 实例</h1><p><a href="https://www.runoob.com/js/js-ex-objects.html">例子总结1</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>improve js code</title>
      <link href="2020/11/23/improve-js-code/"/>
      <url>2020/11/23/improve-js-code/</url>
      
        <content type="html"><![CDATA[<h1 id="javascript的代码优化"><a href="#javascript的代码优化" class="headerlink" title="javascript的代码优化"></a>javascript的代码优化</h1><h2 id="js从css抽离出来"><a href="#js从css抽离出来" class="headerlink" title="js从css抽离出来"></a>js从css抽离出来</h2><h2 id="css-从js中抽离出来"><a href="#css-从js中抽离出来" class="headerlink" title="css 从js中抽离出来"></a>css 从js中抽离出来</h2><h2 id="减少全局变量"><a href="#减少全局变量" class="headerlink" title="减少全局变量"></a>减少全局变量</h2><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="隔离应用逻辑"><a href="#隔离应用逻辑" class="headerlink" title="隔离应用逻辑"></a>隔离应用逻辑</h3><p>将应用逻辑从所有事件处理程序中抽离出来是一种最佳实践</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//不好的做法</span><span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> popup <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'popup'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  popup<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'reveal'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">addListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span><span class="token string">'click'</span><span class="token punctuation">,</span>handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//好的做法</span><span class="token keyword">var</span> MyApplication <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  handleClick<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showPopup</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  showPopup<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> popup <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'popup'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'reveal'</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">addListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  MyApplication<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="不要分发事件对象"><a href="#不要分发事件对象" class="headerlink" title="不要分发事件对象"></a>不要分发事件对象</h3><p>让事件处理程序使用event对象来处理事件，然后拿到所有需要的数据传给应用逻辑</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//改进的做法</span><span class="token keyword">var</span> MyApplication <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  handleClick<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showPopup</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>event<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  showPopup<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> popup <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'popup'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'reveal'</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">addListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  MyApplication<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当处理事件时，最好让事件程序成为接触到event对象的唯一的函数。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//改进的做法</span><span class="token keyword">var</span> MyApplication <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  handleClick<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showPopup</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>event<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  showPopup<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> popup <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'popup'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'reveal'</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">addListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  MyApplication<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="配置数据"><a href="#配置数据" class="headerlink" title="配置数据"></a>配置数据</h2><p>关键数据从代码抽离</p><ol><li>URL</li><li>需要展现给用户的字符串</li><li>重复的值</li><li>配置项</li><li>任何可能发生变更的值</li></ol><p>将配置数据保存在了config对象中，config对象的每个属性都保存了一个数据片段，每个属性名都有前缀，用以表明数据的类型(MSG表示展现给用户的信息，URL表示网络地址，CSS表示这是一个className)。当然，也可以将整个config对象放到单独的文件中，这样对配置数据的修改可以完全和使用这个数据的代码隔离开来</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//好的做法</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  MSG_INVALID_VALUE<span class="token punctuation">:</span> <span class="token string">'Invalid value'</span><span class="token punctuation">,</span>  URL_INVALID<span class="token punctuation">:</span><span class="token string">'/errors/invalid.php'</span><span class="token punctuation">,</span>  CSS_SELECTED<span class="token punctuation">:</span><span class="token string">'selected'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>MSG_INVALID_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    location<span class="token punctuation">.</span>href<span class="token operator">=</span>config<span class="token punctuation">.</span>URL_INVALID<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">toggleSelected</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasClass</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>config<span class="token punctuation">.</span>CSS_SELECTED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">removeClass</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>config<span class="token punctuation">.</span>CSS_SELECTED<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">addClass</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>config<span class="token punctuation">.</span>CSS_SELECTED<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="选择器优化"><a href="#选择器优化" class="headerlink" title="选择器优化"></a>选择器优化</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//好的做法app.Eles = &amp;#123;</span>    widgetDiv<span class="token punctuation">:</span> <span class="token string">".left-widget div"</span><span class="token punctuation">,</span>    inputResize<span class="token punctuation">:</span> <span class="token string">'.input-resize'</span><span class="token punctuation">,</span>    hr<span class="token punctuation">:</span> <span class="token string">'.hr'</span><span class="token punctuation">,</span>    txt<span class="token punctuation">:</span> <span class="token string">'.input-group-btn button'</span><span class="token punctuation">,</span>    cus<span class="token punctuation">:</span> <span class="token string">'#paper-type-cus'</span><span class="token punctuation">,</span>    hid<span class="token punctuation">:</span> <span class="token string">'#hidden'</span><span class="token punctuation">,</span>    mainCon<span class="token punctuation">:</span> <span class="token string">'#mainCon'</span><span class="token punctuation">,</span>    rulerX<span class="token punctuation">:</span> <span class="token string">'.ruler-x'</span><span class="token punctuation">,</span>    rulerY<span class="token punctuation">:</span> <span class="token string">'.ruler-y'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h2><p>　1、避免出现超大函数</p><p>　2、独立出来的函数有助于代码复用</p><p>　3、独立出来的函数更容易被覆写</p><p>　4、独立出来的函数如果拥有一个良好的命名，它本身就起到了注释的作用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> getUserInfo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">'http:// xxx.com/userInfo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'userId: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>userId <span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'userName: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>userName <span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'nickName: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>nickName <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改成：</span><span class="token keyword">var</span> getUserInfo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">'http:// xxx.com/userInfo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printDetails</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> printDetails <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'userId: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>userId <span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'userName: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>userName <span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'nickName: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>nickName <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>另外注意</p><ul><li>减少参数量（同一对象信息，就用对象传送）</li></ul><h2 id="条件优化"><a href="#条件优化" class="headerlink" title="条件优化"></a>条件优化</h2><ul><li>合并条件，避免重复代码</li><li>条件语句过长，写成函数，名字容易懂</li><li>避免条件分支嵌套</li></ul><h2 id="循环优化"><a href="#循环优化" class="headerlink" title="循环优化"></a>循环优化</h2><ul><li>合理使用循环 ， 避免多重循环</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS basic</title>
      <link href="2020/11/23/JS-basic/"/>
      <url>2020/11/23/JS-basic/</url>
      
        <content type="html"><![CDATA[<h1 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h1><h2 id="let-const-一起和-var-的区别"><a href="#let-const-一起和-var-的区别" class="headerlink" title="let/const 一起和 var 的区别"></a>let/const 一起和 var 的区别</h2><table><thead><tr><th>var</th><th>let/const</th></tr></thead><tbody><tr><td>会进行预解析</td><td>不会进行预解析, 必须先定义后使用</td></tr><tr><td>声明重复变量名</td><td>不能声明重复的变量名</td></tr><tr><td>没有块级作用域,声明全局变量（函数内除外）</td><td>有块级作用域</td></tr></tbody></table><p><img src="/2020/11/23/JS-basic/1606354411609.png"></p><p><strong>以上报错i未定义，说明let定义变量i，只在所在的块作用域内起作用</strong></p><p><img src="/2020/11/23/JS-basic/1606354454983.png"></p><p><strong>var 定义变量没有块级作用域，i在块级作用域照样可以输出结果</strong></p><p>var在函数内命名的变量是只在整个函数作用域内起作用，出了这个函数作用域就不能用了</p><h2 id="let-vs-const"><a href="#let-vs-const" class="headerlink" title="let vs const"></a>let vs const</h2><table><thead><tr><th>let</th><th>const</th></tr></thead><tbody><tr><td>变量</td><td>常量</td></tr><tr><td>可以先不赋值</td><td>必须声明时赋值</td></tr><tr><td>变量可以改</td><td>不能改</td></tr></tbody></table><h2 id="对象属性访问"><a href="#对象属性访问" class="headerlink" title="对象属性访问"></a>对象属性访问</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>z<span class="token punctuation">:</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对象字面量</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span>o<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 包含对象的数组字面量</span>o<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表达式o的x属性</span>o<span class="token punctuation">.</span>y<span class="token punctuation">.</span>z<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表达式o.y的z属性</span>o<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象o的x属性</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表达式a中索引为1的元素</span></code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift</a></p><p><a href="https://www.w3schools.com/js/js_operators.asp">https://www.w3schools.com/js/js_operators.asp</a></p><p><a href="https://wangdoc.com/javascript/operators/index.html">https://wangdoc.com/javascript/operators/index.html</a></p><h3 id="increment（i-amp-i）"><a href="#increment（i-amp-i）" class="headerlink" title="increment（i++ &amp; ++i）"></a>increment（i++ &amp; ++i）</h3><h3 id="Postfix-increment"><a href="#Postfix-increment" class="headerlink" title="Postfix increment"></a>Postfix increment</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>y <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// y = 3; x = 4</span></code></pre><h3 id="Prefix-increment"><a href="#Prefix-increment" class="headerlink" title="Prefix increment"></a>Prefix increment</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// a = 3; b = 3</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[0,11,12]</span></code></pre><p>难点：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>数组data和i的值</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> </code></pre><p>数组data和i的值又是多少</p><p>第一个表达式结果</p><pre class=" language-js"><code class="language-js"> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">14</span>  data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">8</span>  data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">9</span>  i<span class="token operator">=</span><span class="token number">1</span></code></pre><p>第二个结果</p><pre class=" language-js"><code class="language-js"> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">16</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">8</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">9</span>   i<span class="token operator">=</span><span class="token number">2</span></code></pre><h2 id="结合性-数运算符"><a href="#结合性-数运算符" class="headerlink" title="结合性 - 数运算符"></a>结合性 - 数运算符</h2><p><img src="/2020/11/23/JS-basic/1606353255160.png" alt="运算符结合性"></p><ul><li><p>优先级越高的优先运算，不用死记该图片，可以使用（）提升优先级<br>赋值优先级最低</p></li><li><p>先乘除后加减</p></li><li><p>优先级相同情况下,从左到右依次计算</p></li></ul><p>数运算符都具有从左向右的结合性，只有一元运算符、条件运算符和赋值运算符具有从右向左的结合性</p><pre class=" language-js"><code class="language-js">w <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于:</span>w <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>w <span class="token operator">=</span> x <span class="token operator">=</span> y <span class="token operator">=</span> z<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于:</span>w <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q <span class="token operator">=</span> a <span class="token operator">?</span> b <span class="token punctuation">:</span> c <span class="token operator">?</span> d <span class="token punctuation">:</span> e <span class="token operator">?</span> f <span class="token punctuation">:</span> g<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于:</span>q <span class="token operator">=</span> a <span class="token operator">?</span> b <span class="token punctuation">:</span> <span class="token punctuation">(</span>c <span class="token operator">?</span> d <span class="token punctuation">:</span> <span class="token punctuation">(</span>e <span class="token operator">?</span> f <span class="token punctuation">:</span> g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><pre class=" language-js"><code class="language-js">a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">+</span> a<span class="token operator">--</span> <span class="token operator">*</span> a<span class="token operator">++</span><span class="token punctuation">;</span></code></pre><p>　　先分析该表达式中，根据优先级的顺序，分别运算递增运算符、乘法运算符、加法运算符和赋值运算符</p><p>　　先计算第一个a++;//结果为1，a为2</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//表达式变成</span>b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> a<span class="token operator">--</span> <span class="token operator">*</span> a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算a--;结果为2，a为1</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//表达式变成</span>b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算第二个a++;//结果为1，a为2</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//表达式变成</span>b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>　　所以，最终a = 2; b = 3;</p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p><a href="https://www.runoob.com/js/js-type-conversion.html">https://www.runoob.com/js/js-type-conversion.html</a></p><p><a href="https://www.w3school.com.cn/js/js_type_conversion.asp">https://www.w3school.com.cn/js/js_type_conversion.asp</a></p><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p><a href="https://www.cnblogs.com/xiaohuochai/p/5677490.html">https://www.cnblogs.com/xiaohuochai/p/5677490.html</a></p><h2 id="javascript语句——条件语句、循环语句和跳转语句"><a href="#javascript语句——条件语句、循环语句和跳转语句" class="headerlink" title="javascript语句——条件语句、循环语句和跳转语句"></a>javascript语句——条件语句、循环语句和跳转语句</h2><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span>  <span class="token keyword">case</span> value1<span class="token punctuation">:</span> statement1<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> value2<span class="token punctuation">:</span> statement2<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> value3<span class="token punctuation">:</span> statement3<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token punctuation">:</span> statement4<span class="token punctuation">;</span></code></pre><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span>variable <span class="token keyword">in</span> object<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    statement<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="argument-object"><a href="#argument-object" class="headerlink" title="argument object"></a>argument object</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">viewArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arguments<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">viewArgs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">viewArgs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">viewArgs</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"life the universe and all"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">viewArgs</span><span class="token punctuation">(</span><span class="token string">"Douglas"</span><span class="token punctuation">,</span><span class="token string">"Adams"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">viewArgs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"World!"</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'thanks'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span><span class="token string">'all'</span><span class="token punctuation">,</span><span class="token string">'the'</span><span class="token punctuation">,</span> <span class="token string">'fish'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"dolphines"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token string">'life the universe and all'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'Douglas'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'Adams'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'World!'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'thanks'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token string">'the'</span><span class="token punctuation">,</span> <span class="token string">'fish'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'dolphins'</span><span class="token punctuation">,</span>   <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">42</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//treat it as array</span><span class="token function">destroyer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">destroyer</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr1<span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3, 5, 1, 2, 2]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[2,3,5]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>div tips</title>
      <link href="2020/11/22/div-tips/"/>
      <url>2020/11/22/div-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Div-Size-Automatically-size-of-content"><a href="#1-Div-Size-Automatically-size-of-content" class="headerlink" title="1. Div Size Automatically size of content"></a>1. Div Size Automatically size of content</h2><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> min-content or <span class="token property">width</span><span class="token punctuation">:</span> max-content<span class="token property">width</span><span class="token punctuation">:</span>fit-content</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>overlap div</title>
      <link href="2020/11/21/overlap-div/"/>
      <url>2020/11/21/overlap-div/</url>
      
        <content type="html"><![CDATA[<h1 id="Overlap-Element"><a href="#Overlap-Element" class="headerlink" title="Overlap Element"></a>Overlap Element</h1><h2 id="1-Position-Property"><a href="#1-Position-Property" class="headerlink" title="1. Position Property"></a>1. Position Property</h2><pre class=" language-css"><code class="language-css"><span class="token number">.</span>child &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>   <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/21/overlap-div/1605966338959.png"></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>child &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>   <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>child-<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>child-<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>parent &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/21/overlap-div/1605967027232.png"></p><h2 id="2-Using-CSS-Grid"><a href="#2-Using-CSS-Grid" class="headerlink" title="2. Using CSS Grid"></a>2. Using CSS Grid</h2><pre class=" language-css"><code class="language-css"><span class="token number">.</span>parent &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">250</span>px <span class="token number">1</span>fr<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">150</span>px <span class="token number">1</span>fr<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>child &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">1</span> / <span class="token number">2</span> / <span class="token number">2</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/21/overlap-div/1605966839123.png"></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>parent &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">250</span>px <span class="token number">1</span>fr<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">150</span>px <span class="token number">1</span>fr<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>child &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">1</span> / <span class="token number">2</span> / <span class="token number">2</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>child-<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/21/overlap-div/1605966795562.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>box sizing</title>
      <link href="2020/11/21/box-sizing/"/>
      <url>2020/11/21/box-sizing/</url>
      
        <content type="html"><![CDATA[<h1 id="使用box-sizing布局"><a href="#使用box-sizing布局" class="headerlink" title="使用box-sizing布局"></a>使用box-sizing布局</h1><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><ul><li><code>padding</code> + <code>border</code> + <code>width</code>= 盒子的宽度</li><li><code>padding</code>+ <code>border</code> + <code>height</code> = 盒子的高度</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>语法：<code>box-sizing:</code> <code>content-box</code> | <code>border-box</code> | <code>inherit</code>;</p><pre class=" language-css"><code class="language-css">*&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>     <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token property">box-sizing</span><span class="token punctuation">:</span>border-box<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><ul><li>content-box：标准盒模型，CSS定义的宽高只包含content的宽高</li><li>border-box：IE盒模型，CSS定义的宽高包括了content，padding和border</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie localStorage和sessionStorage 三者之间的区别以及存储、获取、删除等使用方式</title>
      <link href="2020/11/17/cookie-localstorage-session/"/>
      <url>2020/11/17/cookie-localstorage-session/</url>
      
        <content type="html"><![CDATA[<p>前端本地存储的方式有三种，分别是cookie，localstorage和sessionStorage </p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//保存cookie的值 </span><span class="token keyword">var</span> dataCookie<span class="token operator">=</span><span class="token string">'110'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'token'</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span>dataCookie<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取指定名称的cookie值</span><span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (^| )name=([^;]*)(;|$),match[0]为与整个正则表达式匹配的字符串，match[i]为正则表达式捕获数组相匹配的数组；</span><span class="token keyword">var</span> arr <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(^| )"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"=([^;]*)(;|$)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">var</span> cookieData<span class="token operator">=</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//cookie赋值给变量。</span></code></pre><h3 id="localStorage和sessionStorage"><a href="#localStorage和sessionStorage" class="headerlink" title="localStorage和sessionStorage:"></a>localStorage和sessionStorage:</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">'sessionData'</span><span class="token punctuation">;</span><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">;</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储数据</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'value2'</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> dataAll<span class="token operator">=</span>sessionStorage<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取全部数据</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataAll<span class="token punctuation">,</span><span class="token string">'获取全部数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> dataSession<span class="token operator">=</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取指定键名数据</span><span class="token keyword">var</span> dataSession2<span class="token operator">=</span>sessionStorage<span class="token punctuation">.</span>sessionData<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sessionStorage是js对象，也可以使用key的方式来获取值</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataSession<span class="token punctuation">,</span>dataSession2<span class="token punctuation">,</span><span class="token string">'获取指定键名数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除指定键名数据</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataAll<span class="token punctuation">,</span><span class="token string">'获取全部数据1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空缓存数据：localStorage.clear();</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataAll<span class="token punctuation">,</span><span class="token string">'获取全部数据2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h2 id="三者的异同"><a href="#三者的异同" class="headerlink" title="三者的异同"></a>三者的异同</h2><h3 id="生命周期："><a href="#生命周期：" class="headerlink" title="生命周期："></a>生命周期：</h3><p>cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效</p><p>localStorage：除非被手动清除，否则将会永久保存。</p><p>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</p><h3 id="存放数据大小："><a href="#存放数据大小：" class="headerlink" title="存放数据大小："></a>存放数据大小：</h3><p>cookie：4KB左右</p><p>localStorage和sessionStorage：可以保存5MB的信息。</p><h3 id="http请求："><a href="#http请求：" class="headerlink" title="http请求："></a>http请求：</h3><p>cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</p><p>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信</p><h3 id="易用性："><a href="#易用性：" class="headerlink" title="易用性："></a>易用性：</h3><p>cookie：需要程序员自己封装，源生的Cookie接口不友好</p><p>localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</p><h2 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h2><h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h3><ul><li>浪费宽带（每次http请求都会携带cookie信息）</li><li>限制多（还需要指定作用域，不可以跨域调用）</li></ul><p>但是：识别用户登录来说，cookie还是比stprage更好用的。其他情况下，可以使用storage，就用storage。</p><h3 id="localStorage和sessionStorage-1"><a href="#localStorage和sessionStorage-1" class="headerlink" title="localStorage和sessionStorage"></a>localStorage和sessionStorage</h3><p>localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。</p><p>Reference：</p><p><a href="https://juejin.im/post/6844903516826255373#heading-13">https://juejin.im/post/6844903516826255373#heading-13</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区别伪元素before after</title>
      <link href="2020/11/15/before-after/"/>
      <url>2020/11/15/before-after/</url>
      
        <content type="html"><![CDATA[<h1 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><pre class=" language-css"><code class="language-css"><span class="token property">element</span><span class="token punctuation">:</span>after  &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> style properties &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* CSS2 语法 */</span><span class="token property">element</span><span class="token punctuation">:</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> style properties &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* CSS3 语法 */</span></code></pre><h2 id="同异"><a href="#同异" class="headerlink" title="同异"></a>同异</h2><blockquote><p>同：<br>                ::before和::after都是某标签的兄弟节点</p><p>异：<br>                ::before 是某标签前的兄弟元素<br>                ::after 是某标签后的兄弟元素</p></blockquote><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"> <span class="token property">p</span><span class="token punctuation">:</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'我是在p标签前的兄弟元素'</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token property">p</span><span class="token punctuation">:</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'我是在p标签前的兄弟元素'</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>--我是p标签--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/15/before-after/1605604037887.png"></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>1）<strong>伪元素即伪类，它是一个元素的子元素</strong>，<em>其意思就是说，我们无法用JS获取到这些伪元素，</em>我们<em>无法通过JS对其进行增、删、改，所以这也是它们的优点，因为它们不会增加JS查询DOM的负担，即对于JS来说伪元素是透明的。然后因为它们也不是实际的HTML标签，所以可以加快浏览器加载HTML文件，对SEO也有帮助</em>（SEO  搜索引擎优化）。</p><p>2）<strong>如果我们把伪类的样式有absolute定位的话会把伪类强制变成块级元素</strong>，<em>伪类本身是行内元素的。</em></p><p>3）<strong>img、input和其他的单标签是没有after和before伪元素的，因为单标签本身不能有子元素</strong>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Relative Path</title>
      <link href="2020/11/15/relative-Path/"/>
      <url>2020/11/15/relative-Path/</url>
      
        <content type="html"><![CDATA[<h1 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h1><h2 id="同一个文件夹"><a href="#同一个文件夹" class="headerlink" title="同一个文件夹"></a>同一个文件夹</h2><p>2.html和3.html在同一个文件夹下， 如果2.html链接到3.html，可以在2.html中这样写:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>同目录下文件间互相链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h2 id="上级目录文件"><a href="#上级目录文件" class="headerlink" title="上级目录文件"></a>上级目录文件</h2><p>1.html是2.html和3.html的上级目录中的文件，如果2.html或3.html链接到1.html，可以在2.html或3.html中这样写</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../1.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接到上级目录中的文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>../ 代表一级上级目录(间隔一个目录)<br>　　 ../../代表二级上级目录(间隔两个目录)<br>　　 比如4.html链接到1.html，可以在4.html中这样写</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../1.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接到上级目录的上级目录中的文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h2 id="下级目录文件"><a href="#下级目录文件" class="headerlink" title="下级目录文件"></a>下级目录文件</h2><p>2.html和3.html是1.html的下级目录中的文件，如果在1.html中链接到2.html， 可以在1.html中这样写</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first/2.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接到下级目录(first)中的文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>如果在1.html中链接到4.html，可以在1.html中这样写</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first/second/4.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接到下级目录(first/second/)中的文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h1 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h1><p>使用根目录的方式表示的路径和绝对路径的表示方式相似，去掉前面的域名就可。<br>　　比如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/exe/1.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接到1.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/exe/first/2.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接到2.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>1</code></pre><p><strong>../表示源文件所在目录（文件夹）的上一级目录（文件夹），../../表示源文件所在目录的上上级目录，以此类推。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo render skip</title>
      <link href="2020/11/15/hexo-render-skip/"/>
      <url>2020/11/15/hexo-render-skip/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客跳过渲染，创建自定义网页方法"><a href="#Hexo博客跳过渲染，创建自定义网页方法" class="headerlink" title="Hexo博客跳过渲染，创建自定义网页方法"></a>Hexo博客跳过渲染，创建自定义网页方法</h1><h2 id="1-跳过渲染指令"><a href="#1-跳过渲染指令" class="headerlink" title="1.跳过渲染指令"></a>1.跳过渲染指令</h2><p>在html文件中添加跳过渲染指令：</p><p>用编辑器打开 Hexo\source 创建的文件夹中的 index.html 文件，在开头添加如下代码即可</p><pre class=" language-html"><code class="language-html">---layout: false---</code></pre><p>缺点：</p><ol><li>网页引用了 css 或 js ，这些 css 和 js 必须使用外链。</li><li>引用图片，可以在网页目录下建立 img 文件夹，可以直接引用图片，不必再去创建外链。</li></ol><h2 id="2-config中设置"><a href="#2-config中设置" class="headerlink" title="2.config中设置"></a>2.config中设置</h2><p>Hexo 目录下的_config.yml 文件，找到 skip_render</p><p>skip_render 一般有以下四种常用参数：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#跳过source文件夹下的test.html</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> test.html<span class="token comment" spellcheck="true">#忽略source下的test文件夹下所有文件</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> test/*  <span class="token comment" spellcheck="true">#忽略 source 下的 test 文件夹下.html文件</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> test/*.html <span class="token comment" spellcheck="true">#忽略 source 下的 test 文件夹内所有文件包括子文件夹以及子文件夹内的文件</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> test/** <span class="token comment" spellcheck="true">#忽略多个路径的文件或目录</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> test.html    <span class="token punctuation">-</span> test/*</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layout-display、position、float详解</title>
      <link href="2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="display、position、float详解"><a href="#display、position、float详解" class="headerlink" title="display、position、float详解"></a>display、position、float详解</h1><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p>display 是 css 布局中很重要的一个属性，它定义了元素生成的显示框类型，常见的几个属性值有：<code>grid</code>、<code>block</code>、<code>inline</code>、<code>inline-block</code>、<code>inherit</code>、<code>none</code>、<code>flex</code>。</p><p>每个元素都有默认的 display 属性，比如 div 标签的默认 display 属性是 block；span 标签的默认 display 属性是 inline</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427234056.png"></p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427256394.png"></p><blockquote><p>div：<br> 没有设置宽度时，它的宽度是其容器的 100%；<br> 可以给块级元素设置宽高、内边距、外边距等盒模型属性；<br> 块级元素可以包含块级元素和行内元素；<br> 常见的块级元素：<code>&lt;div&gt;</code>、<code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;dl&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;address&gt;</code> <code>&lt;form&gt;</code> 等。</p></blockquote><blockquote><p>Span：<br> 行内元素不会独占一行，只会占领自身宽高所需要的空间；<br> 给行内元素设置宽高不会起作用，margin 值只对左右起作用，padding 值也只对左右起作用；<br> 行内元素一般不可以包含块级元素，只能包含行内元素和文本；<br> 常见的行内元素 <code>&lt;a&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;label&gt;</code>、<code>&lt;span&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;input&gt;</code> 等。</p></blockquote><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427342046.png"></p><blockquote><p>Grid布局常用套路：容器定义布局方式为<strong>网格布局</strong>,按照项目需求去划分网格</p></blockquote><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605545544893.png"></p><h2 id="position-定位"><a href="#position-定位" class="headerlink" title="position(定位)"></a>position(定位)</h2><p> relative：相对定位，相对于元素的正常位置进行定位；<br>        absolute：绝对定位，相对于除 static 定位以外的元素进行定位；<br>        fixed：固定定位，相对于浏览器窗口进行定位，网站中的固定         header 和 footer 就是用固定定位来实现的；<br>        static：默认值，没有定位属性，元素正常出现在文档流中；<br>        inherit：继承父元素的 position 属性值。 </p><p>视图讲解; <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position">https://developer.mozilla.org/en-US/docs/Web/CSS/position</a></p><h3 id="Relative"><a href="#Relative" class="headerlink" title="Relative"></a>Relative</h3><p> position 为 relative，但是不添加额外属性（left，right，top，bottom 等），它表现的如同 static 一样。但是注意红色框部分，由于特殊设置，偏离普通流（normal flow）</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427536435.png"></p><h3 id="Aboslute"><a href="#Aboslute" class="headerlink" title="Aboslute"></a>Aboslute</h3><p>absolute 会相对于最近的除 static 定位以外的元素进行定位，在使用时要注意设置父元素（或祖先元素）的 position 属性，若父元素（或祖先元素）都没有设置定位属性，absolute 会找到最上层即浏览器窗口，相对于它进行定位了。</p><p>absolute中，组件的位置与父元素息息相关，父元素移动它也会跟着动。</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427666542.png"></p><h3 id="Fixed"><a href="#Fixed" class="headerlink" title="Fixed"></a>Fixed</h3><p>fixed 是相对于浏览器窗口的定位，一旦位置确定， 元素位置也不会改变</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427716715.png"></p><h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><p>float 属性定义元素在哪个方向浮动，常用属性值有 left、right，即向左浮动和向右浮动。设置了 float 的元素，会脱离文档流，然后向左或向右移动，直到碰到父容器的边界或者碰到另一个浮动元素。块级元素会忽略 float 元素，文本和行内元素却会环绕它，所以 float 最开始是用来实现文字环绕效果的。<br> <img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427819727.png"></p><p>当子元素设置浮动属性后，子元素会溢出到父元素外，父元素的宽高也不会被撑开了，称之为“<strong>高度塌陷</strong>”。</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427936251.png"></p><h3 id="清除浮动方案："><a href="#清除浮动方案：" class="headerlink" title="清除浮动方案："></a>清除浮动方案：</h3><h4 id="1-clear"><a href="#1-clear" class="headerlink" title="1.clear"></a>1.clear</h4><p><code>clear</code> 属性用来定义哪一侧不允许其他元素浮动，常见的值有 left 、right、both， 比如表示左侧不允许浮动元素</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605429217135.png"></p><h4 id="2-使用br标签"><a href="#2-使用br标签" class="headerlink" title="2.使用br标签"></a>2.使用br标签</h4><p>br 自带 clear 属性，clear 属性有 left、right 和 all 三个属性值可选。</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605429316799.png"></p><h4 id="3-给父元素设置-overflow"><a href="#3-给父元素设置-overflow" class="headerlink" title="3.给父元素设置 overflow"></a>3.给父元素设置 overflow</h4><p>添加 overflow 能解决问题，但是也可能因为内容增加导致超出尺寸的内容被隐藏</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605429394038.png"></p><h4 id="4-使用after伪元素"><a href="#4-使用after伪元素" class="headerlink" title="4.使用after伪元素"></a>4.使用after伪元素</h4><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605429444021.png"></p><p>基本layout demo：</p><p><a href="https://1linelayouts.glitch.me/">https://1linelayouts.glitch.me/</a></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Less</title>
      <link href="2020/11/14/Less/"/>
      <url>2020/11/14/Less/</url>
      
        <content type="html"><![CDATA[<h1 id="less-简介"><a href="#less-简介" class="headerlink" title="less 简介"></a>less 简介</h1><ol><li><p>less是CSS的预编译器，可以扩展CSS语言（当然也兼容CSS），可以定义变量、混合、函数等等，让CSS代码更易维护和扩展</p></li><li><p>less与传统写法相比：</p><ul><li>less后缀为” .less “</li><li>less中的注释有两种</li></ul><pre><code>// 这种注释不会编译到CSS文件*/* 这种注释会编译到CSS文件*/</code></pre></li><li><p>less需要编译成css才能使用</p><ul><li>使用编译工具，比如 Koala 挺好用的（当然也有很多在线编译工具）</li><li>在项目中使用（比如Vue，需要安装less-loader）</li><li>客户端调试（存在跨域问题，不推荐这种方式）</li></ul></li></ol><p>   使用link标签引用less.min.js（官网下载），注意rel=”stylesheet/less” （这种方式不生成css文件，直接在浏览器查看） </p><h2 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a>嵌套规则</h2><ol><li><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>嵌套规则类似HTML的结构，使得CSS代码清晰</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*css 写法*/</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>div p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>div p a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// less写法div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li><li><h3 id="父元素选择符-amp"><a href="#父元素选择符-amp" class="headerlink" title="父元素选择符 &amp;"></a>父元素选择符 &amp;</h3><pre class=" language-css"><code class="language-css">//css写法<span class="token number">.</span>bgcolor &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>bgcolor a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#888888</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>bgcolor <span class="token property">a</span><span class="token punctuation">:</span>hover &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff6600</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//less写法<span class="token number">.</span>bgcolor &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>   a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#888888</span><span class="token punctuation">;</span>          &amp;<span class="token punctuation">:</span>hover &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff6600</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li><li><h3 id="改变选择器的顺序-amp-代表当前选择器的所有父选择器"><a href="#改变选择器的顺序-amp-代表当前选择器的所有父选择器" class="headerlink" title="改变选择器的顺序 - &amp; 代表当前选择器的所有父选择器"></a>改变选择器的顺序 - &amp; 代表当前选择器的所有父选择器</h3><pre class=" language-css"><code class="language-css">ul &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  li &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token number">.</span>color &amp;&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果<span class="token number">.</span>color ul li &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li><li><h3 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h3><pre class=" language-css"><code class="language-css"><span class="token number">.</span>div<span class="token number">1</span>, <span class="token number">.</span>div<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  &amp; &amp; &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid blue<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> //编译结果<span class="token number">.</span>div<span class="token number">1</span>, <span class="token number">.</span>div<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>div<span class="token number">1</span> <span class="token number">.</span>div<span class="token number">2</span>,<span class="token number">.</span>div<span class="token number">2</span> <span class="token number">.</span>div<span class="token number">1</span>,<span class="token number">.</span>div<span class="token number">1</span> <span class="token number">.</span>div<span class="token number">1</span>,<span class="token number">.</span>div<span class="token number">2</span> <span class="token number">.</span>div<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid blue<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="1-变量定义与使用"><a href="#1-变量定义与使用" class="headerlink" title="1.变量定义与使用"></a>1.变量定义与使用</h3><ul><li>定义：@name: value; （@black: #000;）</li><li>@arguments表示所有可变参数</li><li>使用场合分3种：<ul><li>常规使用：@name</li><li>作为选择器或属性名：@{name}</li><li>作为URL：”@{name}”</li></ul></li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 1.常规使用 */</span><span class="token atrule"><span class="token rule">@black</span><span class="token punctuation">:</span> #000000<span class="token punctuation">;</span></span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> @black&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000000</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 2.作用选择器和属性名 */</span><span class="token atrule"><span class="token rule">@selName</span><span class="token punctuation">:</span> container<span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@proName</span><span class="token punctuation">:</span> width<span class="token punctuation">;</span></span><span class="token number">.</span>@&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>selName&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  @&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>proName&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果<span class="token number">.</span>container &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 3.作为URL */</span>@<span class="token property">imgUrl</span><span class="token punctuation">:</span> <span class="token string">"./images/logo.png"</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span> <span class="token url">url("@&amp;#123;imgUrl&amp;#125;")</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span> <span class="token url">url("./images/logo.png")</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="2-变量的加载声明与作用域"><a href="#2-变量的加载声明与作用域" class="headerlink" title="2.变量的加载声明与作用域"></a>2.变量的加载声明与作用域</h3><ul><li><p>变量的加载声明</p><pre class=" language-css"><code class="language-css">div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> @black&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@black</span><span class="token punctuation">:</span> #000000<span class="token punctuation">;</span></span>//编译结果div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000000</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li><li><p>变量的作用域</p><p>less会从当前作用域没找到，将往上查找（类似js）</p><p>如果在某级作用域找到多个相同名称的变量，使用最后定义的那个（类似css）</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@var</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span><span class="token number">.</span>class &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token atrule"><span class="token rule">@var</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>    <span class="token number">.</span>brass &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token atrule"><span class="token rule">@var</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>        <span class="token property">three</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@var</span><span class="token punctuation">;</span></span>        <span class="token atrule"><span class="token rule">@var</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span></span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    <span class="token property">one</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@var</span><span class="token punctuation">;</span></span> //类似js，无法访问<span class="token number">.</span>brass内部&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果<span class="token number">.</span>class &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">one</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>class <span class="token number">.</span>brass &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">three</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  //使用最后定义的 @<span class="token property">var</span><span class="token punctuation">:</span> <span class="token number">3</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="less-gt-css的编译"><a href="#less-gt-css的编译" class="headerlink" title="less -&gt; css的编译"></a>less -&gt; css的编译</h2><h3 id="1-混合（mixins）"><a href="#1-混合（mixins）" class="headerlink" title="1.混合（mixins）"></a>1.混合（mixins）</h3><ol><li><p>一般的混合</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>border &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*这里要注意*/</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token number">.</span>border<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果<span class="token number">.</span>border &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>上面的如果加上括号，那么编译结果会不一样</p><pre class=" language-css"><code class="language-css">//加括号但不带参数的混合<span class="token number">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token number">.</span>border<span class="token punctuation">;</span>  //加不加括号都可以&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li><li><p>带参数的混合</p><pre class=" language-css"><code class="language-css">//带参数的混合<span class="token number">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token atrule"><span class="token rule">@color</span><span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token atrule"><span class="token rule">@color</span><span class="token punctuation">;</span></span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px <span class="token atrule"><span class="token rule">@color</span><span class="token punctuation">;</span></span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token number">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token hexcode">#fff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ol><ol start="3"><li><p>带参数与默认值的混合</p><pre class=" language-css"><code class="language-css">//带参数且有默认值的混合<span class="token number">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token atrule"><span class="token rule">@color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token atrule"><span class="token rule">@color</span><span class="token punctuation">;</span></span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px <span class="token atrule"><span class="token rule">@color</span><span class="token punctuation">;</span></span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token number">.</span>border<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token number">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token hexcode">#000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#000000</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px <span class="token hexcode">#000000</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="2-多个参数"><a href="#2-多个参数" class="headerlink" title="2.多个参数"></a>2.多个参数</h3><p>多个参数时，参数之间可以用分号或逗号分隔</p><p><strong>注意逗号分隔的是“各个参数”还是“某个列表类型的参数”</strong></p><blockquote><p> 两个参数，并且每个参数都是逗号分隔的列表：.name(1,2,3; something, ele)</p><p>三个参数，并且每个参数都包含一个数字：.name(1,2,3)</p><p>使用分号，调用包含一个逗号分割的css列表（一个参数）： .name(1,2,3; )</p><p>逗号分割默认值（两个参数）：.name(@param1:red, blue)</p></blockquote><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">//less编写</span><span class="token comment" spellcheck="true">//定义多个相同名称的混合</span><span class="token comment" spellcheck="true">//less会根据参数进行调用相应的混合</span><span class="token number">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token variable">@color</span><span class="token punctuation">,</span> <span class="token variable">@padding<span class="token punctuation">:</span></span> xxx<span class="token punctuation">,</span> <span class="token variable">@margin<span class="token punctuation">:</span></span> <span class="token number">2</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color-3</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>  <span class="token property">padding-3</span><span class="token punctuation">:</span> <span class="token variable">@padding</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token variable">@margin</span> <span class="token variable">@margin</span> <span class="token variable">@margin</span> <span class="token variable">@margin</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.div &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> something<span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//2个参数</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.div1 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//3个参数</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.div2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//1个参数</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译输出</span><span class="token number">.</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color-3</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">padding-3</span><span class="token punctuation">:</span> something<span class="token punctuation">,</span> ele<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.div1 &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">color-3</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">padding-3</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.div2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">color-3</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">padding-3</span><span class="token punctuation">:</span> xxx<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="3-参数使用时候，顺序不限制"><a href="#3-参数使用时候，顺序不限制" class="headerlink" title="3.参数使用时候，顺序不限制"></a>3.参数使用时候，顺序不限制</h3><pre class=" language-less"><code class="language-less"><span class="token number">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token variable">@color<span class="token punctuation">:</span></span> black<span class="token punctuation">;</span> <span class="token variable">@margin<span class="token punctuation">:</span></span> <span class="token number">10</span>px<span class="token punctuation">;</span> <span class="token variable">@padding<span class="token punctuation">:</span></span> <span class="token number">20</span>px<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token variable">@margin</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token variable">@padding</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class1 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token variable">@margin<span class="token punctuation">:</span></span><span class="token number">20</span><span class="token punctuation">;</span> <span class="token variable">@color<span class="token punctuation">:</span></span> <span class="token hexcode">#33acfe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token hexcode">#efca44</span><span class="token punctuation">;</span> <span class="token variable">@padding<span class="token punctuation">:</span></span> <span class="token number">40</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译输出</span><span class="token number">.</span>class<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#33acfe</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#efca44</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="4-类似函数的匹配模式"><a href="#4-类似函数的匹配模式" class="headerlink" title="4.类似函数的匹配模式"></a>4.类似函数的匹配模式</h3><pre class=" language-less"><code class="language-less"><span class="token number">.</span><span class="token function">border</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span> <span class="token variable">@w<span class="token punctuation">:</span></span> <span class="token number">5</span>px<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token variable">@w</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.border</span><span class="token punctuation">(</span>t_l<span class="token punctuation">,</span> <span class="token variable">@w<span class="token punctuation">:</span></span> <span class="token number">5</span>px<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> <span class="token variable">@w</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.border</span><span class="token punctuation">(</span>b_l<span class="token punctuation">,</span> <span class="token variable">@w<span class="token punctuation">:</span></span> <span class="token number">5</span>px<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> <span class="token variable">@w</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.border</span><span class="token punctuation">(</span>b_r<span class="token punctuation">,</span> <span class="token variable">@w<span class="token punctuation">:</span></span> <span class="token number">5</span>px<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> <span class="token variable">@w</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.border &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.border</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span> <span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译结果</span><span class="token number">.</span>border &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><pre class=" language-less"><code class="language-less"><span class="token number">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token variable">@x</span><span class="token punctuation">,</span> <span class="token variable">@y</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token variable">@average</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">@x</span> <span class="token operator">+</span> <span class="token variable">@y</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.average</span><span class="token punctuation">(</span><span class="token number">16</span>px<span class="token punctuation">,</span> <span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token variable">@average</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译结果</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">33</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="5-用-gt-或者-空格-的选择"><a href="#5-用-gt-或者-空格-的选择" class="headerlink" title="5.用&gt; 或者 空格 的选择"></a>5.用&gt; 或者 空格 的选择</h3><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">//混合集</span>#<span class="token function">bgcolor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#888</span><span class="token punctuation">;</span>    &amp;<span class="token punctuation">:</span>hover &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff6600</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    <span class="token mixin-usage function">.b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ff0000</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.bgcolor1 &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fdfee0</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">#bgcolor>.a</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//只使用.a() 内部的不用</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.bgcolor2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">#bgcolor>.a>.b</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//只使用.b()</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译输出</span><span class="token number">.</span>bgcolor<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fdfee0</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#888</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.bgcolor1:hover &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff6600</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.bgcolor2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ff0000</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="6-引入文件"><a href="#6-引入文件" class="headerlink" title="6.引入文件"></a>6.引入文件</h3><ul><li>引入一个或多个less或者css文件，这些文件定义的规则可在当前less文件中使用</li><li>使用@import</li></ul><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><h3 id="1-条件表达"><a href="#1-条件表达" class="headerlink" title="1.条件表达"></a>1.条件表达</h3><p>​    条件表达式：</p><ul><li><p>比较运算符：&gt;, &gt;=, =, =&lt;, &lt;</p></li><li><p>格式：when() { }</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">// lightness() 是检测亮度的函数，用%度量</span><span class="token number">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token variable">@a</span><span class="token punctuation">)</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token function">lightness</span><span class="token punctuation">(</span><span class="token variable">@a</span><span class="token punctuation">)</span> >= <span class="token number">50%</span> <span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token variable">@a</span><span class="token punctuation">)</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token function">lightness</span><span class="token punctuation">(</span><span class="token variable">@a</span><span class="token punctuation">)</span> &lt; <span class="token number">50%</span> <span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token variable">@a</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@a</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class1 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token hexcode">#ddd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token hexcode">#555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译输出</span><span class="token number">.</span>class<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#dddddd</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#555555</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="2-类型检测"><a href="#2-类型检测" class="headerlink" title="2.类型检测"></a>2.类型检测</h3><p>​        iscolor / isnumber / isstring / iskeyword / isurl</p><h3 id="3-检测函数"><a href="#3-检测函数" class="headerlink" title="3.检测函数"></a>3.检测函数</h3><p>​        ispixel / ispercentage / isem / isunit</p><h3 id="4-循环"><a href="#4-循环" class="headerlink" title="4.循环"></a>4.循环</h3><pre class=" language-less"><code class="language-less"><span class="token number">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token variable">@counter</span><span class="token punctuation">)</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">@counter</span> > <span class="token number">0</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.h@&amp;#123</span><span class="token punctuation">;</span>counter&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">10</span>px<span class="token operator">*</span><span class="token variable">@counter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.loop</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">@counter</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归调用自身</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.loop</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="5-合并属性"><a href="#5-合并属性" class="headerlink" title="5.合并属性"></a>5.合并属性</h3><ul><li>在需要合并的属性的冒号之前加上 <strong>“+”</strong>，合并后用逗号分隔</li><li>在需要合并的属性的冒号之前加上 “+_”，合并用空格分隔</li></ul><pre class=" language-less"><code class="language-less"><span class="token number">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background+_</span><span class="token punctuation">:</span> <span class="token hexcode">#f66</span><span class="token punctuation">;</span>  <span class="token property">background+</span><span class="token punctuation">:</span> <span class="token url">url("/sss.jpg")</span><span class="token punctuation">;</span>  <span class="token property">background+_</span><span class="token punctuation">:</span> no<span class="token operator">-</span>repeat<span class="token punctuation">;</span>  <span class="token property">background+</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译输出</span><span class="token number">.</span>class &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f66</span><span class="token punctuation">,</span> <span class="token url">url("/sss.jpg")</span>  no<span class="token operator">-</span>repeat<span class="token punctuation">,</span> center<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="6-less中封装了非常多函数库"><a href="#6-less中封装了非常多函数库" class="headerlink" title="6.less中封装了非常多函数库"></a>6.less中封装了非常多<a href="http://lesscss.cn/functions/">函数库</a></h3>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layout difference-css</title>
      <link href="2020/11/14/Layout-difference-css/"/>
      <url>2020/11/14/Layout-difference-css/</url>
      
        <content type="html"><![CDATA[<h1 id="各类的布局优缺点："><a href="#各类的布局优缺点：" class="headerlink" title="各类的布局优缺点："></a>各类的布局优缺点：</h1><h2 id="使用display-float或position属性进行页面布局的缺点"><a href="#使用display-float或position属性进行页面布局的缺点" class="headerlink" title="使用display/float或position属性进行页面布局的缺点"></a>使用display/float或position属性进行页面布局的缺点</h2><p>专门写了一篇</p><h2 id="display中的grid"><a href="#display中的grid" class="headerlink" title="display中的grid"></a>display中的grid</h2><p>图文讲解: <a href="https://css-tricks.com/snippets/css/complete-guide-grid/">https://css-tricks.com/snippets/css/complete-guide-grid/</a></p><h3 id="划分格子"><a href="#划分格子" class="headerlink" title="划分格子"></a><strong>划分格子</strong></h3><pre class=" language-css"><code class="language-css">// <span class="token number">1.</span>划分格子用百分比 最常见<span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">30%</span> <span class="token number">70%</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// <span class="token number">2.</span>划分格子用占几份的方式  最常见<span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">12</span>,<span class="token number">1</span>fr<span class="token punctuation">)</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// <span class="token number">3.</span> 绝对长度结合自动<span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">200</span>px auto <span class="token number">200</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// <span class="token number">4.</span>结对长度结合 占几份<span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">200</span>px <span class="token number">2</span>fr <span class="token number">1</span>fr<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="区域的划分方式"><a href="#区域的划分方式" class="headerlink" title="区域的划分方式"></a><strong>区域</strong>的划分方式</h3><pre class=" language-css"><code class="language-css">// <span class="token number">1.</span>指定网格线开始和结束  常用<span class="token number">.</span>item-<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// 也可以使用span关键字<span class="token number">.</span>item-<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// 也可以直接用grid-area一次性分配好区域，可以说是grid-column和grid-row的结合体<span class="token number">.</span>item-<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">1</span> / <span class="token number">3</span> / <span class="token number">3</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// <span class="token number">2.</span>在容器中直接划分好区域并命名<span class="token number">.</span>container &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">"header header header"</span>                       <span class="token string">"main main sidebar"</span>                       <span class="token string">"footer footer footer"</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// 项目中指定区域名<span class="token number">.</span>item-<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> header<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="最常用"><a href="#最常用" class="headerlink" title="最常用"></a>最常用</h3><pre class=" language-css"><code class="language-css">// 响应式布局  每列的宽度在<span class="token number">200</span>px到<span class="token number">1</span>fr之间（总宽度大于<span class="token number">200</span>px时每行尽可能多的放下更多子项目）<span class="token number">.</span>container &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill,<span class="token function">minmax</span><span class="token punctuation">(</span><span class="token number">200</span>px,<span class="token number">1</span>fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// <span class="token number">12</span>等宽法+区域划分<span class="token number">.</span>container &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>        <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">12</span>, <span class="token number">1</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">1</span>fr <span class="token number">4</span>fr <span class="token number">1</span>fr<span class="token punctuation">;</span>    <span class="token property">grid-template-areas</span><span class="token punctuation">:</span>        <span class="token string">"h h h h h h h h h h h h"</span>        <span class="token string">"m m c c c c c c c c c c"</span>        <span class="token string">"f f f f f f f f f f f f"</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>header &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">grid-area</span><span class="token punctuation">:</span> h<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> steelblue<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>menu &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">grid-area</span><span class="token punctuation">:</span> m<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>content &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">grid-area</span><span class="token punctuation">:</span> c<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>footer &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>   <span class="token property">grid-area</span><span class="token punctuation">:</span> f<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="multi-columns布局"><a href="#multi-columns布局" class="headerlink" title="multi-columns布局"></a>multi-columns布局</h2><p>  使用多栏布局可以将<strong>一个元素中的内容分为两栏或多栏显示</strong>，并且<strong>确保各栏中内容底部对齐</strong></p><p>以上的各个属性，在<strong>Firefox</strong>浏览器中要添加前缀 “**-moz-<strong>”;；在</strong>Safair、chrome或Opera<strong>浏览器中需要添加前缀 “</strong>-webkit-<strong>”; 在</strong>IE**浏览器中，不需要添加浏览器供应商前缀；</p><h2 id="box布局"><a href="#box布局" class="headerlink" title="box布局"></a>box布局</h2><p>同样可以解决页面布局时底面不对齐的问题；</p><p>通过<strong>box属性</strong>来使用盒布局，在Firefox浏览器中，需要书写成：“**-moz-box<strong>”，在Safari、Chrome、Opera浏览器中需要书写成：“</strong>-webkit-box**”；</p><h2 id="box布局与multi-columns布局的区别："><a href="#box布局与multi-columns布局的区别：" class="headerlink" title="box布局与multi-columns布局的区别："></a><strong>box布局与multi-columns布局的区别：</strong></h2><ol><li><p>使用多栏布局时，各个栏宽度必须是相等的，在指定每栏宽度时，只能为所有的栏指定一个统一的宽度，栏与栏之间的宽度不可能是不一样的；</p></li><li><p>使用多栏布局，不可能具体指定什么栏中显示什么内容；</p><p> 因此，多栏布局适合用于在显示文章内容的时候，不适合安排整个网页中各个元素组成的网页结构。</p></li></ol><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p>只要使用<strong>flex属性</strong>就可以使盒布局变为弹性布局了，即，元素的高度与宽度具有自适应性；</p><p><strong>使用盒布局的时候，元素的高度与宽度具有自适应</strong>；即，元素的高度与宽度根据排列方向的改变而改变；</p><p>当为<strong>横向</strong>时：宽度与元素中的内容相等，<strong>高度等于容器高度</strong>；</p><p>当为<strong>纵向</strong>时：高度为元素内容的高度，<strong>宽度为容器的宽度</strong>；</p><h2 id="对多个元素使用flex属性"><a href="#对多个元素使用flex属性" class="headerlink" title="对多个元素使用flex属性"></a>对多个元素使用flex属性</h2><pre class=" language-css"><code class="language-css">#container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* flex属性 变成弹性盒布局 */</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">5</span>px blue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 排列方向 */</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span>column<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* flex-direction:row; */</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#text-a&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 显示顺序 */</span>    <span class="token property">order</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#text-b&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">order</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#text-c&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">order</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> limegreen<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#text-a, #text-b, #text-c&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.5</span>em<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><strong>a、b、c三个div中的flex值分别为1,1,2，其实就是相当于把空白部分分成4份，a、b各占1份，c占2份；</strong></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>columns多布局-css</title>
      <link href="2020/11/14/columns-css/"/>
      <url>2020/11/14/columns-css/</url>
      
        <content type="html"><![CDATA[<h1 id="columns-布局"><a href="#columns-布局" class="headerlink" title="columns 布局"></a>columns 布局</h1><h1 id="multi-columns-布局"><a href="#multi-columns-布局" class="headerlink" title="multi-columns 布局"></a>multi-columns <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/columns">布局</a></h1><p>允许简单地定义多列文本</p><h3 id="基本声明"><a href="#基本声明" class="headerlink" title="基本声明"></a>基本声明</h3><pre class=" language-css"><code class="language-css"><span class="token property">columns</span><span class="token punctuation">:</span> column-width | column-count<span class="token punctuation">;</span>column-gap <span class="token comment" spellcheck="true">/*栏之间的间隔*/</span>column-rule <span class="token comment" spellcheck="true">/*分割线 与border的写法几乎一毛一样*/</span><span class="token comment" spellcheck="true">/*column-rule分开写是这样的：*/</span>column-rule-width <span class="token comment" spellcheck="true">/*分割线宽*/</span>column-rule-style <span class="token comment" spellcheck="true">/*分割线样式*/</span>column-rule-color <span class="token comment" spellcheck="true">/*分割线颜色*/</span></code></pre><p><img src="/2020/11/14/columns-css/1605332729263.png"></p><p>以上的各个属性，在<strong>Firefox</strong>浏览器中要添加前缀 “**-moz-**”;</p><p>在<strong>Safair、chrome或Opera</strong>浏览器中需要添加前缀 “**-webkit-**”;</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Media Queries-css</title>
      <link href="2020/11/14/Media-Queries-css/"/>
      <url>2020/11/14/Media-Queries-css/</url>
      
        <content type="html"><![CDATA[<h1 id="Media-Query-css"><a href="#Media-Query-css" class="headerlink" title="Media Query-css"></a>Media Query-css</h1><p>目的：因为不同的设备，萤幕宽度不同，显示的要求不一样</p><p>需要灵活设置</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 525px<span class="token punctuation">)</span>&amp;#123<span class="token punctuation">;</span></span>  <span class="token number">.</span>Gool&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*background-color: orange;*/</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">3%</span><span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">3%</span><span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      #copyright&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">3%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@media</span>  <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 526px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 991px<span class="token punctuation">)</span>&amp;#123<span class="token punctuation">;</span></span>  <span class="token number">.</span>Gool&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>@media (min-width:320px) and (max-width:525px)<br>表示在萤幕宽度320px~525px之间执行</p><p>@media (min-width:526px) and (max-width:991px)<br>表示在萤幕宽度526px~991px之间执行</p><ul><li>and：代表与的意思,一般用and来连接媒体类型个媒体属性<pre><code>   only：和浏览器兼容性有关。</code></pre></li><li> 老版本的浏览器只支持媒体类型，不支持带媒体属性的查</li><li>@media screen{}<pre><code>   @media only&#123;&#125;   （,）：代表或的意思   not:取反</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图上字下的方法-css</title>
      <link href="2020/11/13/%E5%9B%BE%E4%B8%8A%E5%AD%97%E4%B8%8B%E7%9A%84%E6%96%B9%E6%B3%95-css/"/>
      <url>2020/11/13/%E5%9B%BE%E4%B8%8A%E5%AD%97%E4%B8%8B%E7%9A%84%E6%96%B9%E6%B3%95-css/</url>
      
        <content type="html"><![CDATA[<h1 id="图上字下的方法-css"><a href="#图上字下的方法-css" class="headerlink" title="图上字下的方法-css"></a><strong>图上字下的方法-css</strong></h1><h2 id="1-flex布局-使用了background-img-link"><a href="#1-flex布局-使用了background-img-link" class="headerlink" title="1.flex布局 使用了background img link"></a>1.flex布局 使用了background img link</h2><h2 id="2-表格"><a href="#2-表格" class="headerlink" title="2.表格"></a>2.表格</h2><h2 id="3-img块与文字块（文本块存放在div中）放在同一个div-中，然后设置他们之间的位置-或者-img块与文字块（文字块采用span-a标签显示）放在同一个div"><a href="#3-img块与文字块（文本块存放在div中）放在同一个div-中，然后设置他们之间的位置-或者-img块与文字块（文字块采用span-a标签显示）放在同一个div" class="headerlink" title="3.img块与文字块（文本块存放在div中）放在同一个div 中，然后设置他们之间的位置 或者 img块与文字块（文字块采用span/a标签显示）放在同一个div"></a>3.img块与文字块（文本块存放在div中）放在同一个div 中，然后设置他们之间的位置 <strong>或者</strong> img块与文字块（文字块采用span/a标签显示）放在同一个div</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            *&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                 <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">100</span>px auto<span class="token punctuation">;</span>                <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap > <span class="token number">.</span>item&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> whitesmoke<span class="token punctuation">;</span>                <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>                <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>                <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap > <span class="token number">.</span>item > <span class="token property">a</span><span class="token punctuation">:</span>before&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">86</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">86</span>px<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap > <span class="token number">.</span><span class="token property">item</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> ><span class="token property">a</span><span class="token punctuation">:</span>before&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(./img/02.png)</span> no-repeat<span class="token punctuation">;</span>                <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span> auto            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>               <span class="token number">.</span>list-img&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30</span>vw<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*viewport change in %*/</span>                <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            li&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>下面是用div 但是加入了flex布局 使用了background img link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/01.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>img+div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>bgimg+a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/03.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这个为div+flex<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>下面的使用表格实现的 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-img<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/04.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    随着视窗大小变化图片大小                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/05.png<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">  <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    固定大小                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">2000</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>或者将img块与文字块（文本块存放在div中）放在同一个div 中，然后设置他们之间的位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/07.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span> <span class="token property">z-index</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下文标题 下文详细解释<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><a href="/demo/cssdemo1/cssdemo1.html">链接到demo1</a></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex-grow vs flex-shrink vs flex-basis</title>
      <link href="2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/"/>
      <url>2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/</url>
      
        <content type="html"><![CDATA[<h2 id="Flex-Layout-Reference"><a href="#Flex-Layout-Reference" class="headerlink" title="Flex Layout Reference"></a>Flex Layout Reference</h2><h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><p> <strong>flex-basis</strong>  ，主要成分，flex-basis 預設值爲 auto，表示其預設分配到的空間，與 width 很像，但優先程度較高。</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605267508063.png"></p><h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><p><strong>flex-grow</strong>，扩大，扩展，增加,这就代表当父元素的宽度大于子元素宽度之和时，并且父元素有剩余，这时，flex-grow就会说我要成长，我要长大，怎么样才能成长呢，当然是分享父元素的空间了。</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605267618433.png"></p><p>两个状况： 1大家一起分空间，2就是剩余会被大哥分掉</p><p>container 寬度爲 1000px，每個 box 寬度爲 100px。粉色綠色藍色方塊皆爲 100px，剩餘區域爲 700px。</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605774181775.png"></p><p>接著設定粉色盒子 <code>flex-grow:1;</code> ，表示剩餘空間 700px，分爲 1 份，皆分配給粉色盒子，則粉色盒子寬度爲 800px。效果如下：</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605774210372.png"></p><p>接著將綠色盒子也設定 <code>flex-grow:1;</code> ，表示剩餘空間 700px，分爲 2 份，分配給粉色盒子及綠色盒子各一份，各分 350px，粉色盒子及綠色盒子寬度皆爲 450px。效果如下：</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605774235983.png"></p><h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><p><strong>flex-shrink</strong>， 收缩，flex-shrink 是 flex-grow 的反向，有剩餘空間，就表示也有不夠空間的時候。flex-shrink 表示空間不夠時的壓縮比例。預設值爲 1。表示大家被壓縮的比例相同。</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605267974102.png"></p><p>container 寬度維持 1000px，每個 box 寬度改爲 400px，總共 1200px，超出 container 寬度。則每個盒子因爲 flex-shrink 預設爲 1 的關係，不夠的空間分均分壓縮三個盒子。效果如下(爲了可視化 container，設置紅色框線)：</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605774424023.png"></p><p>接著試試看把盒子皆設定 flex-shrink 爲 0，不要有任何壓縮，則三個盒子會爆出 container ，這也是 flex 爲了預防爆版，預設值爲 1 的用意，效果如下：</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605774443655.png"></p><p>接著試試看粉色盒子 flex-shrink 爲 1，其他盒子爲 0，則不夠的部分只會壓縮粉色盒子，效果如下：</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605774467911.png"></p><ul><li>flex-grow: 0.2 表示希望获得20%的蛋糕；</li><li>flex-grow: 1 表示希望获得100%整个蛋糕（有点过分啊，不考虑其他兄弟）；</li><li>flex-grow: 2 表示希望获得200%的蛋糕（这是明抢啊，态度很明确）。</li></ul><h2 id="赋值计算"><a href="#赋值计算" class="headerlink" title="赋值计算"></a>赋值计算</h2><blockquote><p>flex-basis（默认值为auto）<br>flex-grow（默认值为0）<br>    可用空间 = (容器大小 - 所有相邻项目flex-basis的总和)<br>    可扩展空间 = (可用空间/所有相邻项目flex-grow的总和)<br>    每项伸缩大小 = (伸缩基准值flex-basis + (可扩展空间 x flex-grow值))<br>flex-shrink（默认值为1）<br>    –.计算收缩因子与基准值乘的总和<br>      var a = 每一项flex-shrink<em>flex-basis之和<br>     –.计算收缩因数<br>      收缩因数=（项目的收缩因子</em>项目基准值）/第一步计算总和<br>       var b =  (flex-shrink*flex-basis)/a<br>     –.移除空间的计算<br>       移除空间= 项目收缩因数 x 负溢出的空间<br>        var c =  b * 溢出的空间    </p></blockquote><h2 id="选择判断"><a href="#选择判断" class="headerlink" title="选择判断"></a>选择判断</h2><p>当元素的排列方向为<strong>横</strong>向：</p><p>​    元素的总宽度小于容器的宽度，使用flex-grow属性；</p><p>​    元素的总宽度大于容器的宽度，使用flex-shrink属性；</p><p>当元素排列的方向为<strong>纵</strong>向：</p><p>​    元素的总高度小于容器的高度，使用flex-grow属性；</p><p>​    元素的总高度小于容器的高度，使用flex-shrink属性；</p><h2 id="Demo："><a href="#Demo：" class="headerlink" title="Demo："></a>Demo：</h2><p><a href="/demo/quiz/html/flex.html">链接到demo1</a></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layout-flex</title>
      <link href="2020/11/13/Layout-flex/"/>
      <url>2020/11/13/Layout-flex/</url>
      
        <content type="html"><![CDATA[<h1 id="Layout-Flex"><a href="#Layout-Flex" class="headerlink" title="Layout - Flex"></a><strong>Layout - Flex</strong></h1><p><img src="/2020/11/13/Layout-flex/1605245444171.png"></p><p><strong>盒子模型</strong>   —   依赖 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><code>display</code></a> 属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"><code>position</code></a>属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float"><code>float</code></a>属性</p><p><strong>Flex 布局</strong>   —   flex属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code> 的简写 </p><p><strong>Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效</strong></p><p><img src="/2020/11/13/Layout-flex/1605247566336.png"></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>horizontal | vertical<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*-webkit-box-orient控制主轴和侧轴分别是哪一根 Safari 6.1 (及更新浏览器) 通过 -webkit-flex 属性支持*/</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row | row-reverse | column | column-reverse<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*主轴的方向*/</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap | wrap | wrap-reverse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 挤一行 换行 反向走*/</span>  <span class="token property">flex-flow</span><span class="token punctuation">:</span> &lt;flex-direction> || &lt;flex-wrap><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*flex-direction属性和flex-wrap*/</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around | stretch<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。    align-content  https://developer.mozilla.org/en-US/docs/Web/CSS/align-content  */</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><pre class=" language-css"><code class="language-css">  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*项目在主轴上的对齐方式   左 右 中 两端&amp;间隔对等 每个两侧间隔相等*/</span></code></pre><p><img src="/2020/11/13/Layout-flex/1605776747612.png"></p><pre class=" language-css"><code class="language-css">  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*项目对其方式 上下中 第一行文字的基线对齐 拉伸（默认）*/</span></code></pre><p><img src="/2020/11/13/Layout-flex/1605776777298.png"></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>item &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">order</span><span class="token punctuation">:</span> &lt;integer><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*项目的排列顺序。数值越小，排列越靠前，默认为0。*/</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> number|initial|inherit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*弹性盒子的扩展比率*/</span>  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* default 1 在所有因子相加之后计算比率来进行空间收缩*/</span>  flex-basis / <span class="token property">flex-grow</span><span class="token punctuation">:</span> &lt;width> | sizing keywords | content | auto<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* default auto */</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> auto | flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性*/</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><code>max-content</code>: 尺寸值会变得尽可能大, 没有自动换行的机会. 如果<code>flex</code>容器<strong>太窄</strong>， 它就会<strong>溢出</strong>其自身的盒子。</p><p><code>min-content</code>: 文本已尽可能抓住机会来自动换行, 变得尽可能小且没有溢出。</p><p><img src="/2020/11/13/Layout-flex/1605774609826.png"></p><p>注意：</p><p>当元素的排列方向为<strong>横</strong>向：</p><p>​    元素的总宽度小于容器的宽度，使用flex-grow属性；</p><p>​    元素的总宽度大于容器的宽度，使用flex-shrink属性；</p><p>当元素排列的方向为<strong>纵</strong>向：</p><p>​    元素的总高度小于容器的高度，使用flex-grow属性；</p><p>​    元素的总高度小于容器的高度，使用flex-shrink属性；</p><h2 id="Flex-Layout-Reference"><a href="#Flex-Layout-Reference" class="headerlink" title="Flex Layout Reference"></a>Flex Layout Reference</h2><p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout</a></p><h1 id="Flexbox-demo"><a href="#Flexbox-demo" class="headerlink" title="Flexbox  demo"></a>Flexbox  demo</h1><p>DEMO地址:<br><a href="https://lincenying.github.io/vue2-flex/">https://lincenying.github.io/vue2-flex/</a></p><p>仓库地址:<br><a href="https://github.com/lincenying/vue2-flex">https://github.com/lincenying/vue2-flex</a></p><h1 id="Flexbox-布局demo"><a href="#Flexbox-布局demo" class="headerlink" title="Flexbox 布局demo"></a>Flexbox 布局demo</h1><p>仓库地址:<br><a href="https://github.com/philipwalton/solved-by-flexbox">https://github.com/philipwalton/solved-by-flexbox</a></p><p>DEMO地址:<br><a href="https://philipwalton.github.io/solved-by-flexbox/">https://philipwalton.github.io/solved-by-flexbox/</a></p><p>该实例列举 6 中常见的布局方式, 包括:</p><ol><li>网格系统<br><a href="https://philipwalton.github.io/solved-by-flexbox/demos/grids/">https://philipwalton.github.io/solved-by-flexbox/demos/grids/</a></li><li>圣杯布局<br><a href="https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/">https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/</a></li><li>input 拓展<br><a href="https://philipwalton.github.io/solved-by-flexbox/demos/input-add-ons/">https://philipwalton.github.io/solved-by-flexbox/demos/input-add-ons/</a></li><li>图文排版<br><a href="https://philipwalton.github.io/solved-by-flexbox/demos/media-object/">https://philipwalton.github.io/solved-by-flexbox/demos/media-object/</a></li><li>固定底部<br><a href="https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/">https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/</a></li><li>绝对居中<br><a href="https://philipwalton.github.io/solved-by-flexbox/demos/vertical-centering/">https://philipwalton.github.io/solved-by-flexbox/demos/vertical-centering/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Text css</title>
      <link href="2020/11/12/Text-css/"/>
      <url>2020/11/12/Text-css/</url>
      
        <content type="html"><![CDATA[<h1 id="文字变化"><a href="#文字变化" class="headerlink" title="文字变化"></a>文字变化</h1><p>文字阴影：text-shadow</p><p>文字模糊： transition: 1s ; + text-shadow</p><p>//transition的用法很多 只要是变更原先位置的基本都有关</p><p>文字方向： direction &amp; unicode-bidi</p><p>文字多出边框省略：text-overflow:ellipsis;</p><p>line-height</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Image css</title>
      <link href="2020/11/12/Image-css/"/>
      <url>2020/11/12/Image-css/</url>
      
        <content type="html"><![CDATA[<h1 id="Image-in-CSS"><a href="#Image-in-CSS" class="headerlink" title="Image in CSS"></a><strong>Image in CSS</strong></h1><h2 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h2><p>background: url(img/avatar.jpg) no-repeat;</p><p>background-size:100% 100% ;</p><p> filter: blur(10px);</p><p>景深+移动（例子 蓝天白云，远近移动)</p><p>变形，移位： transform（2D，3D）， translate，animation</p><p>倒影：-webkit-box-reflect:</p><p>颜色渐变：linear-gradient</p><p>动态动画控制：@keyframes animation</p><p>​               </p><h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><h3 id="rainbow变色块"><a href="#rainbow变色块" class="headerlink" title="rainbow变色块"></a>rainbow变色块</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#rect &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">animation-name</span><span class="token punctuation">:</span>rainbow<span class="token punctuation">;</span><span class="token property">animation-duration</span><span class="token punctuation">:</span><span class="token number">4</span>s<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow &amp;#123<span class="token punctuation">;</span></span><span class="token number">0%</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">50%</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">100%</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h2><p>Image css: <a href="https://www.w3schools.com/howto/howto_js_slideshow.asp">https://www.w3schools.com/howto/howto_js_slideshow.asp</a></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水平居中/centering</title>
      <link href="2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/"/>
      <url>2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/</url>
      
        <content type="html"><![CDATA[<h1 id="纯CSS七大居中方法"><a href="#纯CSS七大居中方法" class="headerlink" title="纯CSS七大居中方法"></a>纯CSS七大居中方法</h1><h3 id="1-上下左右定位-margin居中法"><a href="#1-上下左右定位-margin居中法" class="headerlink" title="1.上下左右定位+margin居中法"></a>1.上下左右定位+margin居中法</h3><pre class=" language-css"><code class="language-css">父元素：<span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>子元素：<span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>//或者子元素： <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> display：block；</code></pre><pre class=" language-css"><code class="language-css">        nav&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>             <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>vw <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #title&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>              <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>          &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> </code></pre><h3 id="2-50-定位-margin居中法"><a href="#2-50-定位-margin居中法" class="headerlink" title="2.50%定位+margin居中法"></a>2.50%定位+margin居中法</h3><pre><code>父元素：position: relative;子元素：position: absolute; left: 50%; top: 50%; margin: -200px 0 0 -200px;</code></pre><p>注：200px须为该子元素的宽高的一半。例如该子元素宽为100px，高为50px，那么margin取值为-25px 0 0 -50px。该方法缺点是须确定子元素宽高。</p><h3 id="3-table-cell居中法"><a href="#3-table-cell居中法" class="headerlink" title="3.table-cell居中法"></a>3.table-cell居中法</h3><pre><code>父元素：display: table-cell; text-align: center; vertical-align: middle;子元素：display: inline-block;</code></pre><h3 id="4-50-定位-translate居中法（此方法很好用）"><a href="#4-50-定位-translate居中法（此方法很好用）" class="headerlink" title="4.50%定位+translate居中法（此方法很好用）"></a>4.50%定位+translate居中法（此方法很好用）</h3><pre><code>父元素：position: relative;子元素：position: absolute; left: 50%; top: 50%; transform: translate(-50%,-50%);</code></pre><h3 id="5-Flexbox-margin居中法"><a href="#5-Flexbox-margin居中法" class="headerlink" title="5.Flexbox+margin居中法"></a>5.Flexbox+margin居中法</h3><pre><code>父元素：display: flex;子元素：margin: auto;</code></pre><p>6.Flexbox居中法</p><pre><code>父元素：display: flex; justify-content: center; align-items: center;</code></pre><p>注：该方法使用了Flexbox弹性布局，移动端兼容性也存在很大问题。</p><h3 id="7-line-height居中法"><a href="#7-line-height居中法" class="headerlink" title="7.line-height居中法"></a>7.line-height居中法</h3><pre><code>父元素：text-align: center; line-height:600px; font-size: 0;子元素：display: inline-block; vertical-align: middle;</code></pre><p>注：600px必须为父元素的高度，这里还需注意的一点是font-size需设为零，若未写该属性将导致元素并不能精确垂直居中。该方法即为我面试时所答的方法，缺点很明显，父元素高度须确定。</p><h3 id="8-利用flex全页面居中"><a href="#8-利用flex全页面居中" class="headerlink" title="8.利用flex全页面居中"></a>8.利用flex全页面居中</h3><p><img src="/2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/1605667496243.png"></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>box &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Vertical Centering*/</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* align-self: center;  want specific flex items to be centered vertically*/</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>box div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&lt;div class=<span class="token string">"box"</span>>  &lt;div>&lt;/div>&lt;/div></code></pre><h3 id="9-对于图片以及文字居中"><a href="#9-对于图片以及文字居中" class="headerlink" title="9.对于图片以及文字居中"></a>9.对于图片以及文字居中</h3><h4 id="Center-Vertically"><a href="#Center-Vertically" class="headerlink" title="Center Vertically"></a>Center Vertically</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token number">.</span>center &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I am vertically centered.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/1605106109638.png"></p><h4 id="center-both-vertically-and-horizontally"><a href="#center-both-vertically-and-horizontally" class="headerlink" title="center both vertically and horizontally"></a>center both vertically and horizontally</h4><pre class=" language-css"><code class="language-css"><span class="token number">.</span>center &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">70</span>px <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">3</span>px solid green<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>或者</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>center &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">3</span>px solid green<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* If the text has multiple lines, add the following: */</span><span class="token number">.</span>center p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/1605106167637.png"></p><h3 id="10-对于有多个div状态的保留块元素的排版，父元素居中"><a href="#10-对于有多个div状态的保留块元素的排版，父元素居中" class="headerlink" title="10.对于有多个div状态的保留块元素的排版，父元素居中"></a>10.对于有多个div状态的保留块元素的排版，父元素居中</h3><pre><code>//父元素position: absolute;    left: 50%;    transform: translate(-50%,50%);</code></pre><p><img src="/2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/1605688618077.png"></p><p>或者是（这种的话 多个div不好弄 代码很累赘）</p><p><img src="/2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/1605688640436.png"></p><pre class=" language-html"><code class="language-html"> .box <span class="token entity" title="&#123;">&amp;#123;</span>            display: flex;            justify-content: space-between;          <span class="token entity" title="&#125;">&amp;#125;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>One<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Three          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>has          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>extra          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>text      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>other trick：</p><p><a href="https://www.digitalocean.com/community/tutorials/css-centering-using-flexbox">https://www.digitalocean.com/community/tutorials/css-centering-using-flexbox</a></p><p><a href="https://www.w3.org/Style/Examples/007/center.en.html#text">https://www.w3.org/Style/Examples/007/center.en.html#text</a></p><p><a href="https://www.w3schools.com/css/css_align.asp">https://www.w3schools.com/css/css_align.asp</a> </p><p>Reference:</p><ol><li><a href="https://developer.aliyun.com/article/635759?spm=a2c6h.14164896.0.0.54cf667ajTM2fR">https://developer.aliyun.com/article/635759?spm=a2c6h.14164896.0.0.54cf667ajTM2fR</a></li><li><a href="https://developer.aliyun.com/article/591138?spm=a2c6h.14164896.0.0.54cf667ajTM2fR">https://developer.aliyun.com/article/591138?spm=a2c6h.14164896.0.0.54cf667ajTM2fR</a></li><li><a href="https://www.w3schools.com/css/css_align.asp">https://www.w3schools.com/css/css_align.asp</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tools for building web</title>
      <link href="2020/11/11/tools-for-building-web/"/>
      <url>2020/11/11/tools-for-building-web/</url>
      
        <content type="html"><![CDATA[<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><ul><li><p>can i use ： <a href="https://caniuse.com/">https://caniuse.com/</a>  (check support table for htmll css )</p></li><li><p>dev web doc ：  <a href="https://developer.mozilla.org/en-US/">https://developer.mozilla.org/en-US/</a></p></li><li><p>bootstrap ： <a href="https://v3.bootcss.com/css/">https://v3.bootcss.com/css/</a></p></li><li><p>css trick ： <a href="https://css-tricks.com/guides/">https://css-tricks.com/guides/</a></p></li><li><p>Free icon：<a href="https://www.flaticon.com/search?word=car">https://www.flaticon.com/search?word=car</a></p></li><li><p>hover css：<a href="https://ianlunn.github.io/Hover/">https://ianlunn.github.io/Hover/</a></p></li><li><p>w3school : <a href="https://www.w3schools.com/howto/">https://www.w3schools.com/howto/</a></p></li><li><p>regular expression : </p><p><a href="https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24">https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24</a></p><p><a href="https://regexr.com/">https://regexr.com/</a></p></li><li><p>在线工具： <a href="https://c.runoob.com/">https://c.runoob.com/</a></p></li></ul><h2 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h2><ul><li>木之多   <a href="https://www.shuzhiduo.com/">https://www.shuzhiduo.com/</a></li><li>大佬  ： <a href="https://www.zhangxinxu.com/">https://www.zhangxinxu.com/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>float in CSS</title>
      <link href="2020/11/10/float-in-CSS/"/>
      <url>2020/11/10/float-in-CSS/</url>
      
        <content type="html"><![CDATA[<h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><p>float属性设计的初衷：仅仅是让文字像流水一样环绕浮动元素</p><ul><li>float:  left, right, none, inherit</li><li>將原本上下排列的元素改成左右排列</li><li>要用margin保持間距，不然會黏再一起</li></ul><p><img src="/2020/11/10/float-in-CSS/1605005179649.png"></p><p><img src="/2020/11/10/float-in-CSS/1605005159222.png"></p><p>但是注意float 在网页中的布局影响，例子如下： </p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            *&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #up&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>//使用图一；不使用图二                <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #down&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> upupupup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>down<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> downdowndown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/10/float-in-CSS/1605090591386.png"></p><p><img src="/2020/11/10/float-in-CSS/1605090620892.png"></p><h2 id="Clear-清浮动"><a href="#Clear-清浮动" class="headerlink" title="Clear ( 清浮动 )"></a>Clear ( 清浮动 )</h2><ul><li><p>clear:left应该是”清除左浮动影响”<br>官方对clear属性的解释是：”元素盒子的边不能和<strong>前面的</strong>浮动元素相邻”。</p></li><li><p>clear:  left, right, none, inherit</p></li><li><p>float會造成文繞圖，clear可以讓清掉不需要文繞圖的地方。</p><p><img src="/2020/11/10/float-in-CSS/1605005686175.png"></p></li></ul><h2 id="The-clearfix-Hack（-清浮动-）"><a href="#The-clearfix-Hack（-清浮动-）" class="headerlink" title="The clearfix Hack（ 清浮动 ）"></a>The clearfix Hack（ 清浮动 ）</h2><pre class=" language-css"><code class="language-css"><span class="token number">.</span><span class="token property">clearfix</span><span class="token punctuation">:</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/10/float-in-CSS/1605008030674.png"></p><p>Reference:   <a href="https://www.w3schools.com/css/css_float.asp">https://www.w3schools.com/css/css_float.asp</a></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>padding margin in CSS</title>
      <link href="2020/11/10/padding-margin-in-CSS/"/>
      <url>2020/11/10/padding-margin-in-CSS/</url>
      
        <content type="html"><![CDATA[<h2 id="Padding-amp-Margin-基础"><a href="#Padding-amp-Margin-基础" class="headerlink" title="Padding &amp; Margin 基础"></a>Padding &amp; Margin 基础</h2><p>Padding-bottom &amp; Margin-bottom 可以控制伪等高</p><p><strong>不要对float元素指定margin和padding属性(能够在float元素内部嵌套一个div来设置margin和padding)。</strong></p><p>padding / margin : 上，右，下，左</p><pre class=" language-css"><code class="language-css"><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">25</span>px <span class="token number">50</span>px <span class="token number">75</span>px<span class="token punctuation">;</span>//上 左右 下</code></pre><p><img src="/2020/11/10/padding-margin-in-CSS/1605082360115.png"></p><h2 id="padding-的百分比值"><a href="#padding-的百分比值" class="headerlink" title="padding 的百分比值"></a>padding 的百分比值</h2><ul><li>和 margin 属性不同， padding 属性是不支持负值的；</li><li>padding 支持百分比值，<strong>padding 百分比值无论是left/right 方向还是top/bottom方向均是相对于==宽度==计算的！</strong></li></ul><h2 id="margin-的百分比值"><a href="#margin-的百分比值" class="headerlink" title="margin 的百分比值"></a>margin 的百分比值</h2><ul><li>margin 的百分比值无论是水平方向还是垂直方向都是相对于父元素==<strong>宽度</strong>==计算</li></ul><h2 id="灵活调整位置"><a href="#灵活调整位置" class="headerlink" title="灵活调整位置"></a>灵活调整位置</h2><p><strong>移动端变化，灵活调整视图</strong></p><ul><li>使用视区宽度单位<code>vw</code> ( Relative to 1% of the width of the viewport* ) ，如下：</li></ul><pre class=" language-css"><code class="language-css"><span class="token number">.</span>banner &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">15.15</span>vw<span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>如果对兼容性要求不是很高，使用<code>vw</code>也是一个不错的做法，至少理解起来要更轻松一点。</p><ul><li>但是，如果我们的图片不是通栏，而是需要离左右各<code>1rem</code>的距离，此时，我们的CSS代码就要啰嗦点了，想要保持完美比例，就使用借助CSS3 <code>calc()</code>计算：</li></ul><pre><code>.banner &#123;    height: calc(0.1515 * (100vw - 2rem));    background-size: cover;&#125;</code></pre><ul><li> 使用百分比<code>padding</code>，如下：</li></ul><pre class=" language-css"><code class="language-css"><span class="token number">.</span>banner &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15.15%</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>此时无论图片的外部元素怎么变动，比例都是恒定不变的。</p><h2 id="百分比padding与宽度自适应图片布局"><a href="#百分比padding与宽度自适应图片布局" class="headerlink" title="百分比padding与宽度自适应图片布局"></a>百分比padding与宽度自适应图片布局</h2><p>但是有时候我们的图片是不方便作为背景图呈现的，而是内联的<code>&lt;img&gt;</code>，百分比<code>padding</code>也是可以轻松应对的，求套路是比较固定的，图片元素外面需要一个固定比例的容器元素，例如下面的HTML结构：</p><pre class=" language-css"><code class="language-css">&lt;div class=<span class="token string">"banner"</span>>  &lt;img src=<span class="token string">"banner.jpg"</span>>&lt;/div></code></pre><p><code>.banner</code>元素同样负责控制比例，然后图片填充<code>.banner</code>元素即可，CSS代码如下：</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>banner &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15.15%</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>banner > img &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>例子1：<a href="https://www.zhangxinxu.com/study/201708/percent-padding-auto-layout.html">https://www.zhangxinxu.com/study/201708/percent-padding-auto-layout.html</a></p><p>例子2：<a href="https://segmentfault.com/a/1190000004231995">https://segmentfault.com/a/1190000004231995</a></p><h2 id="网页布局的margin-合并与BFC"><a href="#网页布局的margin-合并与BFC" class="headerlink" title="网页布局的margin 合并与BFC"></a>网页布局的margin 合并与BFC</h2><p>基本使用场景：：</p><pre class=" language-html"><code class="language-html">.box <span class="token entity" title="&#123;">&amp;#123;</span>width:210px;border: 1px solid #000;float: left;<span class="token entity" title="&#125;">&amp;#125;</span>.img <span class="token entity" title="&#123;">&amp;#123;</span>width: 100px;height: 100px;background: #696;float: left;<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>image<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>信息信息信息信息信息信息信息信息信息信息信息信<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/10/padding-margin-in-CSS/1605081607514.png"></p><p>做伪等高布局</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            *&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">750</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>                <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>//超出border的padding直接隐藏            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap <span class="token number">.</span>left&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>                <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>//撑大内部                <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">1000</span>px<span class="token punctuation">;</span>//调整boeder            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap <span class="token number">.</span>right&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>                <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>                <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">1000</span>px<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            //下面的是为了调整块状浮动                         <span class="token number">.</span>clearfix&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            <span class="token number">.</span><span class="token property">clearfix</span><span class="token punctuation">:</span>after&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>                <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                 left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/10/padding-margin-in-CSS/1605095493973.png"></p><p><strong>此时我们可以为P元素的内容建立一个BFC，让其内容消除对外界浮动元素的影响。根据上文所知，只要给info元素添加<code>overflow:hidden;</code>即可为其内容建立新的BFC。</strong></p><p><img src="/2020/11/10/padding-margin-in-CSS/1605081934208.png"></p><p><img src="/2020/11/10/padding-margin-in-CSS/1605084216319.png"></p><ol><li>只有垂直,水平边距永远不会重合。</li><li>在规范文档中，2个或以上的块级盒模型相邻的垂直margin会重叠。最终的margin值计算方法如下：<br>a、全部都为正值，取最大者；<br>b、不全是正值，则都取绝对值，然后用正值减去最大值；<br>c、没有正值，则都取绝对值，然后用0减去最大值。</li></ol><p><strong>防止外边距重叠解决方案：</strong></p><ol><li>外层元素padding代替</li><li>内层元素透明边框 border:1px solid transparent;</li><li>内层元素绝对定位 postion:absolute:</li><li>外层元素 overflow:hidden;</li><li>内层元素 加float:left;或display:inline-block;</li><li>内层元素padding:1px;</li></ol><p><strong>具体讲解：</strong></p><p><img src="/2020/11/10/padding-margin-in-CSS/1605082233984.png"></p><p>上面的图中我们可以看到，我们为红色块盒设置的40px的margin-top（这里我们通过相同高度的阴影来将其可视化）好像并没有对紫色块盒起作用，而且无论我们怎么修改这个margin-top值都不会影响红色块盒的位置，而只由绿色块盒的margin-bottom所决定。</p><p>也就是说，<strong>浮动的元素的border-top会紧贴着相应的浮动元素的margin-bottom</strong>。</p><p>通过w3c的官方规范可知，闭合浮动的块盒在margin-top上所产生的间距（clearance）的值与该块盒的margin-top之和应该足够让该块盒垂直的跨越浮动元素的margin-bottom，使闭合浮动的块盒的border-top恰好与浮动元素的块盒的margin-bottom相邻接。</p><p><strong>用上图例子中的相关值可以得出这样一个式子：r-margin-top + r-clearance = g-margin-top + g-height + g-margin-bottom</strong></p><p>PS！闭合浮动并不能使浮动元素回到原来的BFC当中！</p><p>reference：</p><ol><li><a href="https://www.zhangxinxu.com/wordpress/2017/08/css-percent-padding-image-layout/">https://www.zhangxinxu.com/wordpress/2017/08/css-percent-padding-image-layout/</a></li><li><a href="https://segmentfault.com/a/1190000004231995">https://segmentfault.com/a/1190000004231995</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas 2</title>
      <link href="2020/11/09/Canvas-2/"/>
      <url>2020/11/09/Canvas-2/</url>
      
        <content type="html"><![CDATA[<p>HTML Graphics - canvas 2</p><h2 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h2><p>save() &amp; restore()：save 和 restore 方法是用来保存和恢复 canvas 状态的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//得到画布标签</span><span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用上下文，得到一个2D画布</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画画 </span>  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用默认设置绘制一个矩形</span>  ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 保存默认状态</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'#09F'</span>       <span class="token comment" spellcheck="true">// 在原有配置基础上对颜色做改变</span>  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用新的设置绘制一个矩形</span>  ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 保存当前状态</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'#FFF'</span>       <span class="token comment" spellcheck="true">// 再次改变颜色配置</span>  ctx<span class="token punctuation">.</span>globalAlpha <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用新的配置绘制一个矩形</span>  ctx<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 重新加载之前的颜色状态</span>  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用上一次的配置绘制一个矩形</span>  ctx<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 加载默认颜色配置</span>  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用加载的配置绘制一个矩形</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/2020/11/09/Canvas-2/1604922855314.png"></p><h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><ul><li><p>translate(x, y)   </p><p>​    x 是左右偏移量，y 是上下偏移量</p><p>​    在canvas中translate是累加的</p></li><li><p>rotate(angle)</p><p>​    旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。<br>​    旋转的中心点始终是 canvas 的原点，如果要改变它，我们需要用到 translate 方法<br>​    在canvas中rotate是累加的<br>​    </p></li><li><p>scale(x, y)</p><p>scale 方法接受两个参数。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。<br>​    <strong>比 1.0 小 —- 缩小</strong></p><p>​    <strong>比 1.0 大 —- 放大</strong><br>​    在canvas中scale是累称的</p></li><li><p>变形</p><p>​    transform(m11, m12, m21, m22, dx, dy)</p></li></ul><pre><code>  m11 m21 dx  m12 m22 dy  0     0     1</code></pre><p>  用以上矩阵进行图像变换。</p><p>  setTransform()：将当前的变换矩阵设置为默认的单位矩阵，然后在单位矩阵之上运用用户指定的变换。</p><p>  resetTransform()：重置为单位矩阵</p><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p><strong>createLinearGradient(x1, y1, x2, y2)</strong> 渐变的起点 (x1,y1) 与终点 (x2,y2)</p><p><strong>createRadialGradient(x1, y1, r1, x2, y2, r2)</strong>  前三个定义一个以 (x1,y1) 为原点，半径为 r1 的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为 r2 的圆。</p><p>创建出 canvasGradient 对象后，我们就可以用 addColorStop 方法给它上色了。</p><p><strong>gradient.addColorStop(position, color)</strong> position 参数必须是一个 0.0 与 1.0 之间的数值，表示渐变中颜色所在的相对位置。例如，0.5 表示颜色会出现在正中间。</p><h2 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h2><p>fillText(text, x, y [, maxWidth]) : 在(x,y)填充指定的文本<br>    strokeText(text, x, y [, maxWidth]) : 在(x,y)绘制文本边框</p><ul><li>font = 10px sans-serif (类似css)</li><li>textAlign = start (默认) , end, left, right or center. 默认值是 start</li><li>textBaseline = top, hanging, middle, alphabetic  (默认), ideographic, bottom </li><li>direction = ltr, rtl, inherit  (默认) </li><li>文本测量：measureText()：将返回一个 TextMetrics对象的宽度、所在像素</li></ul><p><img src="/2020/11/09/Canvas-2/1604924942493.png"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myCanvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">"20px Georgia"</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">strokeText</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">"30px Verdana"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create gradient</span><span class="token keyword">var</span> gradient <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"magenta"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token string">"0.5"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Fill with gradient</span>ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> gradient<span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">strokeText</span><span class="token punctuation">(</span><span class="token string">"Big smile!"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">"Hello !"</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/2020/11/09/Canvas-2/1604925167895.png"></p><h2 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h2><p><strong>使用 Image 对象的 onload handler 来确保设置图案之前图像已经装载完毕。</strong></p><p><strong>drawImage(image, x, y)</strong> 其中 image 是 image 或者 canvas 对象，x 和 y 是其在目标 canvas 里的起始坐标。</p><p><strong>drawImage(image, x, y, width, height)</strong> width 和 height来控制当像canvas画入时应该缩放的大小。</p><p><strong>drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)</strong> 前4个是定义图像源的切片位置和大小，后4个则是定义切片的目标显示位置和大小。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 图片绘制</span>context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//img为绘制图片的dom对象,x、y为绘制的左上角坐标.</span><span class="token comment" spellcheck="true">//width, height 绘制图片的宽高</span><span class="token comment" spellcheck="true">// 图片裁剪</span>context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> swidth<span class="token punctuation">,</span> sheight<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sx, sy 裁剪的xy坐标</span><span class="token comment" spellcheck="true">// swidth, sheight 裁剪图片的xy</span></code></pre><p><strong>createPattern(image, type)</strong>  Image 可以是一个 Image 对象的引用，或者另一个 canvas 对象。Type 必须选：repeat，repeat-x，repeat-y 和 no-repeat。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建新 image 对象，用作图案</span>  <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'images/wallpaper.png'</span><span class="token punctuation">;</span>  img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建图案</span>    <span class="token keyword">var</span> ptrn <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createPattern</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token string">'repeat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> ptrn<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="图片样式"><a href="#图片样式" class="headerlink" title="图片样式"></a>图片样式</h2><p>createPattern(image, type)：该方法接受两个参数。Image 可以是一个 Image 对象的引用，或者另一个 canvas 对象。Type 必须是下面的字符串值之一：repeat，repeat-x，repeat-y 和 no-repeat。<br><strong>使用 Image 对象的 onload handler 来确保设置图案之前图像已经装载完毕。</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Image to use:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img_lamp.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lamp<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Canvas:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#d3d3d3</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Your browser does not support the HTML5 canvas tag.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>draw(<span class="token punctuation">'</span>repeat<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Repeat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>draw(<span class="token punctuation">'</span>repeat-x<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Repeat-x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>draw(<span class="token punctuation">'</span>repeat-y<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Repeat-y<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>draw(<span class="token punctuation">'</span>no-repeat<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>No-repeat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myCanvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> ctx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>width<span class="token punctuation">,</span> c<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"lamp"</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> pat <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createPattern</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> direction<span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> pat<span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="图片合成"><a href="#图片合成" class="headerlink" title="图片合成"></a>图片合成</h2><p>全局透明度的设置 globalAlpha = value 这个属性影响到 canvas 里所有图形的透明度， 有效的值范围是 0.0 （完全透明）到 1.0（完全不透明） 默认是 1.0</p><p>###覆盖合成 source:新的图像(源) destination:已经绘制过的图形(目标)</p><p><strong>ctx.globalCompositeOperation = type</strong></p><ul><li><p>source-over(默认值):源在上面,新的图像层级比较高</p></li><li><p>source-in  :只留下源与目标的重叠部分(源的那一部分)</p></li><li><p>source-out :只留下源超过目标的部分</p></li><li><p>source-atop:砍掉源溢出的部分</p></li><li><p>destination-over:目标在上面,旧的图像层级比较高</p></li><li><p>destination-in:只留下源与目标的重叠部分(目标的那一部分)</p></li><li><p>destination-out:只留下目标超过源的部分</p></li><li><p>destination-atop:砍掉目标溢出的部分</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas-1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> c   <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"canvas-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>globalCompositeOperation <span class="token operator">=</span> <span class="token string">"xor"</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Canvas-2/1604931155410.png"></p></li></ul><h2 id="绘制阴影"><a href="#绘制阴影" class="headerlink" title="绘制阴影"></a>绘制阴影</h2><ul><li>shadowOffsetX = float<br>shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。</li><li>shadowOffsetY = float<br>shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。</li><li>shadowBlur = float<br>shadowBlur 用于设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认为 0。</li><li>shadowColor = color<br>shadowColor 是标准的 CSS 颜色值，用于设定阴影颜色效果，默认是全透明的黑色。</li></ul><h2 id="ImageData-对象"><a href="#ImageData-对象" class="headerlink" title="ImageData 对象"></a>ImageData 对象</h2><p>其包含的内容有:width、height、data:Uint8ClampedArray 类型</p><p>createImageData(width, height):创建对象,颜色为黑色.</p><p>getImageData(x, y, width, height):这个方法会返回一个ImageData对象，它代表了画布区域的对象数据. x是图像数据矩形区域的左上角 x 坐标；y是图像数据矩形区域的左上角 y 坐标。</p><p>putImageData(myImageData, dx, dy):对场景进行像素数据的写入.</p><h2 id="导出图像"><a href="#导出图像" class="headerlink" title="导出图像"></a>导出图像</h2><p>将画布导出为图像 toDataURL(注意是canvas元素接口上的方法)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> canvas  <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ex1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> dataUrl <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="判断线上的点"><a href="#判断线上的点" class="headerlink" title="判断线上的点"></a>判断线上的点</h2><p>事件操作 ctx.isPointInPath(x, y) 判断在当前路径中是否包含检测点 x:检测点的X坐标 y:检测点的Y坐标</p><p>注意，此方法只作用于最新画出的canvas图像</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myCanvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">isPointInPath</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> </code></pre><p>Reference：</p><p>W3school <a href="https://www.w3schools.com/tags/ref_canvas.asp">https://www.w3schools.com/tags/ref_canvas.asp</a></p><p>Canvas Tutorial  <a href="http://tutorials.jenkov.com/html5-canvas/index.html">http://tutorials.jenkov.com/html5-canvas/index.html</a> </p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html form</title>
      <link href="2020/11/09/Html-form/"/>
      <url>2020/11/09/Html-form/</url>
      
        <content type="html"><![CDATA[<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><h3 id="基本属性："><a href="#基本属性：" class="headerlink" title="基本属性："></a>基本属性：</h3><p>Input type：text / password / checkbox / radio / submit</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   用户：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userPaw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--输入合法的邮箱，@--></span>   邮箱：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   电话：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--输入合法网址--></span>   网址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--无法输入字母--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ID：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请填写id号码<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4567890<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--max最大值   min最小值   value默认值--></span>   数量：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   商品名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   范围：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   颜色：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   时间：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   日期：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   日期：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datetime-local<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   月份：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   星期：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>week<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   提交：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Html-form/1604907697169.png"></p><h3 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--placeholder:提示文本--></span>    <span class="token comment" spellcheck="true">&lt;!--autofocus:自动获取焦点--></span>    <span class="token comment" spellcheck="true">&lt;!--autocomplete：自动完成，on:打开，off:关闭--></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span>  <span class="token attr-name">autofocus</span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--required：必须输入--></span>    <span class="token comment" spellcheck="true">&lt;!--pattern：正则表达式    *：任意个    ？：表示0个或者1个    +：表示一个或多个--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>性别: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>请选一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>track<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>track<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>track<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Track Submission<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>event<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>event<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>event<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Events and Artist booking<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Message us<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>    手机号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>^(\+86)?1\d&amp;#123;10&amp;#125;$<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--multiple:选择多个文件--></span>    文件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>photo<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--email有默认的验证，在email中，multiple允许输入多个邮箱地址，以逗号分隔--></span>    邮箱：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>详细地址: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>立即注册<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--不会进行提交--></span><span class="token comment" spellcheck="true">&lt;!--from:指定表单 ID，那么将来指定ID号的表单进行数据提交的时候，也会将当前表单一起提交--></span>地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">form</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--F12-控制台，点击network,显示出请求--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Html-form/1604908500843.png"></p><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><ul><li><p>表单中 action提交服务器的地址 method 提交方式</p></li><li><p>select中optgroup组中option 选项 </p></li><li><p>Fieldset加表框 里面的legend表边框左上名字（边上）表内label 显示文字</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>Personalia:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>select<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--value:具体的值  label:提示信息，辅助值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pretty<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pretty<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pretty<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Birthday:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li></ul><p>  <img src="/2020/11/09/Html-form/1604908551635.png"></p><h2 id="enctype和formenctype"><a href="#enctype和formenctype" class="headerlink" title="enctype和formenctype"></a>enctype和formenctype</h2><p>enctype属性规定在发送到服务器之前应该如何对表单数据进行编码。</p><ul><li>application/x-www-form-urlencoded：表单数据被编码为名称/值对。这是默认的编码方式（空格转换为 “+” 加号，特殊符号转换为 ASCII HEX 值）。</li><li>multipart/form-data：不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。</li><li>text/plain：空格转换为 “+” 加号，但不对特殊字符编码。</li></ul><p>同上，enctype也可以针对每个提交按钮进行指定，使用formenctype即可。</p><h2 id="action-amp-amp-method"><a href="#action-amp-amp-method" class="headerlink" title="action &amp;&amp; method"></a>action &amp;&amp; method</h2><ol><li>一个表单只能填写一个action及一个method</li></ol><h2 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h2><p>progress元素的属性：</p><ul><li><p>max属性：规定当前进度的最大值。</p></li><li><p>value属性设定进度条当前默认显示值</p></li><li><p>form属性：规定进度条所属的一个或多个表单</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>当前下载进度：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   &lt;form action=""method="" id="form">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>progress</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span>  <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>haha<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Html-form/1604909198510.png"></p></li></ul><h2 id="meter-度量条"><a href="#meter-度量条" class="headerlink" title="meter(度量条!!)"></a>meter(<strong>度量</strong>条!!)</h2><ul><li><p>value属性设定进度条当前默认显示值</p></li><li><p>max属性：规定范围的最大值，默认值为1.</p></li><li><p>min属性：规定范围的最小值，默认值为0.</p></li><li><p>low属性：规定被视作低的标准。</p></li><li><p>high属性：规定被视作高标准。</p></li><li><p>form属性：规定所属的一个或多个表单。</p></li><li><p>optimum属性：定义度量条的最佳标准值。<strong>low值&lt; 标准值 &lt;high值</strong></p><pre class=" language-html"><code class="language-html">&lt;form action=""method="" id="form">     <span class="token comment" spellcheck="true">&lt;!--&lt;progress max="100"value="30" title="haha">--></span>      低：&lt;meter max="100"min="0" value="30" high="80"low="30"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meter</span><span class="token punctuation">></span></span>      高：&lt;meter max="100"min="0" value="90" high="80"low="30"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meter</span><span class="token punctuation">></span></span>      中：&lt;meter max="100"min="0" value="60" high="80"low="30"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Html-form/1604909303658.png"></p></li></ul><h2 id="Other-Attri"><a href="#Other-Attri" class="headerlink" title="Other Attri:"></a>Other Attri:</h2><h3 id="maxlength-输入的最大字数"><a href="#maxlength-输入的最大字数" class="headerlink" title="maxlength:输入的最大字数"></a>maxlength:输入的最大字数</h3><p>  用户名：&lt;input type=”text” name=”user”value=”请输入用户名”maxlength=”6”&gt;</p><h3 id="disabled属性："><a href="#disabled属性：" class="headerlink" title="disabled属性："></a>disabled属性：</h3><p>设置为不可用（不可操作）不会提交到服务器</p><h3 id="tabindex属性："><a href="#tabindex属性：" class="headerlink" title="tabindex属性："></a>tabindex属性：</h3><p>指定按Tab键时，项目间的移动顺序</p><h3 id="keygen属性："><a href="#keygen属性：" class="headerlink" title="keygen属性："></a>keygen属性：</h3><p>密钥生成器</p><ul><li>当提交表单时，私钥存储在本地，公钥发送到服务器。主要作用是提供一种用户验证身份的方法</li><li>name/form/autofocus/disabled</li><li>challenge属性:将 keygen 的值设置为在提交时询问。</li><li>keytype属性：定义密钥类型，如设置为rsa（一种密码的算法），则生成 RSA 密钥。</li></ul><pre class=" language-html"><code class="language-html">  &lt;form action=""method="get">    账号：&lt;input type="text"name="user">     加密：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keygen</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mykey<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&lt;inputtype="submit"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h2 id="details-summary"><a href="#details-summary" class="headerlink" title="details,summary"></a>details,summary</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>这是摘要1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里具体描述，标签相对随意，例如这里使用的<span class="token entity" title="&lt;">&amp;lt;</span>p<span class="token entity" title="&gt;">&amp;gt;</span>标签。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Html-form/1604912463910.png"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span> <span class="token attr-name">open</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--如果&lt;summary>缺省，则会自动补上，文案是“详细信息”。--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>这是摘要2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>content</span><span class="token punctuation">></span></span>这里<span class="token entity" title="&lt;">&amp;lt;</span>details<span class="token entity" title="&gt;">&amp;gt;</span>标签设置了HTML布尔属性open，因此，默认是展开状态。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>content</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Html-form/1604912505000.png"></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html Media</title>
      <link href="2020/11/09/Html-Media/"/>
      <url>2020/11/09/Html-Media/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-Video"><a href="#HTML-Video" class="headerlink" title="HTML Video"></a>HTML Video</h1><p><video width="320" height="240" controls>  <source src="*****" type="video/mp4">  <source src="*8**" type="video/ogg">Your browser does not support the video tag.</video><br><code>&lt;video width=&quot;320&quot; height=&quot;240&quot; controls&gt; </code></p><p><code>&lt;source src=&quot;*****&quot; type=&quot;video/mp4&quot;&gt; </code> </p><p><code>&lt;source src=&quot;*8**&quot; type=&quot;video/ogg&quot;&gt;Your browser does not support the video tag.&lt;/video&gt;</code></p><p>attribute: control / autoplay / loop / muted / preload / auto(default) / metadata / none</p><p>size control=&gt; <code>&lt;video&gt;</code></p><h1 id="HTML-Audio"><a href="#HTML-Audio" class="headerlink" title="HTML Audio"></a>HTML Audio</h1><p><audio controls>  <source src="****" type="audio/ogg">  <source src="****" type="audio/mpeg">Your browser does not support the audio element.</audio><br><code>&lt;audio controls&gt; </code><br>   <code>&lt;source src=&quot;****&quot; type=&quot;audio/ogg&quot;&gt; </code><br>   <code> &lt;source src=&quot;****&quot; type=&quot;audio/mpeg&quot;&gt;Your browser does not support the audio element.&lt;/audio&gt;</code></p><p><code>controls</code> attribute adds audio controls, like play, pause, and volume.</p><p>attribute ：controls / autoplay /<br> loop / muted / preload</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-add-img</title>
      <link href="2020/11/08/hexo-add-img/"/>
      <url>2020/11/08/hexo-add-img/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo本地图片显示问题"><a href="#Hexo本地图片显示问题" class="headerlink" title="Hexo本地图片显示问题"></a>Hexo本地图片显示问题</h1><p>使用<code>hexo</code>生成静态资源后,由于<code>url</code>的问题会出现图片加载的问题,现在网上的文章及官方的解决方案大概分为三种:</p><ol><li>将图片放入<code>source/images</code>目录下,每次<code>generate</code>都会生成图片,在使用相对或绝对路径进行引用</li><li> 配置<code>hexo</code>的<code>_config.yml</code>文件, 将 <code>post_asset_folder</code> 设置为<code>true</code>, 这样每次new 生成一个文章时都会同步生成一个同名的文件夹,然后设置相对或绝对路径.  </li><li> 使用<code>hexo</code>官方的解决方案,使用模版变量, <code>&#123;% asset_img slug [title] %&#125; </code>  </li></ol><p>解决方法:</p><pre class=" language-html"><code class="language-html">设置post_asset_folder  为 true, 安装插件 asset-imagenpm install https://github.com/CodeFalling/hexo-asset-image设置图片为相对路径(详细步骤在下面图片)hexo clean &amp;&amp; hexo generate &amp;&amp; hexo s 运行查看</code></pre><p>打开Typora的 <code>文件 &gt; 偏好设置</code>，进行配置<code>typora</code>的相对路径</p><p><img src="/2020/11/08/hexo-add-img/setupImg.png"></p><p>注意：一定要先设置了图片根目录后再插入图片，否则图片路径会不正确</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas 1</title>
      <link href="2020/11/08/Canvas/"/>
      <url>2020/11/08/Canvas/</url>
      
        <content type="html"><![CDATA[<p><strong>HTML Graphics - canvas</strong> 1</p><p>（ HTML Graphics  GoogleMaos SVG Canvas Game ）</p><ul><li><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2></li></ul><p>canvas的好处总结如下：</p><ol><li>常用于动态的，具有特效的图像显示。有漫画的感觉。</li><li>canvas可以做3D特效</li><li>canvas具有画布的功效，可以设计在线画图</li><li>canvas很炫。</li></ol><p><code>&lt;canvas&gt;</code>看起来和<code>&lt;img&gt;</code>元素很相像，唯一的不同就是它并没有 src 和 alt 属性。<br>实际上，<code>&lt;canvas&gt;</code>标签只有两个属性—— width和height 。 但是一定要有id （js需要）</p><p>html属性设置width height时只影响画布本身不影画布内容<br>css属性设置width height时不但会影响画布本身的高宽，还会使画布中的内容等比例缩放(影响画面质量)</p><p>By default, the <code>&lt;canvas&gt; </code>element has no border and no content.</p><h2 id="initial-canvas"><a href="#initial-canvas" class="headerlink" title="initial canvas"></a>initial canvas</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        canvas&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/08/Canvas/1604915691558.png"></p><h2 id="rendering-context-line"><a href="#rendering-context-line" class="headerlink" title="rendering context- line"></a>rendering context- line</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>       <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//使用上下文，得到一个2D的画布</span>     <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 简单线条 </span>  <span class="token comment" spellcheck="true">// 设置直线状态 起点 终点 宽度 颜色 </span>  <span class="token comment" spellcheck="true">// 线条相连成为形状</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//声明要开始绘制路径</span>ctx<span class="token punctuation">.</span>lineJoin <span class="token operator">=</span> <span class="token string">"round"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//线条与线条间接合处的样式（miter 直角(default) /bevel 斜角 / round 圆角）</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//移动到绘制点，将“画笔”移动到100,100的位置</span>ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//划线</span>ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//划线</span>ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//线的粗细</span>ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//线的颜色</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//准备填充的颜色</span>ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//闭合路径（自动补全）</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//显示线（绘制线），可以绘制的路径显示出来</span>ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//填充颜色</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/2020/11/08/Canvas/1604918549776.png"></p><h2 id="rendering-shape"><a href="#rendering-shape" class="headerlink" title="rendering - shape"></a>rendering - shape</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token function">fillRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//填充矩形</span><span class="token function">strokeRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//矩形边框</span><span class="token function">clearRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//清除指定矩形区域，清楚部分变透明</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//直接形状</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>     <span class="token comment" spellcheck="true">//得到画布标签</span>     <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//使用上下文，得到一个2D的画布</span>     <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//用ctx的方式画画</span>    <span class="token comment" spellcheck="true">//左上是（0,0）- x,y</span>     ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"orange"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先提供一个颜色的笔</span>     ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在根据以上颜色填充</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/2020/11/08/Canvas/1604918204350.png"></p><h2 id="rendering-Arc"><a href="#rendering-Arc" class="headerlink" title="rendering - Arc"></a>rendering - Arc</h2><p>通过绘画弧形，完成图形建造</p><h3 id="方法一：ctx-arc-圆心x-圆心y-半径-开始的弧度-结束的弧度-是否逆时针"><a href="#方法一：ctx-arc-圆心x-圆心y-半径-开始的弧度-结束的弧度-是否逆时针" class="headerlink" title="方法一：ctx.arc ( 圆心x, 圆心y, 半径, 开始的弧度, 结束的弧度, 是否逆时针 );"></a><strong>方法一：ctx.arc ( 圆心x, 圆心y, 半径, 开始的弧度, 结束的弧度, 是否逆时针 );</strong></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ctx.arc(圆心x, 圆心y, 半径, 开始的弧度, 结束的弧度, 是否逆时针);</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开始绘制路径</span><span class="token comment" spellcheck="true">// ctx.arc(100, 100, 60, 0, 6.28, false);</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示路径线</span></code></pre><p>圆弧例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//得到画布标签</span><span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用上下文，得到一个2D画布</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画画 </span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开始绘制路径 </span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//绘制圆弧（2*pi*r）</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示路径线</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/2020/11/08/Canvas/1604919183425.png"></p><p><img src="/2020/11/08/Canvas/1604921951562.png"></p><p><strong>注意: 绘制圆弧时不需要closePath(); 否则会连成一个闭环,为了防止两次绘制样式污染,每次绘制前执行beginPath()即可</strong></p><h3 id="方法二：bezierCurveTo-Method"><a href="#方法二：bezierCurveTo-Method" class="headerlink" title="方法二：bezierCurveTo() Method"></a><strong>方法二：bezierCurveTo() Method</strong></h3><p>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) 绘制三次贝塞尔曲线，cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点。 起始点为moveto时指定的点</p><p><img src="/2020/11/08/Canvas/1604920033422.png"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myCanvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/08/Canvas/1604920170375.png"></p><h3 id="方法三：quadraticCurveTo-Method"><a href="#方法三：quadraticCurveTo-Method" class="headerlink" title="方法三：quadraticCurveTo()  Method"></a>方法三：quadraticCurveTo()  Method</h3><p>quadraticCurveTo(cp1x, cp1y, x, y) 绘制二次贝塞尔曲线，cp1x,cp1y为一个控制点，x,y为结束点。 起始点为moveto时指定的点</p><p><img src="/2020/11/08/Canvas/1604920424923.png"></p><p>总例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 弧形例子</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span>PI<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span>PI<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span>PI<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 二次曲線</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span>cp1x<span class="token punctuation">,</span> cp1y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 三次曲線</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span>cp1x<span class="token punctuation">,</span> cp1y<span class="token punctuation">,</span> cp2x<span class="token punctuation">,</span> cp2y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 二次曲線範例</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">62.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">62.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 三次曲線範例</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">62.5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">62.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">62.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">62.5</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/08/Canvas/1604920656659.png"></p><p>Reference：</p><p>W3school <a href="https://www.w3schools.com/tags/ref_canvas.asp">https://www.w3schools.com/tags/ref_canvas.asp</a></p><p>Canvas Tutorial  <a href="http://tutorials.jenkov.com/html5-canvas/index.html">http://tutorials.jenkov.com/html5-canvas/index.html</a>  </p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo markdown-typora</title>
      <link href="2020/11/08/hexo-markdown-typora/"/>
      <url>2020/11/08/hexo-markdown-typora/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-大纲目录"><a href="#Typora-大纲目录" class="headerlink" title="Typora 大纲目录"></a>Typora 大纲目录</h1><p>选择顶部视图中 <strong>大纲视图</strong> </p><p> <img src="/2020/11/08/hexo-markdown-typora/typora-list.png"></p><h1 id="Typora中插入图片（Hexo）"><a href="#Typora中插入图片（Hexo）" class="headerlink" title="Typora中插入图片（Hexo）"></a>Typora中插入图片（Hexo）</h1><p><img src="/2020/11/08/hexo-markdown-typora/typora-img.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Review HTML&amp; CSS 2</title>
      <link href="2020/11/08/Review-HTML-&amp;-CSS-2/"/>
      <url>2020/11/08/Review-HTML-&amp;-CSS-2/</url>
      
        <content type="html"><![CDATA[<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span></code></pre><h2 id="hgroup元素"><a href="#hgroup元素" class="headerlink" title="hgroup元素"></a>hgroup元素</h2><p>hgroup = header group (not supported by H5)</p><h2 id="section-article元素"><a href="#section-article元素" class="headerlink" title="section,article元素"></a>section,article元素</h2><p>section元素代表文档中的 节 或 段，段可以是指一篇文章里按照主题的分段；节可以是指一个页面里的分组。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>section是啥？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>关于section<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>section的介绍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>关于其他<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>关于其他section的介绍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span></code></pre><p>section使用注意：</p><ul><li>section不是一般意义上的容器元素，如果想作为样式展示和脚本的便利，可以用div。</li><li>article、nav、aside可以理解为特殊的section，<br>所以如果可以用article、nav、aside就不要用section，没实际意义的就用div    </li></ul><p>article使用注意：<br>        独立文章：用article<br>        单独的模块：用section<br>        没有语义的：用div</p><h2 id="aside元素"><a href="#aside元素" class="headerlink" title="aside元素"></a>aside元素</h2><p>aside使用总结：</p><ul><li>asie在article内表示主要内容的附属信息    </li><li>在article之外则可做侧边栏    </li><li>如果是广告，其他日志链接或者其他分类导航也可以用</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>作者简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>前端一枚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Review HTML&amp; CSS 1</title>
      <link href="2020/11/08/Review-HTML-&amp;-CSS-1/"/>
      <url>2020/11/08/Review-HTML-&amp;-CSS-1/</url>
      
        <content type="html"><![CDATA[<h2 id="普通css（一定要注意继承性）"><a href="#普通css（一定要注意继承性）" class="headerlink" title="普通css（一定要注意继承性）"></a>普通css（一定要注意继承性）</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><pre class=" language-css"><code class="language-css">//基本样式&lt;h<span class="token number">1</span> style=<span class="token string">"color: green;"</span>><span class="token number">.</span>className&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//class      #id&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//id         h<span class="token number">3.</span>class&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*并且 选择类名为class的h3标签*/</span>p#main&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*并且 选择ID为main的段落标签*/</span>p,<span class="token number">.</span>hello,#box&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*和*/</span>*&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>[type=<span class="token string">'radio/checkbox'</span>] &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">0</span>px <span class="token number">20</span>px <span class="token number">0</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//兄弟p~ul    <span class="token comment" spellcheck="true">/*选择p元素之后的每一个ul元素 堂的*/</span>div+p    <span class="token comment" spellcheck="true">/*选择所有紧接&lt;div>元素之后的&lt;p>元素 亲的*/</span>//后代选择器div <span class="token number">.</span>box<span class="token number">1</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*空格 前一个元素所有的后代节点*/</span>div > <span class="token number">.</span>box<span class="token number">1</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*空格 前一个元素直接的后代节点 （不深入）*/</span>//存在和值属性选择器[attr]：包含 attr 属性的所有元素[attr=val]：选择 attr 属性被赋值为 val 的所有元素。[attr~=val]：以 attr 命名的属性的元素，并且该属性是一个以空格作为分隔的值列表，其中至少一个值为val。</code></pre><h4 id="子串值属性选择器"><a href="#子串值属性选择器" class="headerlink" title="子串值属性选择器"></a>子串值属性选择器</h4><p><code>[attr|=val]</code> : 选择attr属性的值是val（包括val）或以val-开头的元素。<br>        <code>[attr^=val]</code> : 选择attr属性的值以val开头（包括val）的元素。<br>       <code>[attr$=val]</code> : 选择attr属性的值以val结尾（包括val）的元素。<br>        <code>[attr*=val]</code> : 选择attr属性的值中包含字符串val的元素。</p><h4 id="伪类选择器：-链接，表单，动态，结构，为元素"><a href="#伪类选择器：-链接，表单，动态，结构，为元素" class="headerlink" title="伪类选择器：(链接，表单，动态，结构，为元素)"></a>伪类选择器：(链接，表单，动态，结构，为元素)</h4><p>a:link {color: red;} /* 未访问的链接状态 <em>/<br>       a:visited {color: green;} /</em> 已访问的链接状态 <em>/<br>       a:hover {color: blue;} /</em> 鼠标滑过链接状态 <em>/<br>       a:active {color: yellow;} /</em> 鼠标按下去时的状态 */<br>       div:first-child last-child root target /<em>当前活动</em>/</p><h4 id="相邻元素选择器"><a href="#相邻元素选择器" class="headerlink" title="相邻元素选择器"></a>相邻元素选择器</h4><p>   h1 + p {color:red;} /<em>选择紧接在 h1 元素后出现的段落，h1 和 p 元素拥有共同的父元素</em>/</p><h3 id="css-编译实现选择"><a href="#css-编译实现选择" class="headerlink" title="css 编译实现选择"></a>css 编译实现选择</h3><ul><li><p>顺序：从上到下（这意味着，如果发生冲突，浏览器将使用最后出现的CSS声明）</p><pre><code> **但是对于css的冲突, 优先级 **</code></pre><p> <strong>行级样式 &gt; 内嵌样式表 &gt; 外部样式表（就近原则）</strong></p><p> <strong>ID选择器 &gt; 类选择器 &gt; 标签选择器</strong></p></li><li><p>层叠</p><pre><code> 1.找出所有相关的规则，这些规则都包含一个选择器       2.计算声明的优先级                   先按来源排序                   在按选择器的特殊性排序                   最终按顺序</code></pre></li></ul><h4 id="特殊性计算"><a href="#特殊性计算" class="headerlink" title="特殊性计算"></a>特殊性计算</h4><p> 一个选择器的具体特殊性如下确定：</p><ol><li><p> 选择器中给定的ID属性值，加0,1,0,0</p></li><li><p> 选择器中给定的各个类属性，属性选择，或伪类，加 0,0,1,0</p></li><li><p>选择器中的给定的各个元素和伪元素，加0,0,0,1</p></li><li><p> 通配符选择器的特殊性为0,0,0,0</p></li><li><p>结合符对选择器特殊性没有一点贡献</p></li><li><p>内联声明的特殊性都是1,0,0,0</p></li><li><p>继承没有特殊性</p><p><img src="/2020/11/08/Review-HTML-&-CSS-1/1605182527129.png"></p></li></ol><h4 id="冲突例子"><a href="#冲突例子" class="headerlink" title="冲突例子"></a>冲突例子</h4><p>   <img src="/2020/11/08/Review-HTML-&-CSS-1/1605176333357.png"></p><p>   由于上面的权重不一致，要么弄成同样的权重 看下面，要么id</p><p>   <img src="/2020/11/08/Review-HTML-&-CSS-1/1605176293525.png"></p><p>   <strong>当您绝对需要确保某个元素具有特定的CSS时，可以使用<code>!important</code></strong></p><p> color: red !important;/<em>!important不影响就近原则</em>/</p><h2 id="基本css复习"><a href="#基本css复习" class="headerlink" title="基本css复习"></a>基本css复习</h2><ul><li><p>字体：<code>&lt;i&gt;,&lt;em&gt;</code>  斜体        <code>&lt;strong&gt;,&lt;b&gt;</code> 加粗</p></li><li><p><code>&lt;q&gt;</code>与 <code>&lt;blockquote&gt;</code> 的区别</p><p> q标签在本质上与 <a href="https://www.w3school.com.cn/tags/tag_blockquote.asp">blockquote</a> 是一样的。不同之处在于它们的显示和应用。q 标签用于简短的行内引用。如果需要从周围内容分离出来比较长的部分（通常显示为缩进的块），请使用 blockquote标签。</p><p> 也就是 q比blockquote多显示一对双引号 </p></li><li><p><code>&lt;sup&gt;</code>和<code>&lt;sub&gt;</code> <code>&lt;sup&gt;</code>和<code>&lt;sub&gt;</code>用于定义上标和下标。例子：</p><p> <img src="/2020/11/08/Review-HTML-&-CSS-1/css_10%5E3.png"></p></li><li><p><code>&lt;del&gt;</code>刪除文本<del>加刪除線</del>，<code>&lt;ins&gt;</code>為插入<u>文本加下劃線</u></p></li><li><p>插入代码： <code>&lt;pre&gt;</code>行块  <code>&lt;code&gt;</code> 块状</p></li><li><p>单位：<code>px ; % ; em</code></p><p> <strong>父子包含的div，width&amp;height会传递影响，要是子 &gt; 父，记得用 px。 % 会受父级width影响</strong></p></li><li><p>行间距= line-height –font-size</p></li><li><p>Spacing : word spacing &amp; word spacing</p></li><li><p>Text-align: justify(两边对齐)</p></li><li><p>padding / margin : 上，右，下，左</p><pre class=" language-css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">25</span>px <span class="token number">50</span>px <span class="token number">75</span>px<span class="token punctuation">;</span>//上 左右 下<span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">25</span>px <span class="token number">50</span>px<span class="token punctuation">;</span>// 上下 左右<span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">25</span>px//all</code></pre><p> <img src="/2020/11/08/Review-HTML-&-CSS-1/1604995934200.png"></p></li><li><p>Overflow：内容溢出盒子 visible; scroll; auto; hidden</p></li><li><p>Position: static; relative; absolute;fixed</p></li><li><p>Z-index</p></li><li><p>自定义css</p><pre class=" language-css"><code class="language-css">&lt;style>  <span class="token punctuation">:</span>root &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> // pseudo-class selector      <span class="token property">--penguin-skin</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>//全局定义  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>penguin &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">--penguin-belly</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span> //重新定义，在class内  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&lt;/style><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-skin<span class="token punctuation">)</span><span class="token punctuation">;</span>//使用//附加一个后备值，如果给定变量无效，则浏览器将还原为该值<span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-skin, black<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>屏幕小于或大于媒体查询断点</p><pre class=" language-css"><code class="language-css">  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 350px<span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>    <span class="token punctuation">:</span>root &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">--penguin-size</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">--penguin-skin</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><ul><li><p>不同列表<code>&lt;ol&gt; ,&lt;li&gt;</code> vs <code>&lt;ul&gt;,&lt;li&gt;</code>       自定义: <code>&lt;dl&gt;,&lt;dt&gt;(=ul),&lt;dd&gt;(=li)</code></p></li><li><p><code>&lt;tr&gt;</code>一行<code>&lt;th&gt;</code>一头<code>&lt;td&gt;</code> 中 &amp; <code>&lt;Caption&gt;</code> 标题、<code>&lt;thead&gt;</code> 头部、<code>&lt;tbody&gt;</code>、<code>&lt;tfoot&gt;</code></p></li><li><p>横向合并–colspan（ colspan=”2”） 纵向合并–rowspan</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--标准列表--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>Monthly savings<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Month<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Savings<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span>2</span> <span class="token punctuation">></span></span>January<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span>2</span> <span class="token punctuation">></span></span>February<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/08/Review-HTML-&-CSS-1/table_sample.png"></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--定义自定义列表--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--定义自定义项目--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>cast:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--定义自定义描述--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>vi. 1投掷扔抛, 2丢弃, 抛弃 3把...投向, 抛射, 4分派..., 扮演角色 5铸造, 浇铸 n. 全体演员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>forecast:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>v. 预测, 预报, /dd>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>n. 预测, 预报&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>insight:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>n. 洞察力, 领悟 v. 洞悉, 了解<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/08/Review-HTML-&-CSS-1/1604912356663.png"></p></li><li><p>border-collapse &amp; separate (default) 表格的边与内容的边</p></li></ul><h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><ul><li><p>表单中 action提交服务器的地址 method 提交方式</p></li><li><p>select中optgroup组中option 选项 </p></li><li><p>Fieldset加表框 里面的legend表边框左上名字（边上）表内label 显示文字</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>Personalia:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>select<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Birthday:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li></ul><p>penguin</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token number">.</span>penguin &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Only change code below this line */</span>    <span class="token property">--penguin-skin</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>    <span class="token property">--penguin-belly</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token property">--penguin-beak</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Only change code above this line */</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>penguin-top &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">25%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-skin, gray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">45%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">70%</span> <span class="token number">70%</span> <span class="token number">60%</span> <span class="token number">60%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>penguin-bottom &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">40%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">23.5%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-skin, gray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">53%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">45%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">70%</span> <span class="token number">70%</span> <span class="token number">100%</span> <span class="token number">100%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>right-hand &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">5%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-skin, gray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">30%</span> <span class="token number">30%</span> <span class="token number">120%</span> <span class="token number">30%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>left-hand &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">75%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-skin, gray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">30%</span> <span class="token number">30%</span> <span class="token number">30%</span> <span class="token number">120%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>right-cheek &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">35%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-belly, white<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">70%</span> <span class="token number">70%</span> <span class="token number">60%</span> <span class="token number">60%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>left-cheek &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-belly, white<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">70%</span> <span class="token number">70%</span> <span class="token number">60%</span> <span class="token number">60%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>belly &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">2.5%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-belly, white<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">95%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">120%</span> <span class="token number">120%</span> <span class="token number">100%</span> <span class="token number">100%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>right-feet &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">85%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-beak, orange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span> <span class="token number">50%</span> <span class="token number">50%</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">80</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">2222</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>left-feet &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">85%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">25%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-beak, orange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span> <span class="token number">50%</span> <span class="token number">50%</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">80</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">2222</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>right-eye &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">45%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">17%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>left-eye &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">45%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">25%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">17%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>sparkle &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">25%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">35%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">35%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>blush-right &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">65%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>blush-left &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">65%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>beak-top &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">40%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-beak, orange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>beak-bottom &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">65%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">42%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-beak, orange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">16%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  body &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#c6faf1</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>penguin * &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>penguin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>penguin-bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right-hand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left-hand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right-feet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left-feet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>penguin-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right-cheek<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left-cheek<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>belly<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right-eye<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sparkle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left-eye<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sparkle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blush-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blush-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beak-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beak-bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/08/Review-HTML-&-CSS-1/1604985404187.png"></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Building Issue</title>
      <link href="2020/11/07/Hexo-Building-Issue/"/>
      <url>2020/11/07/Hexo-Building-Issue/</url>
      
        <content type="html"><![CDATA[<h2 id="问题1：Git-Page部署问题"><a href="#问题1：Git-Page部署问题" class="headerlink" title="问题1：Git Page部署问题"></a>问题1：Git Page部署问题</h2><p>The value {} was passed to a date-related filter that expects valid dates in /_layouts/default.html or one of its layouts. For more information, see <a href="https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#date-is-not-a-valid-datetime">https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#date-is-not-a-valid-datetime</a>.</p><p><strong>Solution：</strong></p><p>没有用jekyll时，在github.io仓库根目录建立名为.nojekyll的空文件，以跳过jekyll检查。</p><h2 id="问题2：Git-Page部署问题-404"><a href="#问题2：Git-Page部署问题-404" class="headerlink" title="问题2：Git Page部署问题-404"></a>问题2：Git Page部署问题-404</h2><p>404 not found：找不到index.html</p><p><strong>Solution：</strong><br>问题就出在hexo的deploy了。</p><p>hexo gitpage 部署命令注意格式</p><p>_config.yml中</p><p>deploy:<br>type: git<br>repo: <a href="https://github.com/">https://github.com/</a><username>/<project>  # example, <a href="https://github.com/hexojs/hexojs.github.io">https://github.com/hexojs/hexojs.github.io</a><br>branch: master</project></username></p><h2 id="问题3：编译错误"><a href="#问题3：编译错误" class="headerlink" title="问题3：编译错误"></a>问题3：编译错误</h2><p>今天使用hexo发布文章，输入指令hexo g的时候出现了如题的错误：<br>can not read a block mapping entry; a multiline key may not be an implicit key at line 2, column 5:</p><p><strong>Solution：</strong><br>实际上是文章开头的配置，注意冒号之后的空格<br>title: Hexo Building Issue<br>date: 2020-11-07 21:28:54<br>tags: Hexo</p><h2 id="问题4：编译错误"><a href="#问题4：编译错误" class="headerlink" title="问题4：编译错误"></a>问题4：编译错误</h2><p>当提交hexo文件代码到git，重新clone的时候，编译的时候会出现错误：<br>“Cannot find module ‘./build/Release/DTraceProviderBindings’”<br>ERROR Local hexo not found in ~/Documents/（文件地址）<br>ERROR Try running: ‘npm install hexo –save’</p><p><strong>Solution：</strong><br>npm install hexo –no-optional<br>或者<br>$ npm uninstall hexo-cli -g<br>$ npm install hexo-cli -g<br>（实际上是没有办法上传node modules）</p><h2 id="问题5：右侧目录"><a href="#问题5：右侧目录" class="headerlink" title="问题5：右侧目录"></a>问题5：右侧目录</h2><p>hexo yilia主题配置中的确实模块- 右侧的文章列表。按照官方指引，但是没有实现列表</p><p><strong>Solution：</strong><br>1.有没有安装在blog的根目录<br>2.在config中的配置，复制粘贴时，注意缩进距离（此处文件，格式很重要）</p><h2 id="问题6：-TOC"><a href="#问题6：-TOC" class="headerlink" title="问题6：[TOC]"></a>问题6：[TOC]</h2><p>[TOC] 不能成功出目录（typora文件显示成功，但是hexo运行时，没有显示目录）</p><p><strong>Solution：</strong></p><p>看清楚config中的toc 等级设置，由于不同主题，设置会不一样！（在config文件中）</p><h2 id="问题7：代码高亮"><a href="#问题7：代码高亮" class="headerlink" title="问题7：代码高亮"></a>问题7：代码高亮</h2><p>代码高亮显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-haskell"><code class="language-haskell"><span class="token hvariable">npm</span> <span class="token hvariable">i</span> <span class="token operator">-</span><span class="token constant">S</span> <span class="token hvariable">hexo</span><span class="token operator">-</span><span class="token hvariable">prism</span><span class="token operator">-</span><span class="token hvariable">plugin</span></code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">"preprocess"</span> <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">"tomorrow"</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h2 id="问题7：大括号的编译问题"><a href="#问题7：大括号的编译问题" class="headerlink" title="问题7：大括号的编译问题"></a>问题7：大括号的编译问题</h2><p>左右花括号（left/right curly brace）都不显示，在typora软件中代码块中显示无碍，但是hexo post中无法正常显示</p><table><thead><tr><th>名称</th><th>字符</th><th>ASCII</th><th>16进制</th><th>URL编码</th><th align="center">HTML编码</th></tr></thead><tbody><tr><td>左花括号</td><td>{</td><td>123</td><td>\x7b</td><td>%7b</td><td align="center">&amp;#123</td></tr><tr><td>管道符</td><td>|</td><td>124</td><td>\x7c</td><td>%7c</td><td align="center">&amp;#124</td></tr><tr><td>右花括号</td><td>}</td><td>125</td><td>\x7d</td><td>%7d</td><td align="center">&amp;#125</td></tr></tbody></table><p><img src="/2020/11/07/Hexo-Building-Issue/1604935229359.png"></p><p>解决办法：</p><p>没找到</p><h2 id="问题7：-TOC-跳转不成功"><a href="#问题7：-TOC-跳转不成功" class="headerlink" title="问题7： TOC 跳转不成功"></a>问题7： TOC 跳转不成功</h2><p>目录显示的层级正确，但是点击对应的标题，没有办法实现跳转</p><p>solution：</p><p>层级设置不可以跟排列序号同时使用</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
