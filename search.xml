<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>expensifyApp react learning</title>
      <link href="2020/12/30/expensifyApp-react-learning/"/>
      <url>2020/12/30/expensifyApp-react-learning/</url>
      
        <content type="html"><![CDATA[<p> 做expensifyApp所遇到的基本笔记</p><h2 id="TOGGLE"><a href="#TOGGLE" class="headerlink" title="TOGGLE"></a>TOGGLE</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token entity" title="&#123;">&amp;#123;</span>visibility <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span> p<span class="token operator">></span>you got it<span class="token operator">&lt;</span><span class="token operator">/</span> p<span class="token operator">></span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> showSomething<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>    visibility<span class="token operator">=</span><span class="token operator">!</span>visibility<span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h2 id="PROPS-amp-MAP-need-key"><a href="#PROPS-amp-MAP-need-key" class="headerlink" title="PROPS &amp; MAP( need key)"></a>PROPS &amp; MAP( need key)</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Options</span> <span class="token attr-name">options</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;options&amp;#125;/</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AddOption</span> <span class="token punctuation">/></span></span> <span class="token punctuation">)</span>and now options comp will have access by using <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>options<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">class</span> <span class="token class-name">Options</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>                <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Option</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;option&amp;#125;</span> <span class="token attr-name">optionText</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;option&amp;#125;/</span><span class="token punctuation">></span></span> <span class="token punctuation">;</span>            <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h3 id="注意props的区别"><a href="#注意props的区别" class="headerlink" title="注意props的区别"></a>注意props的区别</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">ExpenseListFilters</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.props.filters.text&amp;#125;</span>        <span class="token attr-name">onChange</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;(e)<span class="token punctuation">=</span></span><span class="token punctuation">></span><span class="token attr-name">&amp;#123;</span> <span class="token attr-name">this.props.dispatch(setTextFilter(e.target.value))</span>         <span class="token attr-name">&amp;#125;&amp;#125;</span>        <span class="token punctuation">/></span>        <span class="token attr-name">&lt;select</span>        <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.props.filters.sortBy&amp;#125;</span>        <span class="token attr-name">onChange</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;(e)<span class="token punctuation">=</span></span><span class="token punctuation">></span><span class="token attr-name">&amp;#123;</span>          <span class="token attr-name">e.target.value</span> <span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span></span> <span class="token attr-name">"date"</span> <span class="token attr-name">?</span>  <span class="token attr-name">this.props.dispatch(sortByDate())</span> <span class="token attr-name">:</span> <span class="token attr-name">this.props.dispatch(sortByAmount());</span>          <span class="token attr-name">&amp;#125;&amp;#125;</span>        <span class="token punctuation">></span>          <span class="token attr-name">&lt;option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>amount<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Amount<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">const</span> ExpenseListFilters <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;props.filters.text&amp;#125;</span>        <span class="token attr-name">onChange</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;(e)<span class="token punctuation">=</span></span><span class="token punctuation">></span><span class="token attr-name">&amp;#123;</span> <span class="token attr-name">props.dispatch(setTextFilter(e.target.value))</span>         <span class="token attr-name">&amp;#125;&amp;#125;</span>        <span class="token punctuation">/></span>        <span class="token attr-name">&lt;select</span>        <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;props.filters.sortBy&amp;#125;</span>        <span class="token attr-name">onChange</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;(e)<span class="token punctuation">=</span></span><span class="token punctuation">></span><span class="token attr-name">&amp;#123;</span>          <span class="token attr-name">e.target.value</span> <span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span></span> <span class="token attr-name">"date"</span> <span class="token attr-name">?</span>  <span class="token attr-name">props.dispatch(sortByDate())</span> <span class="token attr-name">:</span> <span class="token attr-name">props.dispatch(sortByAmount());</span>          <span class="token attr-name">&amp;#125;&amp;#125;</span>        <span class="token punctuation">></span>          <span class="token attr-name">&lt;option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>amount<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Amount<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span></code></pre><h2 id="改变state"><a href="#改变state" class="headerlink" title="改变state"></a>改变state</h2><pre class=" language-jsx"><code class="language-jsx">firstly a state is defined <span class="token keyword">in</span> conctructor <span class="token keyword">in</span> the app component        <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>                    options<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token entity" title="&#125;">&amp;#125;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>handleDeleteOptions<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleDeleteOptions<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token entity" title="&#125;">&amp;#125;</span> Then create a <span class="token keyword">function</span> under the constructor <span class="token keyword">with</span> <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>setState    <span class="token function">handleDeleteOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>         <span class="token keyword">return</span><span class="token entity" title="&#123;">&amp;#123;</span>            options<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h2 id="传function-as-props"><a href="#传function-as-props" class="headerlink" title="传function as props"></a>传function as props</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span> Options options<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>options<span class="token entity" title="&#125;">&amp;#125;</span> handleDeleteOptions<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleDeleteOptions<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Options</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>     <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>                    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Option</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;option&amp;#125;</span> <span class="token attr-name">optionText</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;option&amp;#125;/</span><span class="token punctuation">></span></span> <span class="token punctuation">;</span>                <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.props.handleDeleteOptions&amp;#125;</span><span class="token punctuation">></span></span>remove all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h2 id="无状态方程式组件"><a href="#无状态方程式组件" class="headerlink" title="无状态方程式组件"></a>无状态方程式组件</h2><pre><code>const User=(props)=&gt;&#123;    return(        &lt;div&gt;          &lt;p&gt;Name:&#123;props.name&#125;&lt;/p&gt;          &lt;p&gt;age:&#123;props.age&#125;&lt;/p&gt;        &lt;/div&gt;    )&#125;</code></pre><h2 id="DEFAULT-PROPS-（没有props时候-传进去）"><a href="#DEFAULT-PROPS-（没有props时候-传进去）" class="headerlink" title="DEFAULT PROPS （没有props时候 传进去）"></a>DEFAULT PROPS （没有props时候 传进去）</h2><pre class=" language-jsx"><code class="language-jsx">Header<span class="token punctuation">.</span>defaultProps<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>    title<span class="token punctuation">:</span><span class="token string">'Decision'</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span></code></pre><h2 id="LIFECYCLE-METHODS"><a href="#LIFECYCLE-METHODS" class="headerlink" title="LIFECYCLE METHODS"></a>LIFECYCLE METHODS</h2><pre class=" language-jsx"><code class="language-jsx">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fetching data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'options'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>options<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">,</span>prevState<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prevState<span class="token punctuation">.</span>options<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>options<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token entity" title="&#123;">&amp;#123;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"updated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> json <span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'options'</span><span class="token punctuation">,</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span> fired when re<span class="token operator">-</span>directed to other component<span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h2 id="创建REDUX-STORE"><a href="#创建REDUX-STORE" class="headerlink" title="创建REDUX STORE"></a>创建REDUX STORE</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//create a store so that it can be accesible by any component, that's the sole purpose</span><span class="token keyword">const</span> store <span class="token operator">=</span><span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>initState<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">case</span> INCREMENT_EXAMPLE1<span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token entity" title="&#123;">&amp;#123;</span>           count<span class="token punctuation">:</span>count<span class="token operator">+</span><span class="token number">1</span>        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> DECREMENT_EXAMPLE2<span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token entity" title="&#123;">&amp;#123;</span>           count<span class="token punctuation">:</span>count<span class="token number">-1</span>        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>        <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>          expenses<span class="token punctuation">:</span> expensesReducer<span class="token punctuation">,</span>          filters<span class="token punctuation">:</span>filtersReducer        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> store<span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h2 id="执行dispactch"><a href="#执行dispactch" class="headerlink" title="执行dispactch"></a>执行dispactch</h2><pre class=" language-jsx"><code class="language-jsx">store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addExpense</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>description<span class="token punctuation">:</span><span class="token string">'water bill'</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="将store给ALL-REACT-COMPONENTS-（BETTER-BE-DONE-IN-MAIN-APP-JS）"><a href="#将store给ALL-REACT-COMPONENTS-（BETTER-BE-DONE-IN-MAIN-APP-JS）" class="headerlink" title="将store给ALL REACT COMPONENTS （BETTER BE DONE IN MAIN APP.JS）"></a>将store给ALL REACT COMPONENTS （BETTER BE DONE IN MAIN APP.JS）</h2><pre><code>&lt;Provider store=&#123;store&#125;&gt;       rest of components   &lt;/Provider&gt;</code></pre><h2 id="取-STATE-给A-REACT-COMPONENT"><a href="#取-STATE-给A-REACT-COMPONENT" class="headerlink" title="取 STATE 给A REACT COMPONENT"></a>取 STATE 给A REACT COMPONENT</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span> connect <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">const</span> ExpenseList <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>expenses<span class="token punctuation">.</span>length<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span>    expenses<span class="token punctuation">:</span> state<span class="token punctuation">.</span>expenses  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>ExpenseList<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="对于页面props内容"><a href="#对于页面props内容" class="headerlink" title="对于页面props内容"></a>对于页面props内容</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> EditExpensePage <span class="token operator">=</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> This  is edit expense<span class="token punctuation">,</span> editing <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token entity" title="&#125;">&amp;#125;</span>          <span class="token operator">&lt;</span>ExpenseForm            expense<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>expense<span class="token entity" title="&#125;">&amp;#125;</span>             onSubmit<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token punctuation">(</span>currentExpense<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>            props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">editExpense</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span>currentExpense<span class="token punctuation">)</span><span class="token punctuation">)</span>            props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳转回主页 不刷</span>        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span> <span class="token entity" title="&#125;">&amp;#125;</span></code></pre><p><img src="/2020/12/30/expensifyApp-react-learning/image-20201230224502403.png" alt="props"></p><p><img src="/2020/12/30/expensifyApp-react-learning/image-20201230224637810.png"></p><h2 id="Time-compare"><a href="#Time-compare" class="headerlink" title="Time compare"></a>Time compare</h2><p><a href="https://momentjs.com/docs/#/use-it/">https://momentjs.com/docs/#/use-it/</a></p><pre class=" language-jsx"><code class="language-jsx">isSameOrAfter  isSameOrBefore <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-1week Day 5</title>
      <link href="2020/12/21/react-1week05/"/>
      <url>2020/12/21/react-1week05/</url>
      
        <content type="html"><![CDATA[<h1 id="Redux-必要条件"><a href="#Redux-必要条件" class="headerlink" title="Redux 必要条件"></a>Redux 必要条件</h1><p>The Redux core library is available as a package on NPM for use with a module bundler or in a Node application:</p><pre><code># NPMnpm install redux# Yarnyarn add redux</code></pre><h1 id="redux理解"><a href="#redux理解" class="headerlink" title="redux理解"></a>redux理解</h1><p>什么: redux是专门做状态管理的独立第3方库, 不是react插件<br>作用: 对应用中状态进行集中式的管理(写/读)<br>开发: 与react-redux, redux-thunk等插件配合使用</p><p><strong>类比图书馆借书流程：</strong></p><ul><li>首先，我们要借一本书，</li><li>借书的人（React Components），他说‘我要借一本书’（actionCreaters）</li><li>这句话被图书馆管理员（store）听见后，管理员去找这本书，但是他自己记不住</li><li>于是管理员去查阅图书记录本（reducers），记录本会显示这本书放在哪（一来一回）</li><li>管理员（store）知道这本书放在哪，找到这本书，把这本书给借书的人（React Components）</li><li><img src="/2020/12/21/react-1week05/image-20201221164042337.png"></li></ul><p><strong>store、components、actionCreaters、reducers的关系即为：</strong></p><ul><li><p>首先有一个组件，组件要去获取store中的一些数据</p></li><li><p>actionCreaters通过dispatch(action)方法  让store知道 组件要获取数据</p></li><li><p>store在reducer查组件需要什么数据，reducer返回组件应该拿到的数据</p></li><li><p>store获得数据后把数据 返给 组件 </p></li></ul><p>  <img src="/2020/12/21/react-1week05/image-20210101012427891.png"></p><h1 id="Redux核心概念-3个"><a href="#Redux核心概念-3个" class="headerlink" title="Redux核心概念(3个)"></a>Redux核心概念(3个)</h1><h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><p>默认是对象(同步action), {type: ‘xxx’, data: value}, 需要通过对应的actionCreator产生,<br>它的值也可以是函数(异步action), 需要引入redux-thunk才可以</p><h2 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h2><p>根据老的state和指定的action, 返回一个新的state<br>不能修改老的state</p><h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><p>redux最核心的管理对象<br>内部管理着: state和reducer<br>提供方法: getState(), dispatch(action), subscribe(listener)</p><ul><li><code>createStore</code> 创建store</li><li><code>store.dispatch</code> 派发action，action传递给store</li><li><code>store.getState()</code> 获取store里面所有的数据内容</li><li><code>store.subscribe()</code> 订阅store的改变，只要store发生改变，<code>store.subscribe()</code>中的回调函数就会执行</li></ul><h1 id="单个redux例子"><a href="#单个redux例子" class="headerlink" title="单个redux例子"></a>单个redux例子</h1><h2 id="基础-reducer-store-action"><a href="#基础-reducer-store-action" class="headerlink" title="基础 reducer store action"></a>基础 reducer store action</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span> createStore <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'redux'</span> <span class="token comment" spellcheck="true">/** 这是 reducer - a function describing "what happened" - reducer =  a current state value + an action object   - returns a new state value. - 格式： (state, action) => newState * * The Redux state ： plain JS objects, arrays, and primitives. * The root state value is usually an object.    */</span><span class="token keyword">function</span> <span class="token function">counterReducer</span><span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> value<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">case</span> <span class="token string">'INCREMENT'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> value<span class="token punctuation">:</span> state<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span> <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token keyword">case</span> <span class="token string">'DECREMENT'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> value<span class="token punctuation">:</span> state<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">1</span> <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token keyword">case</span> <span class="token string">'RESET'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> value<span class="token punctuation">:</span> <span class="token number">0</span><span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span><span class="token function">createStore</span><span class="token punctuation">(</span>counterReducer<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查状态 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"INCREMENT"</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"INCREMENT"</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"INCREMENT"</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"DECREMENT"</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sstore<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"RESET"</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h2 id="subscribe以及设置特殊值"><a href="#subscribe以及设置特殊值" class="headerlink" title="subscribe以及设置特殊值"></a>subscribe以及设置特殊值</h2><pre class=" language-jsx"><code class="language-jsx"> <span class="token comment" spellcheck="true">//仓库放所有action 以及state</span><span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>  count <span class="token punctuation">:</span><span class="token number">0</span> <span class="token punctuation">,</span>  list<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'任务一'</span><span class="token punctuation">,</span><span class="token string">"任务二"</span><span class="token punctuation">]</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//仓库放所有action 以及state</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token operator">=</span>initState<span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">case</span> <span class="token string">"INCREMENT"</span><span class="token punctuation">:</span>    <span class="token keyword">const</span> incrementBy <span class="token operator">=</span> <span class="token keyword">typeof</span> action<span class="token punctuation">.</span>incrementBy <span class="token operator">===</span><span class="token string">'number'</span><span class="token operator">?</span> action<span class="token punctuation">.</span>incrementBy <span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> count<span class="token punctuation">:</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span>incrementBy <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token keyword">case</span> <span class="token string">"DECREMENT"</span><span class="token punctuation">:</span>   <span class="token keyword">const</span> decrementBy <span class="token operator">=</span> <span class="token keyword">typeof</span> action<span class="token punctuation">.</span>decrementBy <span class="token operator">===</span><span class="token string">'number'</span><span class="token operator">?</span> action<span class="token punctuation">.</span>decrementBy <span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> count<span class="token punctuation">:</span>state<span class="token punctuation">.</span>count<span class="token operator">-</span>decrementBy <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token keyword">case</span> <span class="token string">"RESET"</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> count<span class="token punctuation">:</span><span class="token number">0</span> <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token keyword">case</span> <span class="token string">"SET"</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> count<span class="token punctuation">:</span>action<span class="token punctuation">.</span>count <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">return</span> state  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//实时监控</span><span class="token keyword">const</span> unsub<span class="token operator">=</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//执行</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"INCREMENT"</span><span class="token punctuation">,</span> incrementBy<span class="token punctuation">:</span><span class="token number">5</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"INCREMENT"</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"DECREMENT"</span><span class="token punctuation">,</span> decrementBy<span class="token punctuation">:</span><span class="token number">3</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"SET"</span><span class="token punctuation">,</span> count <span class="token punctuation">:</span> <span class="token number">100</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//直接取消掉subscribe</span><span class="token function">unsub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后面执行但是不会跟踪</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"DECREMENT"</span><span class="token punctuation">,</span> decrementBy<span class="token punctuation">:</span><span class="token number">3</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>利用解构 以及整理Action</p><pre class=" language-jsx"><code class="language-jsx"> <span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>  count <span class="token punctuation">:</span><span class="token number">0</span> <span class="token punctuation">,</span>  list<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'任务一'</span><span class="token punctuation">,</span><span class="token string">"任务二"</span><span class="token punctuation">]</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//仓库放所有action选择 以及state 以及返回新的对象</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token operator">=</span>initState<span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">case</span> <span class="token string">"INCREMENT"</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> count<span class="token punctuation">:</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span>action<span class="token punctuation">.</span>incrementBy <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"DECREMENT"</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> count<span class="token punctuation">:</span>state<span class="token punctuation">.</span>count<span class="token operator">-</span>action<span class="token punctuation">.</span>decrementBy <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"RESET"</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> count<span class="token punctuation">:</span><span class="token number">0</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"SET"</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> count<span class="token punctuation">:</span>action<span class="token punctuation">.</span>count <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">return</span> state  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//实时监控</span><span class="token keyword">const</span> unsub<span class="token operator">=</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回操作函数（对象包装函数）</span><span class="token keyword">const</span> increment <span class="token operator">=</span><span class="token punctuation">(</span>payload<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span>  type<span class="token punctuation">:</span> <span class="token string">"INCREMENT"</span><span class="token punctuation">,</span>  incrementBy<span class="token punctuation">:</span><span class="token keyword">typeof</span> payload<span class="token punctuation">.</span>incrementBy <span class="token operator">===</span><span class="token string">'number'</span><span class="token operator">?</span> payload<span class="token punctuation">.</span>incrementBy <span class="token punctuation">:</span><span class="token number">1</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//这里利用解构 简化写法</span><span class="token keyword">const</span> decrement <span class="token operator">=</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>decrementBy<span class="token operator">=</span><span class="token number">1</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span> <span class="token keyword">return</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"DECREMENT"</span><span class="token punctuation">,</span> decrementBy<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//执行</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>incrementBy<span class="token punctuation">:</span><span class="token number">6</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"INCREMENT"</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>decrementBy<span class="token punctuation">:</span><span class="token number">5</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"SET"</span><span class="token punctuation">,</span> count <span class="token punctuation">:</span> <span class="token number">100</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//直接取消掉subscribe</span><span class="token function">unsub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后面执行但是不会跟踪</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"DECREMENT"</span><span class="token punctuation">,</span> decrementBy<span class="token punctuation">:</span><span class="token number">3</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="最终完整单个redux例子"><a href="#最终完整单个redux例子" class="headerlink" title="最终完整单个redux例子"></a>最终完整单个redux例子</h2><p>最终得到基础的单个redux， 这里注意的重点是，我们用reducer 是为了通过得到一个state以及action 从而返回新的state，并没有改变原本的state，只是给了新的state</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>  count <span class="token punctuation">:</span><span class="token number">0</span> <span class="token punctuation">,</span>  list<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'任务一'</span><span class="token punctuation">,</span><span class="token string">"任务二"</span><span class="token punctuation">]</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> countReducer<span class="token operator">=</span><span class="token punctuation">(</span>state<span class="token operator">=</span>initState<span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">case</span> <span class="token string">"INCREMENT"</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> count<span class="token punctuation">:</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span>action<span class="token punctuation">.</span>incrementBy <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"DECREMENT"</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> count<span class="token punctuation">:</span>state<span class="token punctuation">.</span>count<span class="token operator">-</span>action<span class="token punctuation">.</span>decrementBy <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"RESET"</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> count<span class="token punctuation">:</span><span class="token number">0</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"SET"</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> count<span class="token punctuation">:</span>action<span class="token punctuation">.</span>setCount <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">return</span> state  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span> <span class="token comment" spellcheck="true">//仓库放所有action选择 以及state 以及返回新的对象</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>countReducer<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//实时监控</span><span class="token keyword">const</span> unsub<span class="token operator">=</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回操作函数（对象包装函数） action generator</span><span class="token keyword">const</span> increment <span class="token operator">=</span><span class="token punctuation">(</span>payload<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span>  type<span class="token punctuation">:</span> <span class="token string">"INCREMENT"</span><span class="token punctuation">,</span>  incrementBy<span class="token punctuation">:</span><span class="token keyword">typeof</span> payload<span class="token punctuation">.</span>incrementBy <span class="token operator">===</span><span class="token string">'number'</span><span class="token operator">?</span> payload<span class="token punctuation">.</span>incrementBy <span class="token punctuation">:</span><span class="token number">1</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//这里利用解构 简化写法</span><span class="token keyword">const</span> decrement <span class="token operator">=</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>decrementBy<span class="token operator">=</span><span class="token number">1</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span> <span class="token keyword">return</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"DECREMENT"</span><span class="token punctuation">,</span> decrementBy<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> reset <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"RESET"</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>setCount<span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"SET"</span><span class="token punctuation">,</span> setCount<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//执行</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>incrementBy<span class="token punctuation">:</span><span class="token number">6</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>type<span class="token punctuation">:</span> <span class="token string">"INCREMENT"</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>decrementBy<span class="token punctuation">:</span><span class="token number">5</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>decrementBy<span class="token punctuation">:</span><span class="token number">5</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>setCount<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">99</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//直接取消掉subscribe</span><span class="token function">unsub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后面执行但是不会跟踪</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> type<span class="token punctuation">:</span> <span class="token string">"DECREMENT"</span><span class="token punctuation">,</span> decrementBy<span class="token punctuation">:</span><span class="token number">3</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="多个reducer例子"><a href="#多个reducer例子" class="headerlink" title="多个reducer例子"></a>多个reducer例子</h1><p>那么接下来看看多个reducer的时候 处理数据怎么做</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//两个数据例子</span><span class="token keyword">const</span> demoState<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  expenses<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    id<span class="token punctuation">:</span><span class="token string">'poijasdfhwer'</span><span class="token punctuation">,</span>    description<span class="token punctuation">:</span><span class="token string">'January Rent'</span><span class="token punctuation">,</span>    note<span class="token punctuation">:</span><span class="token string">'This was the final payment'</span><span class="token punctuation">,</span>    amount<span class="token punctuation">:</span><span class="token number">54500</span><span class="token punctuation">,</span>    createdAt<span class="token punctuation">:</span><span class="token number">0</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  filters<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    text<span class="token punctuation">:</span><span class="token string">'rent'</span><span class="token punctuation">,</span>    sortBy<span class="token punctuation">:</span><span class="token string">'amount'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//date or amount</span>    startDate<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>    endDate<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//default state &amp; reducer</span><span class="token keyword">const</span> expensesReducerDefaultState<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> expensesReducer<span class="token operator">=</span><span class="token punctuation">(</span>state<span class="token operator">=</span>expensesReducerDefaultState<span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"ADD_EXPENSE"</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">//return  state.concat(action.expense);//此处不影响原先数组 只是返回新数组 </span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">,</span>action<span class="token punctuation">.</span>expense<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"REMOVE_EXPENSE"</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>elem<span class="token punctuation">.</span>id <span class="token operator">!==</span> action<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"EDIT_EXPENSE"</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">//return  state.concat(action.expense);//此处不影响原先数组 只是返回新数组 </span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>expense<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>expense<span class="token punctuation">.</span>id<span class="token operator">===</span>action<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token operator">...</span>expense<span class="token punctuation">,</span>          <span class="token operator">...</span>action<span class="token punctuation">.</span>updates<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> expense      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">return</span> state  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回操作函数（对象包装函数） action generator</span><span class="token keyword">const</span> addExpense<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  description<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>  note<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>  amount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  createdAt<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span><span class="token string">"ADD_EXPENSE"</span><span class="token punctuation">,</span>    expense<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    id<span class="token punctuation">:</span><span class="token function">uuidv4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    description<span class="token punctuation">,</span>    note<span class="token punctuation">,</span>    amount<span class="token punctuation">,</span>    createdAt<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> removeExpense<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span><span class="token string">"REMOVE_EXPENSE"</span><span class="token punctuation">,</span> id <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> editExpense<span class="token operator">=</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>updates<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span><span class="token string">"EDIT_EXPENSE"</span><span class="token punctuation">,</span>    id<span class="token punctuation">,</span>    updates<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//default state &amp; reducer</span><span class="token keyword">const</span> filtersReducerDefaultState<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    text<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    sortBy<span class="token punctuation">:</span><span class="token string">'amount'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//date or amount</span>    startDate<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>    endDate<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">const</span> filtersReducer<span class="token operator">=</span><span class="token punctuation">(</span>state<span class="token operator">=</span>filtersReducerDefaultState<span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"SET_TEXT_FILTER"</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token operator">...</span>state<span class="token punctuation">,</span>      text<span class="token punctuation">:</span>action<span class="token punctuation">.</span>name    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">return</span> state  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//action</span><span class="token keyword">const</span> setTextFilter <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  type<span class="token punctuation">:</span><span class="token string">"SET_TEXT_FILTER"</span><span class="token punctuation">,</span>  name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//仓库放所有action选择 以及state 以及返回新的对象</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>expenses<span class="token punctuation">:</span>expensesReducer<span class="token punctuation">,</span>filters<span class="token punctuation">:</span>filtersReducer<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//实时监控</span><span class="token keyword">const</span> unsub<span class="token operator">=</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> expenseOne <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addExpense</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>description<span class="token punctuation">:</span><span class="token string">"Rent"</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">1000</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">const</span> expenseTwo <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addExpense</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>description<span class="token punctuation">:</span><span class="token string">"Coffee"</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">666</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">removeExpense</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token punctuation">:</span>expenseOne<span class="token punctuation">.</span>expense<span class="token punctuation">.</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">editExpense</span><span class="token punctuation">(</span>expenseTwo<span class="token punctuation">.</span>expense<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>description<span class="token punctuation">:</span><span class="token string">"RentNew"</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">19999</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setTextFilter</span><span class="token punctuation">(</span><span class="token string">"Rent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>这里注意 对于箭头函数中，返回时对象，可以直接使用 ( )=&gt;( {对象})</p><p>继续补充例子中的function</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//default state &amp; reducer</span><span class="token keyword">const</span> expensesReducerDefaultState<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> expensesReducer<span class="token operator">=</span><span class="token punctuation">(</span>state<span class="token operator">=</span>expensesReducerDefaultState<span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"ADD_EXPENSE"</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">//return  state.concat(action.expense);//此处不影响原先数组 只是返回新数组 </span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">,</span>action<span class="token punctuation">.</span>expense<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"REMOVE_EXPENSE"</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>elem<span class="token punctuation">.</span>id <span class="token operator">!==</span> action<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"EDIT_EXPENSE"</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">//return  state.concat(action.expense);//此处不影响原先数组 只是返回新数组 </span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>expense<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>expense<span class="token punctuation">.</span>id<span class="token operator">===</span>action<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token operator">...</span>expense<span class="token punctuation">,</span>          <span class="token operator">...</span>action<span class="token punctuation">.</span>updates<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> expense      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">return</span> state  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//action</span><span class="token keyword">const</span> addExpense<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  description<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>  note<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>  amount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  createdAt<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span><span class="token string">"ADD_EXPENSE"</span><span class="token punctuation">,</span>    expense<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    id<span class="token punctuation">:</span><span class="token function">uuidv4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    description<span class="token punctuation">,</span>    note<span class="token punctuation">,</span>    amount<span class="token punctuation">,</span>    createdAt<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> removeExpense<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span><span class="token string">"REMOVE_EXPENSE"</span><span class="token punctuation">,</span> id <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> editExpense<span class="token operator">=</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>updates<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span><span class="token string">"EDIT_EXPENSE"</span><span class="token punctuation">,</span>    id<span class="token punctuation">,</span>    updates<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> filtersReducerDefaultState<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    text<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    sortBy<span class="token punctuation">:</span><span class="token string">'amount'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//date or amount</span>    startDate<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>    endDate<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">const</span> filtersReducer<span class="token operator">=</span><span class="token punctuation">(</span>state<span class="token operator">=</span>filtersReducerDefaultState<span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"SET_TEXT_FILTER"</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token operator">...</span>state<span class="token punctuation">,</span>      text<span class="token punctuation">:</span>action<span class="token punctuation">.</span>name    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"SORT_BY_DATE"</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token operator">...</span>state<span class="token punctuation">,</span>      sortBy<span class="token punctuation">:</span><span class="token string">'date'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"SORT_BY_AMOUNT"</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token operator">...</span>state<span class="token punctuation">,</span>      sortBy<span class="token punctuation">:</span><span class="token string">'amount'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"SET_START_DATE"</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token operator">...</span>state<span class="token punctuation">,</span>      startDate<span class="token punctuation">:</span>action<span class="token punctuation">.</span>startDate    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"SET_END_DATE"</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token operator">...</span>state<span class="token punctuation">,</span>      endDate<span class="token punctuation">:</span>action<span class="token punctuation">.</span>endDate    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">return</span> state  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> setTextFilter <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  type<span class="token punctuation">:</span><span class="token string">"SET_TEXT_FILTER"</span><span class="token punctuation">,</span>  name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> sortByDate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  type<span class="token punctuation">:</span><span class="token string">"SORT_BY_DATE"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> sortByAmount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  type<span class="token punctuation">:</span><span class="token string">"SORT_BY_AMOUNT"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> setStartDate<span class="token operator">=</span><span class="token punctuation">(</span>startDate<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  type<span class="token punctuation">:</span><span class="token string">"SET_START_DATE"</span><span class="token punctuation">,</span>  startDate<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> setEndDate<span class="token operator">=</span><span class="token punctuation">(</span>endDate<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  type<span class="token punctuation">:</span><span class="token string">"SET_END_DATE"</span><span class="token punctuation">,</span>  endDate<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//仓库放所有action选择 以及state 以及返回新的对象</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>expenses<span class="token punctuation">:</span>expensesReducer<span class="token punctuation">,</span>filters<span class="token punctuation">:</span>filtersReducer<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">const</span> getVisibleExpenses<span class="token operator">=</span><span class="token punctuation">(</span>expenses<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>text<span class="token punctuation">,</span>sortBy<span class="token punctuation">,</span>startDate<span class="token punctuation">,</span>endDate<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> expenses<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//if not set the startdate and createdAt is ok</span>    <span class="token keyword">const</span> startDateMatch <span class="token operator">=</span> <span class="token keyword">typeof</span> startDate <span class="token operator">!==</span> <span class="token string">'number'</span> <span class="token operator">||</span> element<span class="token punctuation">.</span>createdAt <span class="token operator">>=</span> startDate<span class="token punctuation">;</span>    <span class="token keyword">const</span> endDateMatch <span class="token operator">=</span>  <span class="token keyword">typeof</span> endDate <span class="token operator">!==</span> <span class="token string">'number'</span> <span class="token operator">||</span> element<span class="token punctuation">.</span>createdAt <span class="token operator">&lt;=</span> endDate<span class="token punctuation">;</span>    <span class="token keyword">const</span> textMatch <span class="token operator">=</span> element<span class="token punctuation">.</span>description<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> startDateMatch <span class="token operator">&amp;&amp;</span> endDateMatch <span class="token operator">&amp;&amp;</span> textMatch<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sortBy <span class="token operator">===</span> <span class="token string">"date"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> a<span class="token punctuation">.</span>createdAt <span class="token operator">></span> b<span class="token punctuation">.</span>createdAt <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sortBy <span class="token operator">===</span> <span class="token string">"amount"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> a<span class="token punctuation">.</span>amount <span class="token operator">></span> b<span class="token punctuation">.</span>amount <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实时监控</span><span class="token keyword">const</span> unsub<span class="token operator">=</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> state<span class="token operator">=</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> visibleExpenses <span class="token operator">=</span><span class="token function">getVisibleExpenses</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>expenses<span class="token punctuation">,</span>state<span class="token punctuation">.</span>filters<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>visibleExpenses<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回操作函数（对象包装函数） action generator</span> <span class="token keyword">const</span> expenseOne <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addExpense</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>description<span class="token punctuation">:</span><span class="token string">"cRent"</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">215610</span><span class="token punctuation">,</span>createdAt<span class="token punctuation">:</span><span class="token number">1000</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> expenseTwo <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addExpense</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>description<span class="token punctuation">:</span><span class="token string">"Coffee1"</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>createdAt<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1000</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addExpense</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>description<span class="token punctuation">:</span><span class="token string">"Coffee2"</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>createdAt<span class="token punctuation">:</span><span class="token number">2000</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addExpense</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>description<span class="token punctuation">:</span><span class="token string">"Coffee3"</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>createdAt<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//store.dispatch(removeExpense(&amp;#123;id:expenseOne.expense.id&amp;#125;))  </span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">editExpense</span><span class="token punctuation">(</span>expenseTwo<span class="token punctuation">.</span>expense<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>description<span class="token punctuation">:</span><span class="token string">"c"</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">9</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setTextFilter</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">sortByAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//store.dispatch(sortByDate()); </span> <span class="token comment" spellcheck="true">//store.dispatch(setStartDate(0)); </span> <span class="token comment" spellcheck="true">//store.dispatch(setEndDate(999)); </span><span class="token comment" spellcheck="true">// const demoState=&amp;#123;</span><span class="token comment" spellcheck="true">//   expenses:[&amp;#123;</span><span class="token comment" spellcheck="true">//     id:'poijasdfhwer',</span><span class="token comment" spellcheck="true">//     description:'January Rent',</span><span class="token comment" spellcheck="true">//     note:'This was the final payment',</span><span class="token comment" spellcheck="true">//     amount:54500,</span><span class="token comment" spellcheck="true">//     createdAt:0</span><span class="token comment" spellcheck="true">//   &amp;#125;],</span><span class="token comment" spellcheck="true">//   filters:&amp;#123;</span><span class="token comment" spellcheck="true">//     text:'rent',</span><span class="token comment" spellcheck="true">//     sortBy:'amount',//date or amount</span><span class="token comment" spellcheck="true">//     startDate:undefined,</span><span class="token comment" spellcheck="true">//     endDate:undefined,</span><span class="token comment" spellcheck="true">//   &amp;#125;</span><span class="token comment" spellcheck="true">// &amp;#125;</span></code></pre><h1 id="高阶组件（Higher-Order-Components）"><a href="#高阶组件（Higher-Order-Components）" class="headerlink" title="高阶组件（Higher-Order Components）"></a>高阶组件（Higher-Order Components）</h1><p>高阶组件就是一个函数，传给它一个组件，它返回一个新的组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">NewComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 可以做很多自定义逻辑</span>    render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> NewComponent<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2> <img src="/2020/12/21/react-1week05/image-20201229112941453.png" style="zoom: 80%;"><img src="/2020/12/21/react-1week05/image-20201229113015799.png"><h1 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React Redux"></a>React Redux</h1><blockquote><p><strong>Redux 跟 React 並沒有關係。你可以用 React、Angular、Ember、jQuery 或甚至原生 JavaScript 來撰寫 Redux 應用程式。</strong></p></blockquote><img src="/2020/12/21/react-1week05/image-20210101012541717.png" style="zoom:67%;"><p><code>react-redux</code> 是 React 和 Redux 间的桥梁，使用 <code>Provider</code>、<code>connect</code> 去连结 <code>store</code> 和 React View。</p><p>整合了 <code>react-redux</code> 后，我们的 React App 就可以解决传统跨 Component 之前传递 state 的问题和困难。只要通过 <code>Provider</code> 就可以让每个 React App 中的 <code>Component</code> 取用 store 中的 state，非常方便</p><img src="/2020/12/21/react-1week05/image-20210101012827213.png" style="zoom: 67%;"><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a><a href="https://react-redux.js.org/introduction/quick-start#installation">Installation</a></h2><pre class=" language-js"><code class="language-js">npm install react<span class="token operator">-</span>redux yarn add react<span class="token operator">-</span>redux</code></pre><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><p>React Redux provides<code> &lt;Provider /&gt;</code>, which makes the Redux store available to the rest of your app</p><h3 id="使用provider的例子"><a href="#使用provider的例子" class="headerlink" title="使用provider的例子"></a>使用provider的例子</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span> Provider <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>     <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>        expenses<span class="token punctuation">:</span>expensesReducer<span class="token punctuation">,</span>        filters<span class="token punctuation">:</span>filtersReducer    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Provider</span> <span class="token attr-name">store</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;store&amp;#125;</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Provider</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>  rootElement<span class="token punctuation">)</span></code></pre><h2 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h2><p>React Redux provides a connect function for you to connect your component to the store.</p><p>connect 返回的是函数，不是组件</p><h3 id="使用connect例子1"><a href="#使用connect例子1" class="headerlink" title="使用connect例子1"></a>使用connect例子1</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span>connect<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token keyword">const</span> ExpenseList <span class="token operator">=</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Expenses<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>expenses<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>          <span class="token operator">&lt;</span>ExpenseListItem key<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>element<span class="token punctuation">.</span>id<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token operator">...</span>element<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将state中的信息取出来</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token comment" spellcheck="true">/*, ownProps*/</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span>      expenses<span class="token punctuation">:</span> <span class="token function">selectExpenses</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>expenses<span class="token punctuation">,</span>state<span class="token punctuation">.</span>filters<span class="token punctuation">)</span><span class="token punctuation">,</span>      filters<span class="token punctuation">:</span>state<span class="token punctuation">.</span>filters    <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//connect传递mapStateToProps数据给ExpenseList</span><span class="token keyword">const</span> ConnectExpenseList<span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>ExpenseList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">export</span> <span class="token keyword">default</span> ConnectExpenseList</code></pre><h2 id="使用connect例子-input"><a href="#使用connect例子-input" class="headerlink" title="使用connect例子 - input"></a>使用connect例子 - input</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span>connect<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span>setTextFilter<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'../actions/filters'</span><span class="token comment" spellcheck="true">//直接绑定input</span><span class="token keyword">const</span> ExpenseListFilters <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token operator">&lt;</span>input         type<span class="token operator">=</span><span class="token string">"text"</span>         value<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>filters<span class="token punctuation">.</span>text<span class="token entity" title="&#125;">&amp;#125;</span>        onChange<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span> props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setTextFilter</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token operator">/</span><span class="token operator">></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token comment" spellcheck="true">/*, ownProps*/</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span>      filters<span class="token punctuation">:</span>state<span class="token punctuation">.</span>filters    <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//不用下面这种</span><span class="token comment" spellcheck="true">//const ConnectExpenseList= connect(mapStateToProps)(ExpenseListFilters);</span><span class="token keyword">export</span> <span class="token keyword">default</span>  <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>ExpenseListFilters<span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><p>使用connect - 提交form</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ExpenseForm <span class="token keyword">from</span> <span class="token string">'./ExpenseForm'</span><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span>connect<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span>addExpense<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'../actions/expenses'</span><span class="token keyword">const</span> AddExpensePage <span class="token operator">=</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Add Expense<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token operator">&lt;</span>ExpenseForm         onSubmit<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token punctuation">(</span>newExpense<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>            props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addExpense</span><span class="token punctuation">(</span>newExpense<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里相当于store.dispatch</span>            <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>AddExpensePage<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//form本身，重点是要双向绑定 由于提交form 要用类元素 </span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">'moment'</span><span class="token keyword">import</span> <span class="token string">"react-dates/initialize"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"react-dates/lib/css/_datepicker.css"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span> SingleDatePicker <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">"react-dates"</span><span class="token punctuation">;</span><span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Do, MMM YYYY"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ExpenseForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>    state<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>        description<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        amount<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        note<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        createdAt<span class="token punctuation">:</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        canlendarFocused<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        error<span class="token punctuation">:</span><span class="token string">''</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    onDescriptionChange <span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>         <span class="token comment" spellcheck="true">//console.log(e.target.value);</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>            description<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value          <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    onAmountChange<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token comment" spellcheck="true">//console.log(e.target.value);</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>            amount<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value          <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    onDateChange<span class="token operator">=</span><span class="token punctuation">(</span>createdAt<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>createdAt<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>createdAt<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>        <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    onFocusChange<span class="token operator">=</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> focused <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> canlendarFocused<span class="token punctuation">:</span> focused <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>    onNoteChange<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token comment" spellcheck="true">//console.log(e.target.value);</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>            note<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value          <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token comment" spellcheck="true">//onsubmit的函数赋予input 从上级拿处理函数主体</span>    onSubmit<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>description <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>            error<span class="token punctuation">:</span> <span class="token string">"Please provide description and amount!"</span>            <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">else</span> <span class="token entity" title="&#123;">&amp;#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"submitting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>                description<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>description<span class="token punctuation">,</span>                amount<span class="token punctuation">:</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>amount<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span>                note<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>note<span class="token punctuation">,</span>                createdAt<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>createdAt<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>        <span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token entity" title="&#125;">&amp;#125;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>             <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>error <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>error<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.onSubmit&amp;#125;</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span> <span class="token attr-name">autoFocus</span>    <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.state.description&amp;#125;</span> <span class="token attr-name">onChange</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.onDescriptionChange&amp;#125;</span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Amount<span class="token punctuation">"</span></span>   <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.state.amount&amp;#125;</span> <span class="token attr-name">onChange</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.onAmountChange&amp;#125;</span> <span class="token punctuation">/></span></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* 此处用airbnb date pick */</span><span class="token entity" title="&#125;">&amp;#125;</span>                <span class="token operator">&lt;</span>SingleDatePicker                    date<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>createdAt<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token comment" spellcheck="true">// momentPropTypes.momentObj or null</span>                    onDateChange<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onDateChange<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token comment" spellcheck="true">// PropTypes.func.isRequired</span>                    focused<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>canlendarFocused<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token comment" spellcheck="true">// PropTypes.bool</span>                    onFocusChange<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onFocusChange<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token comment" spellcheck="true">// PropTypes.func.isRequired</span>                    id<span class="token operator">=</span><span class="token string">"single_date_picker"</span> <span class="token comment" spellcheck="true">// PropTypes.string.isRequired,</span>                    isOutsideRange<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token boolean">false</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//当前时间之前的也可以加入</span>                    numberOfMonths<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token number">1</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//只显示一个月</span>                <span class="token operator">/</span><span class="token operator">></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add</span> <span class="token attr-name">note</span> <span class="token attr-name">if</span> <span class="token attr-name">you</span> <span class="token attr-name">need</span> <span class="token attr-name">(optional)"</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.state.note&amp;#125;</span> <span class="token attr-name">onChange</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.onNoteChange&amp;#125;</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Add expense<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span> </code></pre><h2 id="完整练习例子：-expensifyApp-indecisionApp-counter"><a href="#完整练习例子：-expensifyApp-indecisionApp-counter" class="headerlink" title="完整练习例子： expensifyApp indecisionApp counter"></a>完整练习例子： expensifyApp indecisionApp counter</h2><p>理解图：</p><p><img src="/2020/12/21/react-1week05/image-20210101012217492.png"></p><h1 id="tool"><a href="#tool" class="headerlink" title="tool"></a>tool</h1><p><a href="https://github.com/zalmoxisus/redux-devtools-extension">https://github.com/zalmoxisus/redux-devtools-extension</a></p><h1 id="推荐读物"><a href="#推荐读物" class="headerlink" title="推荐读物"></a>推荐读物</h1><p><a href="https://wizardforcel.gitbooks.io/reactjs101/content/">从零开始学 ReactJS详细教学</a></p><p><a href="https://chentsulin.github.io/redux/docs/introduction/index.html">查api&amp;简单解释</a></p><h2 id="其他练习"><a href="#其他练习" class="headerlink" title="其他练习"></a>其他练习</h2><p><a href="https://github.com/blueflylin/reactjs101/blob/master/Ch09/react-router-redux-github-finder.md">练习1</a> </p><p><a href="https://github.com/blueflylin/reactjs101/blob/master/Ch10/react-router-redux-node-isomorphic-javascript-open-cook.md">练习2</a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/qq_26347769/article/details/109634399">https://blog.csdn.net/qq_26347769/article/details/109634399</a></p><p><a href="https://juejin.cn/post/6844903894082928654">https://juejin.cn/post/6844903894082928654</a></p><p><a href="https://chentsulin.github.io/redux/docs/basics/UsageWithReact.html">https://chentsulin.github.io/redux/docs/basics/UsageWithReact.html</a></p><p><a href="https://wizardforcel.gitbooks.io/reactjs101/content/Ch07/react-redux-real-world-example.html">https://wizardforcel.gitbooks.io/reactjs101/content/Ch07/react-redux-real-world-example.html</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/12/19/temp/"/>
      <url>2020/12/19/temp/</url>
      
        <content type="html"><![CDATA[<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">IndecisionApp</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">const</span> title <span class="token operator">=</span><span class="token string">'Indecision App'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> subtitle <span class="token operator">=</span> <span class="token string">'Put your life in the hand of Computer'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"option 1"</span><span class="token punctuation">,</span><span class="token string">"option 2"</span><span class="token punctuation">,</span><span class="token string">"option 3"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;title&amp;#125;</span> <span class="token attr-name">subtitle</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;subtitle&amp;#125;/</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Actions</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Options</span> <span class="token attr-name">optionArray</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;options&amp;#125;/</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AddOption</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">// class Header extends React.Component&amp;#123;</span><span class="token comment" spellcheck="true">//   render()&amp;#123;</span><span class="token comment" spellcheck="true">//     return (</span><span class="token comment" spellcheck="true">//       &lt;div></span><span class="token comment" spellcheck="true">//         &lt;h1>&amp;#123;this.props.title&amp;#125;&lt;/h1></span><span class="token comment" spellcheck="true">//         &lt;h2>&amp;#123;this.props.subtitle&amp;#125;&lt;/h2></span><span class="token comment" spellcheck="true">//       &lt;/div></span><span class="token comment" spellcheck="true">//     )</span><span class="token comment" spellcheck="true">//   &amp;#125;</span><span class="token comment" spellcheck="true">// &amp;#125; </span><span class="token comment" spellcheck="true">// class Actions extends React.Component&amp;#123;</span><span class="token comment" spellcheck="true">//   handlePick()&amp;#123;</span><span class="token comment" spellcheck="true">//     alert("pick!!!");</span><span class="token comment" spellcheck="true">//   &amp;#125;</span><span class="token comment" spellcheck="true">//   render()&amp;#123;</span><span class="token comment" spellcheck="true">//     return (</span><span class="token comment" spellcheck="true">//       &lt;div></span><span class="token comment" spellcheck="true">//         &amp;#123;</span><span class="token comment" spellcheck="true">/* &lt;p>This is Action&lt;/p> */</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//         &lt;button onClick=&amp;#123;this.handlePick&amp;#125; >What should I do&lt;/button></span><span class="token comment" spellcheck="true">//       &lt;/div></span><span class="token comment" spellcheck="true">//     )</span><span class="token comment" spellcheck="true">//   &amp;#125;</span><span class="token comment" spellcheck="true">// &amp;#125;</span><span class="token comment" spellcheck="true">// class Options extends React.Component&amp;#123;</span><span class="token comment" spellcheck="true">//   constructor(props)&amp;#123;</span><span class="token comment" spellcheck="true">//     super(props);</span><span class="token comment" spellcheck="true">//     this.removeAll = this.removeAll.bind(this);</span><span class="token comment" spellcheck="true">//   &amp;#125;</span><span class="token comment" spellcheck="true">//   removeAll()&amp;#123;</span><span class="token comment" spellcheck="true">//     console.log(this.props.optionArray);</span><span class="token comment" spellcheck="true">//   &amp;#125;</span><span class="token comment" spellcheck="true">//   render()&amp;#123;</span><span class="token comment" spellcheck="true">//     return (</span><span class="token comment" spellcheck="true">//       &lt;div></span><span class="token comment" spellcheck="true">//         Here are option Components from optionArray</span><span class="token comment" spellcheck="true">//         &amp;#123;</span><span class="token comment" spellcheck="true">//          (this.props.optionArray).map((option) => &amp;#123;</span><span class="token comment" spellcheck="true">//             return &lt;Option key=&amp;#123;option&amp;#125; optionText=&amp;#123;option&amp;#125;/></span><span class="token comment" spellcheck="true">//           &amp;#125;)</span><span class="token comment" spellcheck="true">//         &amp;#125; </span><span class="token comment" spellcheck="true">//         &amp;#123;</span><span class="token comment" spellcheck="true">/* 绑定“参数的this” */</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//        &lt;button onClick=&amp;#123;this.removeAll&amp;#125;> Remove All&lt;/button></span><span class="token comment" spellcheck="true">//       &lt;/div></span><span class="token comment" spellcheck="true">//     )</span><span class="token comment" spellcheck="true">//   &amp;#125;</span><span class="token comment" spellcheck="true">// &amp;#125;</span><span class="token comment" spellcheck="true">// class Option extends React.Component&amp;#123;</span><span class="token comment" spellcheck="true">//   render()&amp;#123;</span><span class="token comment" spellcheck="true">//     return (</span><span class="token comment" spellcheck="true">//       &lt;div></span><span class="token comment" spellcheck="true">//         &amp;#123;</span><span class="token comment" spellcheck="true">/* &lt;p>This is Option Components&lt;/p> */</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//         &lt;p>&amp;#123;this.props.optionText&amp;#125;&lt;/p></span><span class="token comment" spellcheck="true">//       &lt;/div></span><span class="token comment" spellcheck="true">//     )</span><span class="token comment" spellcheck="true">//   &amp;#125;</span><span class="token comment" spellcheck="true">// &amp;#125;</span><span class="token comment" spellcheck="true">//AddOption</span><span class="token keyword">class</span> <span class="token class-name">AddOption</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">addOptionFunc</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//防止刷新</span>    <span class="token keyword">const</span> option <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>option<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得输入值</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>      e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>option<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空输入值的显示</span>    <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is AddOption Components<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.addOptionFunc&amp;#125;</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span><span class="token operator">+</span><span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IndecisionApp</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/12/19/js-promise/"/>
      <url>2020/12/19/js-promise/</url>
      
        <content type="html"><![CDATA[<p>title: JS 回调函数 &amp; Promise &amp; async<br>top: false<br>cover: false<br>toc: true<br>mathjax: true<br>date: 2020-12-10 19:53:09<br>password:<br>summary:<br>tags: JS<br>categories:</p><h1 id="js处理error"><a href="#js处理error" class="headerlink" title="js处理error"></a>js处理error</h1><h2 id="错误的类型"><a href="#错误的类型" class="headerlink" title="错误的类型"></a>错误的类型</h2><ul><li><p>Error错误：所有错误的父类型</p></li><li><p>ReferenceError: 引用的变量不存在</p></li><li><p>TypeError:数据类型不正确的错误</p></li><li><p>RangeError:数据值不在其所允许的范围内</p></li><li><p>SyntaxError:语法错误</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.ReferenceError: 引用的变量不存在</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Uncaught ReferenceError: a is not defined</span><span class="token comment" spellcheck="true">//2.TypeError:数据类型不正确的错误</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Uncaught TypeError: Cannot read property 'xxx' of null</span><span class="token comment" spellcheck="true">//3.RangeError:数据值不在其所允许的范围内</span><span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Uncaught RangeError: Maximum call stack size exceeded</span><span class="token comment" spellcheck="true">//4.SyntaxError:语法错误</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token string">''</span><span class="token string">''</span> <span class="token comment" spellcheck="true">//Uncaught SyntaxError: Unexpected string</span></code></pre></li></ul><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ul><li>捕获错误：try … catch …</li><li>抛出错误：throw error</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> b  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'出错之后'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.throw error</span><span class="token keyword">function</span> some <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'当前时间为奇数，可以执行任务'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'当前时间为偶数,无法执行'</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//捕获异常</span><span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="错误对象"><a href="#错误对象" class="headerlink" title="错误对象"></a>错误对象</h2><ul><li>message属性：错误相关信息</li><li>stack属性:函数调用栈记录信息</li></ul><h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><h3 id="回调函数基本定义"><a href="#回调函数基本定义" class="headerlink" title="回调函数基本定义"></a>回调函数基本定义</h3><ol><li>自己定义</li><li>不会亲自调用，但是自己执行</li><li>setTimeout（）中传递回调函数</li></ol><h3 id="回调函数类型"><a href="#回调函数类型" class="headerlink" title="回调函数类型"></a>回调函数类型</h3><ul><li><p>同步回调</p><ul><li><p>理解：立即执行，完全执行完了才结束，不会放入回调队列中</p><p>例子：数组遍历相关的回调函数/ promise的excutor函数</p></li></ul></li><li><p>异步回调</p><ul><li><p>理解: 不会立即执行，会放入回调队列中将来执行</p><p>例子：定时器回调 / ajax回调 / promise的成功|失败回调</p></li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.同步回调函数</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//遍历回调，同步回调函数</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foreach()之后'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.异步回调函数</span><span class="token comment" spellcheck="true">/*** js中两种定时器，setTimeout和setInterval的区别*     setTimeout只在指定时间后执行一次*     setInterval以指定时间为周期循环执行*/</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//异步回调函数，会放入队列中将来执行</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout callback()'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout()之后执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="JS-Promise"><a href="#JS-Promise" class="headerlink" title="JS Promise"></a>JS Promise</h1><h2 id="Promise基本理解"><a href="#Promise基本理解" class="headerlink" title="Promise基本理解"></a>Promise基本理解</h2><ul><li><p><strong>抽象表达</strong>：promise是js中进行异步编程的新的解决方案。（旧的是纯粹的回调函数）</p></li><li><p><strong>具体表达</strong>：从语法上来看，promise是一个构造函数。</p><p>​                  从功能上来说，promise对象用来封装一个异步操作，并可以获取其结果。</p></li></ul><h2 id="异步操作的三个阶段"><a href="#异步操作的三个阶段" class="headerlink" title="异步操作的三个阶段"></a>异步操作的三个阶段</h2><p><strong>第一阶段</strong></p><p>回调函数作为参数传入，异步结果作为回调函数的参数传入，回调函数在异步操作后调用，以完成对异步结果的获取和处理。</p><p>因为基本的异步操作的执行，是无法直接得到执行结果的。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//基本的同步函数</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token operator">+</span>m<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> result<span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//40</span><span class="token comment" spellcheck="true">//基本的异步函数 - 出现的问题就是异步函数api没有办法获得返回的值</span><span class="token keyword">function</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>msg<span class="token punctuation">:</span><span class="token string">'Hello Node.js'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined </span></code></pre><p>为了拿到结果，人们将函数作为参数来定义异步操作的函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//比如这里异步操作</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token comment" spellcheck="true">//异步操作结束，比如结果是123</span>    <span class="token keyword">let</span> result<span class="token operator">=</span><span class="token number">123</span>    <span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对异步操作的结果处理放在回调函数中了</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"callback函数被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>若是出现多层回调函数嵌套的情况，就会产生回调地狱。为了解决回调地狱的问题，人们引入了promise。</p><p><strong>第二阶段 promise</strong></p><p>回调地狱的产生，原因还是回调函数对结果的处理和异步操作终究还是在一起，并没有把分离。而引入promise的最大作用，就是把异步操作的过程和结果做到了分离，可以用promise.then()来获取和处理异步操作的结果。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token boolean">true</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>reject<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对于已经封装好的函数 下面例子</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>para<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span>para<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>reject<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>第三阶段 异步函数</strong></p><p>promise还是有些繁琐，于是es7又推出了async和await，将同步操作以同步的方式书写出来。</p><h2 id="promise的状态改变"><a href="#promise的状态改变" class="headerlink" title="promise的状态改变"></a>promise的状态改变</h2><p>Promise对象只有三种状态 （PromiseState）</p><ul><li>异步操作“未完成”（pending）</li><li>异步操作“已完成”（resolved，又称fulfilled）</li><li>异步操作“失败”（rejected）</li></ul><p>这三种的状态的变化途径只有两种且不可逆，且一个promise只能改变以此一次状态。</p><ul><li>异步操作从“未完成”到“已完成”（pending -  resolved）</li><li>异步操作从“未完成”到“失败”。( pending - rejected)</li></ul><p>因此，Promise对象的最终结果只有两种。<strong>要么成功，要么失败。于是只会有一种数据产生，成功的结果数据称value,失败的结果数据称reason</strong> （PromiseResult）</p><ul><li><p>异步操作<strong>成功</strong>，Promise对象传回一个值，状态变为 resolved。</p></li><li><p>异步操作<strong>失败</strong>，Promise对象抛出一个错误，状态变为 rejected。</p></li><li><p>异步操作，函数返回promise （不管里面是成功失败），外面的状态是pending，proto的属性会保留结果状态</p><p><img src="/2020/12/19/js-promise/1607670125369.png" alt="reject状态例子"></p></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成功</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成功</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//失败</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p3<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*Promise &amp;#123;[[PromiseStatus]]: "resolved", [[PromiseValue]]: 1&amp;#125;Promise &amp;#123;[[PromiseStatus]]: "pending", [[PromiseValue]]: undefined&amp;#125;Promise &amp;#123;[[PromiseStatus]]: "pending", [[PromiseValue]]: undefined&amp;#125;123Promise &amp;#123;[[PromiseStatus]]: "resolved", [[PromiseValue]]: 2&amp;#125;Promise &amp;#123;[[PromiseStatus]]: "rejected", [[PromiseValue]]: 3&amp;#125;*/</span></code></pre><p>  Promise的内部实现是一个状态机。Promise有三种状态：pending，resolved，rejected。当Promise刚创建完成时，处于pending状态；当Promise中的函数参数执行了resolve后，Promise由pending状态变成resolved状态；如果在Promise的函数参数中执行的不是resolve方法，而是reject方法，那么Promise会由pending状态变成rejected状态。</p><p>p2、p3刚创建完成时，控制台输出的这两台Promise都处于pending状态，但为什么p1是resolved状态呢？ 这是因为p1 的函数参数中执行的是一段同步代码，Promise刚创建完成，resolve方法就已经被调用了，因而紧跟着的输出显示p1是resolved状态。我们通过两个<code>setTimeout</code>函数，延迟1s后再次输出p2、p3的状态，此时p2、p3已经执行完成，状态分别变成resolved和rejected。</p><h2 id="promise-基本流程"><a href="#promise-基本流程" class="headerlink" title="promise 基本流程"></a>promise 基本流程</h2><p><img src="/2020/12/19/js-promise/1607606379135.png"></p><h2 id="promise-基本使用"><a href="#promise-基本使用" class="headerlink" title="promise 基本使用"></a>promise 基本使用</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.创建一个新的promise对象</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve <span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行器函数, 是一个同步回调</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行 excutor'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 2.执行异步任务</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> time <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果当前时间为偶数代表成功，否则失败</span>      <span class="token comment" spellcheck="true">// 3.1 如果成功了，调用resolve(value)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>time <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的数据，time ='</span> <span class="token operator">+</span> time<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.2 如果失败了，调用reject(reason)</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败的数据,time='</span> <span class="token operator">+</span> time<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接受得到成功的value数据  onResolved</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功的回调'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接受得到失败的reason数据 onRejected</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败的回调'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>consle<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'new promise()执行之后'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意 这里的 then 是在当前脚本的所有同步任务执行完才会执行的</span><span class="token comment" spellcheck="true">/*执行 excutornew promise()执行之后undefined成功的回调 成功的数据，time =1607609563332*/</span></code></pre><h2 id="为什么要使用promise"><a href="#为什么要使用promise" class="headerlink" title="为什么要使用promise"></a>为什么要使用promise</h2><h3 id="1，指定回调函数的方式更加灵活"><a href="#1，指定回调函数的方式更加灵活" class="headerlink" title="1，指定回调函数的方式更加灵活"></a>1，指定回调函数的方式更加灵活</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//成功的回调函数</span><span class="token keyword">function</span> <span class="token function">successCallback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对result的一系列操作，例如下面这行打印结果</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//失败的回调函数</span><span class="token keyword">function</span> <span class="token function">failureCallback</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对error的一系列操作</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义异步操作的函数</span><span class="token keyword">function</span> <span class="token function">createAudioFileAsync</span><span class="token punctuation">(</span>audioSettings<span class="token punctuation">,</span>successFun<span class="token punctuation">,</span>errorFun<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//针对audioSettings中的一些参数，进行异步操作</span>    <span class="token comment" spellcheck="true">//……一系列的异步操作代码，得成功的话，得到result,失败的话得到error</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>成功<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行成功的操作,并将结果传入作为参数</span>        <span class="token function">successFun</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">(</span>失败<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行失败后的操作,并将结果传入作为参数</span>        <span class="token function">errorFun</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.使用纯粹的回调函数</span><span class="token comment" spellcheck="true">//使用并进行异步操作，直接指定回调函数，作为异步操作函数的实参传入，使得异步操作的结果也在这个异步操作的函数中处理</span><span class="token function">createAudioFileAsync</span><span class="token punctuation">(</span>audioSettings<span class="token punctuation">,</span>successCallback<span class="token punctuation">,</span>failureCallback<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 使用promise</span><span class="token comment" spellcheck="true">//直接开始异步操作，只是没有在第一时间完成</span><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">createAudioFileAsync</span><span class="token punctuation">(</span>audioSettings<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在后面指定的回调函数，异步操作和异步操作的结果做到了分离。</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span>failureCallback<span class="token punctuation">)</span></code></pre><h3 id="2，支持链式调用，可以解决回调地狱问题"><a href="#2，支持链式调用，可以解决回调地狱问题" class="headerlink" title="2，支持链式调用，可以解决回调地狱问题"></a>2，支持链式调用，可以解决回调地狱问题</h3><p><strong>什么是回调地狱？回调函数嵌套调用，外部回调函数异步执行的结果是嵌套的回调函数执行的条件。</strong><br>回调地狱的缺点？不便于阅读、不便于异步处理<br>解决方案？promise链式调用<br>终极解决方案？async/await</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1. 回调地狱</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">doSomethingElse</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newResult<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">doThirdThing</span><span class="token punctuation">(</span>newResult<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>finalResult<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Got the final result:'</span> <span class="token operator">+</span> finalResult<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> failureCallback<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> failureCallback<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> failureCallback<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 使用promise的链式调用解决回调地狱</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>newResult<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">doThirdThing</span><span class="token punctuation">(</span>newResult<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>finalResult<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Got the final result:'</span><span class="token operator">+</span>finalResult<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>failureCallback<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. async/await：回调地狱的终极解决方案</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> result<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> newResult<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">const</span> finalResult<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">soThirdThing</span><span class="token punctuation">(</span>newResult<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Got the final result'</span><span class="token operator">+</span>finalResult<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">failureCallback</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="promise的API使用"><a href="#promise的API使用" class="headerlink" title="promise的API使用"></a>promise的API使用</h1><h2 id="1、Promise构造函数：Promise-excutor"><a href="#1、Promise构造函数：Promise-excutor" class="headerlink" title="1、Promise构造函数：Promise(excutor){}"></a>1、Promise构造函数：Promise(excutor){}</h2><ul><li>excutor函数：同步执行 (resolve, reject)=&gt;{}</li><li>resolve函数：内部定义成功时我们调用的函数 value=&gt;{}</li><li>reject函数：内部定义失败时我们调用的函数 reason=&gt;{}<br>说明：excutor会在Promise内部立即同步回调，异步操作在执行器中执行</li></ul><h2 id="2、Promise-prototype-then方法：-onResolved-onRejected-gt"><a href="#2、Promise-prototype-then方法：-onResolved-onRejected-gt" class="headerlink" title="2、Promise.prototype.then方法：(onResolved, onRejected)=&gt;{}"></a>2、Promise.prototype.then方法：(onResolved, onRejected)=&gt;{}</h2><ul><li><p>onResolved函数：成功的回调函数 (value)=&gt;{}</p></li><li><p>onRejected函数：失败的回调函数 (reason)=&gt;{}<br>说明：指定用于得到成功value的成功回调和用于得到失败reason的失败回调，返回一个新的promise对象</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//规范写法</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve <span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成功</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将result传下去</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//失败</span>    <span class="token function">reject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//then中完善成功与失败分别的函数内容</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接受得到成功的value数据  onResolved</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功的回调'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处value就是删改传下来的</span> <span class="token punctuation">,</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接受得到失败的reason数据 onRejected</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败的回调'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></li></ul><p>//简单写法<br>var p = new Promise(function(resolve, reject){<br>    console.log(“create a promise”);<br>    resolve(“success”);<br>});</p><p>console.log(“after new Promise”);</p><p>p.then(function(value){<br>    console.log(value);<br>});<br>/*<br>“create a promise”<br>“after new Promise”<br>“success”*/</p><pre><code>## 3、Promise.prototype.catch方法：(onRejected)=&gt;&#123;&#125;- onRejected函数：失败的回调函数 (reason)=&gt;&#123;&#125;  说明：then()的语法糖，相当于：then(undefined, onRejected)```javascriptlet p = new Promise((resolve, reject)=&gt;&#123;    //一系列异步操作，得到结果result，成功则调用resolve，失败则调用reject    resolve(result)    // reject(result)&#125;)    p.then(  //对成功的结果的处理，参数是一个函数，此函数的参数value就是result，    value=&gt;&#123;        console.log(&#39;onResolved()&#39;, value)    &#125;)    p.catch(   //对失败的结果的处理，参数是一个函数，此函数的参数reason就是result    reason=&gt;&#123;        console.log(&#39;onRejected()&#39;, reason)    &#125;)</code></pre><h2 id="4、Promise-resolve方法：-value-gt"><a href="#4、Promise-resolve方法：-value-gt" class="headerlink" title="4、Promise.resolve方法：(value)=&gt;{}"></a>4、Promise.resolve方法：(value)=&gt;{}</h2><ul><li>value: 成功的数据或promise对象<br>说明：返回一个成功/失败的promise对象</li></ul><blockquote><p>如果传入的参数是非promise对象，则返回结果为成功的promise对象<br>       如果传入参数为promise对象，则参数的结果决定了resolve的结果就是对应的promise对象 PromiseResult</p></blockquote><h2 id="5、Promise-reject方法：-reason-gt"><a href="#5、Promise-reject方法：-reason-gt" class="headerlink" title="5、Promise.reject方法：(reason)=&gt;{}"></a>5、Promise.reject方法：(reason)=&gt;{}</h2><ul><li>reason：失败的原因<br>说明：返回一个失败的promise对象</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 产生一个成功值为1的promise对象</span><span class="token keyword">const</span> p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 产生一个成功值为2的promise对象</span><span class="token keyword">const</span> p2<span class="token operator">=</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">const</span> p3<span class="token operator">=</span>Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span>p2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2</span>p3<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//3</span></code></pre><h2 id="6、Promise-all方法：-promises-gt"><a href="#6、Promise-all方法：-promises-gt" class="headerlink" title="6、Promise.all方法：(promises)=&gt;{}"></a>6、Promise.all方法：(promises)=&gt;{}</h2><ul><li>promises：包含n个promise的数组<br>说明：返回一个新的promise，只有所有的promise都成功才成功，只要有一个失败了就直接失败</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> Promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">reject</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">let</span> Promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">reject</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">let</span> Promise3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">reject</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">let</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Promise1<span class="token punctuation">,</span> Promise2<span class="token punctuation">,</span> Promise3<span class="token punctuation">]</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 三个都成功则成功, 参数为三个Promise成功值构成的数组</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 只要有失败，则失败， 假设Promise2失败</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="7、Promise-race方法：-promises-gt"><a href="#7、Promise-race方法：-promises-gt" class="headerlink" title="7、Promise.race方法：(promises)=&gt;{}"></a>7、Promise.race方法：(promises)=&gt;{}</h2><ul><li>promises: 包含n个promise数组<br>说明：返回一个新的promise，<strong>第一个完成的promise的结果状态就是最终的结果状态</strong></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> Promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">reject</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">let</span> Promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">reject</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">let</span> Promise3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">reject</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">let</span> result <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Promise1<span class="token punctuation">,</span> Promise2<span class="token punctuation">,</span> Promise3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 假设Promise1, Promise2 resolve，Promise3 resolve，且Promise2 resolve最快</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示的是promise 2 的resolve</span><span class="token keyword">let</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Promise1<span class="token punctuation">,</span> Promise2<span class="token punctuation">,</span> Promise3<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 假设Promise1, Promise2 resolve，Promise3 reject，且Promise2 resolve最快</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// v2 比 v1 快， 但因为Promise3 reject了，并不会执行此处回调</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r3<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回第一个reject的reason</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="8、对于已经是回调函数，可以直接用util-promisify-转换"><a href="#8、对于已经是回调函数，可以直接用util-promisify-转换" class="headerlink" title="8、对于已经是回调函数，可以直接用util.promisify()转换"></a>8、对于已经是回调函数，可以直接用util.promisify()转换</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>‘util’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>‘fs’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> stat <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">stat</span><span class="token punctuation">(</span>‘<span class="token punctuation">.</span>’<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Do something with `stats`</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Handle the error.</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="promise的关键问题"><a href="#promise的关键问题" class="headerlink" title="promise的关键问题"></a>promise的关键问题</h1><h2 id="如何改变promise-的状态"><a href="#如何改变promise-的状态" class="headerlink" title="如何改变promise 的状态"></a>如何改变promise 的状态</h2><ul><li>resolve：如果当前是pendding就会变为resolved</li><li>reject：如果当前是pendding就会变为rejected</li><li>抛出异常：如果当前是pendding就会变为rejected</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> p<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//resolve(1)  promise变为resolved成功状态 pending => fulfilled/resolved</span>    <span class="token comment" spellcheck="true">//reject(2)   promise变为rejected失败状态 pending => rejected</span>    <span class="token comment" spellcheck="true">//throw new Error('出错了')  抛出异常，promise变为rejected失败异常，reason为抛出的异常</span>    <span class="token keyword">throw</span> <span class="token number">3</span>  <span class="token comment" spellcheck="true">//抛出异常，promise变为rejected失败状态，reason为抛出的3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    value<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    reason <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    value<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    reason <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二次'</span><span class="token operator">+</span>reason<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//两次都可以执行，对异步操作的结果做不同的处理</span></code></pre><h2 id="改变promise状态和指定回调函数谁先谁后？"><a href="#改变promise状态和指定回调函数谁先谁后？" class="headerlink" title="改变promise状态和指定回调函数谁先谁后？"></a>改变promise状态和指定回调函数谁先谁后？</h2><ol><li>都有可能，正常情况下是先指定回调再改变状态，但也可以先改变状态再指定回调</li><li>如何先改变状态再指定回调？<ul><li>在执行器中直接调用resolve()/reject()</li><li>延长更长时间才调用then()</li></ul></li><li>什么时候才能得到数据？<ul><li>如果先指定的回调，那当状态发送改变时，回调函数就会调用，得到数据</li><li>如果先改变状态，那当指定回调时，回调函数就会调用，得到数据</li></ul></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 常规上先指定回调，会改变状态</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve <span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 后改变的状态(同时指定数据),异步执行回调函数</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token comment" spellcheck="true">//先指定回调函数，保存当前指定的回调函数</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'reason'</span> <span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve <span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 先改变的状态(同时指定数据)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token comment" spellcheck="true">//后指定回调函数，异步执行回调函数</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'reason'</span> <span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="promise-then-返回的新的promise的结果状态由什么决定？"><a href="#promise-then-返回的新的promise的结果状态由什么决定？" class="headerlink" title="promise.then()返回的新的promise的结果状态由什么决定？"></a>promise.then()返回的新的promise的结果状态由什么决定？</h2><ol><li>简单表达式：有then()指定的回调函数执行的结果决定</li><li>详细表达：<ul><li>如果抛出异常，新promise变为rejected，reason为抛出异常</li><li>如果返回的是非promise任意值，新promise变为resolved,value为返回值</li><li>如果返回的是另一个新的promise，此promise的结果就会成为新promise的结果</li></ul></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve <span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>    <span class="token comment" spellcheck="true">//return value</span>    <span class="token comment" spellcheck="true">//return Promise.resolve(3)</span>    <span class="token comment" spellcheck="true">//return Promise.reject(4)</span>    <span class="token comment" spellcheck="true">// throw 5</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'reason'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'value1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'reason1'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="promise如何串联多个操作任务？"><a href="#promise如何串联多个操作任务？" class="headerlink" title="promise如何串联多个操作任务？"></a>promise如何串联多个操作任务？</h2><ol><li>promise的then返回一个新的promise，看一看成then的链式调用</li><li>使用then的链式调用串联多个同步异步任务</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//下面的例子是怎么实现的呢?</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve <span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行异步任务1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'任务1的结果'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行同步任务2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">2</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步任务2的结果'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve <span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//执行异步任务3</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行异步任务3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步任务3的结果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//串联任务的实现</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里打印是什么？</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里打印应该是什么？</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里一定记得 then的实现取决于前面返回的是什么！！</span></code></pre><h2 id="promise异常穿透"><a href="#promise异常穿透" class="headerlink" title="promise异常穿透"></a>promise异常穿透</h2><ol><li>当使用promise的then链式调用时，可以在最后指定失败的回调</li><li>前面任何操作出现异常，都会传到最后失败的回调中处理</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve <span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//resolve(1)</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolve()1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">2</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//异常穿透，相当于在每个then中 throw reason 或者 Promise.reject(reason)</span>  <span class="token comment" spellcheck="true">// reason => &amp;#123;</span>  <span class="token comment" spellcheck="true">//   throw reason</span>  <span class="token comment" spellcheck="true">// &amp;#125;</span>  <span class="token comment" spellcheck="true">// reason => &amp;#123;</span>  <span class="token comment" spellcheck="true">//   Promise.reject(reason)</span>  <span class="token comment" spellcheck="true">// &amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolve()2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">3</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolve()3'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>  reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRejected()1'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="中断promise链"><a href="#中断promise链" class="headerlink" title="中断promise链"></a>中断promise链</h2><ol><li>当使用promise的链式调用时，在中间中断，不再调用后面的回调函数</li><li>办法：在回调函数中返回一个pendding状态的promise对象（对后面的then函数而言，由于一直是pending状态的，then是不能执行的），通过return false也没有用！！</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve <span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolve()1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">2</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolve()3'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>  reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRejected()1'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回一个pending的promise,中断promise链</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolve()4'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRejected()2'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="如果-Promise-状态已经变成resolved，再抛出错误是无效的"><a href="#如果-Promise-状态已经变成resolved，再抛出错误是无效的" class="headerlink" title="如果 Promise 状态已经变成resolved，再抛出错误是无效的"></a>如果 Promise 状态已经变成resolved，再抛出错误是无效的</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ok</span></code></pre><p>Promise 在resolve语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 Promise 的状态一旦改变，就永久保持该状态，不会再变了。</p><h1 id="Promise拓展练习"><a href="#Promise拓展练习" class="headerlink" title="Promise拓展练习"></a>Promise拓展练习</h1><ol><li><a href="https://juejin.cn/post/6844903509934997511">https://juejin.cn/post/6844903509934997511</a></li><li><a href="https://juejin.cn/post/6844903488695042062#heading-0">https://juejin.cn/post/6844903488695042062#heading-0</a></li><li><a href="https://juejin.cn/post/6844903625769091079">https://juejin.cn/post/6844903625769091079</a></li></ol><h1 id="async和awiat"><a href="#async和awiat" class="headerlink" title="async和awiat"></a>async和awiat</h1><ol><li><p>async 函数</p><ul><li><p>函数的返回值为promise对象</p></li><li><p>promise对象的结果由async函数执行的返回值决定</p></li></ul></li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//注意输出的result</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1. 如果返回值是一个非Promise类型的数据</span>            <span class="token comment" spellcheck="true">// return 521;</span>            <span class="token comment" spellcheck="true">//2. 如果返回的是一个Promise对象</span>            <span class="token comment" spellcheck="true">// return new Promise((resolve, reject) => &amp;#123;// 这里返回promise的状态是什么呢？</span>            <span class="token comment" spellcheck="true">//     // resolve('OK');</span>            <span class="token comment" spellcheck="true">//     reject('Error');</span>            <span class="token comment" spellcheck="true">// &amp;#125;);</span>            <span class="token comment" spellcheck="true">//3. 抛出异常</span>            <span class="token keyword">throw</span> <span class="token string">"Oh NO"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li><p>await表达式</p><ul><li><p>await右侧的表达式一般为promise对象，但也可以是其他值</p></li><li><p>如果表达式是promise对象，await返回的都是promise的成功值</p></li><li><p>如果表达式是其他值，直接将此值作为await返回值</p></li></ul></li></ol><pre class=" language-js"><code class="language-js"> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// resolve('OK');</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//1. 右侧为promise的情况</span>            <span class="token comment" spellcheck="true">// let res = await p;</span>            <span class="token comment" spellcheck="true">//2. 右侧为其他类型的数据</span>            <span class="token comment" spellcheck="true">// let res2 = await 20;</span>            <span class="token comment" spellcheck="true">//3. 如果promise是失败的状态</span>            <span class="token comment" spellcheck="true">// let res3 = await p //这样是不行的 再reject的时候</span>            <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> res3 <span class="token operator">=</span> <span class="token keyword">await</span> p<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>注意<ul><li>await必须写在async函数中，但async函数中可以没有await</li><li>如果await的promise失败了，就会抛出异常，需要通过try … catch来捕获处理</li></ul></li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用async await 替代 Promise</span><span class="token keyword">const</span> asyncFunction <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> data1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">get</span><span class="token function">$</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> data2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">get</span><span class="token function">$</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> data3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">get</span><span class="token function">$</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        conosle<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例子</span><span class="token comment" spellcheck="true">/** * resource  1.html  2.html 3.html 读取文件内容 */</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mineReadFile <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将函数变成promise</span><span class="token comment" spellcheck="true">//回调函数的方式</span><span class="token comment" spellcheck="true">// fs.readFile('./resource/1.html', (err, data1) => &amp;#123;</span><span class="token comment" spellcheck="true">//     if(err) throw err;</span><span class="token comment" spellcheck="true">//     fs.readFile('./resource/2.html', (err, data2) => &amp;#123;</span><span class="token comment" spellcheck="true">//         if(err) throw err;</span><span class="token comment" spellcheck="true">//         fs.readFile('./resource/3.html', (err, data3) => &amp;#123;</span><span class="token comment" spellcheck="true">//             if(err) throw err;</span><span class="token comment" spellcheck="true">//             console.log(data1 + data2 + data3);</span><span class="token comment" spellcheck="true">//         &amp;#125;);</span><span class="token comment" spellcheck="true">//     &amp;#125;);</span><span class="token comment" spellcheck="true">// &amp;#125;);</span><span class="token comment" spellcheck="true">//async 与 await</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取第一个文件的内容</span>        <span class="token keyword">let</span> data1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mineReadFile</span><span class="token punctuation">(</span><span class="token string">'./resource/1.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> data1error <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mineReadFile</span><span class="token punctuation">(</span><span class="token string">'./resource/1x.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> data2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mineReadFile</span><span class="token punctuation">(</span><span class="token string">'./resource/2.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> data3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mineReadFile</span><span class="token punctuation">(</span><span class="token string">'./resource/3.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data1 <span class="token operator">+</span> data2 <span class="token operator">+</span> data3 <span class="token operator">+</span> data1error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="JS异步之宏队列与微队列"><a href="#JS异步之宏队列与微队列" class="headerlink" title="JS异步之宏队列与微队列"></a>JS异步之宏队列与微队列</h1><p><a href="https://www.cnblogs.com/sunmarvell/p/9564815.html">详细的解释</a></p><p><img src="/2020/12/19/js-promise/1607610096493.png"></p><ul><li><p><strong>宏列队</strong> <strong>macrotask</strong>：用来保存待执行的宏任务（回调），比如：定时器回调、DOM 事件回调、ajax 回调、script(整体代码)、setTimeout、setInterval、setImmediate、I/O、UI交互事件、postMessage、MessageChannel</p><p><strong>优先级</strong>：主代码块 &gt; setImmediate &gt; MessageChannel &gt; setTimeout / setInterval</p></li><li><p><strong>微列队</strong> <strong>microtask</strong>：用来保存待执行的微任务（回调），比如：Promise回调：Promise.then、Mutation回调：MutationObserver、process.nextTick(Node环境)</p><p><strong>优先级</strong>：process.nextTick &gt; Promise &gt; MutationObserver</p></li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//输出下面的出现顺序 </span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                i <span class="token operator">==</span> <span class="token number">9999</span> <span class="token operator">&amp;&amp;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">　　setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//立即放入宏队列</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout callback1（）'</span><span class="token punctuation">)</span>      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//立即放入微队列</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Promise onResolved3()'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//立即放入宏队列</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout callback2（）'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//立即放入微队列</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Promise onResolved1()'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout callback3（）'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">)</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//立即放入微队列</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Promise onResolved2()'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Promise onResolved1() 1</span>    <span class="token comment" spellcheck="true">// Promise onResolved2() 2</span>    <span class="token comment" spellcheck="true">// timeout callback1（）</span>    <span class="token comment" spellcheck="true">// Promise onResolved3() 3</span>    <span class="token comment" spellcheck="true">// timeout callback2（）</span>    <span class="token comment" spellcheck="true">// timeout callback3（） 1</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 先来看下下面这段代码</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*执行结果script startasync1 startasync2promise1script endasync1 endpromise2setTimeout*/</span></code></pre><p>从上往下看，先走同步队列，再走异步队列（包含微观任务队列和宏观任务队列）。</p><p>同步队列：script start → async1 start → async2 → promise1 → script end</p><p>异步队列：包括微观任务和宏观任务。</p><p>微观任务：async1 end → promise2</p><p>宏观任务: setTimeout →</p><p><img src="/2020/12/19/js-promise/1607610913034.png"></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ol><li><a href="https://www.bilibili.com/video/BV1GA411x7z1?p=2">https://www.bilibili.com/video/BV1GA411x7z1?p=2</a></li><li><a href="https://blog.csdn.net/Miss_liangrm/article/details/103182530?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/Miss_liangrm/article/details/103182530?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></li><li><a href="https://www.cnblogs.com/sunmarvell/p/9564815.html">https://www.cnblogs.com/sunmarvell/p/9564815.html</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react-1week Day 4</title>
      <link href="2020/12/17/react-1week04/"/>
      <url>2020/12/17/react-1week04/</url>
      
        <content type="html"><![CDATA[<h1 id="React-中-style"><a href="#React-中-style" class="headerlink" title="React 中 style"></a>React 中 style</h1><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> styles<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>  color<span class="token punctuation">:</span> <span class="token string">"purple"</span><span class="token punctuation">,</span>   fontSize<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>   border<span class="token punctuation">:</span> <span class="token string">"2px solid purple"</span> <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">class</span> <span class="token class-name">Colorful</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;styles&amp;#125;</span><span class="token punctuation">></span></span>Style Me<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">//写成inline的也可以 但是简单的写inline比较好</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span></code></pre><h1 id="React-中-condition"><a href="#React-中-condition" class="headerlink" title="React 中 condition"></a>React 中 condition</h1><p>三元运算</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>option <span class="token operator">?</span> <span class="token string">"You Win!"</span> <span class="token punctuation">:</span> <span class="token string">"You Lose!"</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">//option: Math.random() >= .5 返回的true false</span></code></pre><h1 id="使用PropTypes验证数据"><a href="#使用PropTypes验证数据" class="headerlink" title="使用PropTypes验证数据"></a>使用PropTypes验证数据</h1><pre class=" language-jsx"><code class="language-jsx">MyComponent<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> handleClick<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired <span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//function</span>Items<span class="token punctuation">.</span>propTypes<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>quantity<span class="token punctuation">:</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">.</span>isRequired<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//确保是number </span></code></pre><h1 id="Array-map（）动态渲染元素"><a href="#Array-map（）动态渲染元素" class="headerlink" title="Array.map（）动态渲染元素"></a>Array.map（）动态渲染元素</h1><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//toDoList is array</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>toDoList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>i<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//创建元素数组时，每个元素都需要将一个key属性设置为唯一值。React使用这些键来跟踪添加，更改或删除的项目</span><span class="token keyword">const</span> renderFrameworks <span class="token operator">=</span> frontEndFrameworks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;i&amp;#125;</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>i<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span></code></pre><h1 id="使用Array-filter（）动态过滤一个数组"><a href="#使用Array-filter（）动态过滤一个数组" class="headerlink" title="使用Array.filter（）动态过滤一个数组"></a>使用Array.filter（）动态过滤一个数组</h1><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">const</span> usersOnline <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span>online<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Change this line</span>    <span class="token keyword">const</span> renderOnline <span class="token operator">=</span> usersOnline<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;i.username&amp;#125;</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>i<span class="token punctuation">.</span>username<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Change this line</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Current Online Users<span class="token punctuation">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>renderOnline<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h1 id="react-router"><a href="#react-router" class="headerlink" title="react router"></a><a href="https://reactrouter.com/">react router</a></h1><p>客户端路由 ，不通过刷新页面不走服务器</p><h2 id="react-router-VS-react-router-dom"><a href="#react-router-VS-react-router-dom" class="headerlink" title="react-router VS react-router-dom"></a>react-router VS react-router-dom</h2><p>React-router 提供了一些router 的核心，包括Router、Route、Switch等，但是它没有提供dom操作进行跳转的API；而React-router-dom 则是基于react-router 加上浏览器运行环境下的一些功能，例如：Link、BrowserRouter、HashRouter等API。</p><p>因此，安装只要装react-router-dom 即可(包含react-router功能）。</p><pre class=" language-jsx"><code class="language-jsx">npm install react<span class="token operator">-</span>router<span class="token operator">-</span>dom</code></pre><h3 id="HashRouter"><a href="#HashRouter" class="headerlink" title="HashRouter"></a>HashRouter</h3><p>hashHistory不需要设置服务器，使用URL的hash （即window.location.hash）来保持UI和URL的同步，适合静态网站。HashRouter的URL形式为<code>http://example.com/#/some/path</code>。#后的所有字串都不会发GET请求到server端，像是上方的<code>example.com/#/some/path</code>只会送出<code>example.com</code>到server端，然后只要server端回传JavaScript载入到客户端，剩下的/some/path就由Router去判断处理。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span> HashRouter <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span>  <span class="token string">'react-router-dom'</span> <span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HashRouter</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span>   <span class="token operator">&lt;</span> <span class="token operator">/</span>HashRouter<span class="token operator">></span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="BrowserRouter-推荐使用"><a href="#BrowserRouter-推荐使用" class="headerlink" title="BrowserRouter(推荐使用)"></a>BrowserRouter(推荐使用)</h3><p>browserHistory需要设置伺服器，路径是真实的URL，较为推荐。URL的形式为<code>example.com/some/path</code>，背后使用的是浏览器的History API((pushState, replaceState和popstate事件))来保持UI和URL的同步。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span> BrowserRouter <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span>  <span class="token string">'react-router-dom'</span> <span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrowserRouter</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span>   <span class="token operator">&lt;</span> <span class="token operator">/</span>BrowserRouter<span class="token operator">></span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Route-Matchers-lt-Route-gt-和-lt-Switch-gt"><a href="#Route-Matchers-lt-Route-gt-和-lt-Switch-gt" class="headerlink" title="Route Matchers:&lt;Route&gt;和&lt;Switch&gt;"></a>Route Matchers:<code>&lt;Route&gt;</code>和<code>&lt;Switch&gt;</code></h2><h3 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h3><p>Route 必须放在Router 内，用来控制路由对应显示的元件，常见的属性包括： exact、path、strict、sensitive 以及component。Route 利用path 属性去匹配路径，若符合则渲染component，若不符合则回传null，若没设定path 则永远会渲染。exact path 会进行严格比对path，路径要完全符合才会渲染元件。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//exact=>完全匹配，路径为/时才渲染Home</span> <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span> <span class="token string">"/"</span> component<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>Home<span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span> Route <span class="token operator">></span><span class="token comment" spellcheck="true">//路径为/second或/second/hello都会渲染</span><span class="token operator">&lt;</span>Route path<span class="token operator">=</span> <span class="token string">"/second"</span> component<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>Second<span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span> Route <span class="token operator">></span><span class="token comment" spellcheck="true">//没设定路径，永远会渲染</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Always&amp;#125;/</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">//sensitive =>大小写敏感，若path为/Second，则不会渲染</span><span class="token operator">&lt;</span>Route sensitive path<span class="token operator">=</span> <span class="token string">"/second"</span> component<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>Second<span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span> Route <span class="token operator">></span><span class="token comment" spellcheck="true">//strict =>若path为/second/(多了尾部的/)，则不会渲染</span><span class="token operator">&lt;</span>Route sensitive path<span class="token operator">=</span> <span class="token string">"/second"</span> component<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>Second<span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span> Route <span class="token operator">></span></code></pre><p>Route可以接受三种props来决定路由符合时渲染的元件，通常会择一使用。<br><code>&lt;Route component&gt;</code>：路由符合时，回传component(透过React.createElement渲染)<br><code>&lt;Route render&gt;</code>：路由符合时，渲染functional component<br><code>&lt;Route children&gt;</code>：无论路由是否符合都会渲染</p><p>＊注意：同时用component和render，component 会优先于render; 而children 则优先于component 和render。</p><blockquote><p><a href="https://reacttraining.com/react-router/web/api/Route/component">Route component</a> @React-router<br><a href="https://reacttraining.com/react-router/web/api/Route/render-func">Route render</a> @React-router<br><a href="https://reacttraining.com/react-router/web/api/Route/children-func">Route children</a> @React-router</p></blockquote><p><code>&lt;Route&gt;</code>渲染的元件会带有props，而props 中会有match、location 和history物件。</p><p>(1)match:含有path和URL如何比对的资讯<br>(2)location:应用程式过去、现在和未来的位置<br>(3)history:可以拿来控制路由的跳转</p><h3 id="Route-嵌套"><a href="#Route-嵌套" class="headerlink" title="Route 嵌套"></a>Route 嵌套</h3><p>Route组件还可以嵌套。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span> <span class="token attr-name">history</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;hashHistory&amp;#125;</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;App&amp;#125;</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/repos<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Repos&amp;#125;/</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;About&amp;#125;/</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Route</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">></span></span></code></pre><p>上面代码中，用户访问/repos时，会先加载App组件，然后在它的内部再加载Repos组件。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Repos</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>App</span><span class="token punctuation">></span></span></code></pre><p>App组件要写成下面的样子。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span></code></pre><p>上面代码中，App组件的this.props.children属性就是子组件。 子路由也可以不写在Router组件里面，单独传入Router组件的routes属性。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">let</span> routes <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;App&amp;#125;</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/repos<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Repos&amp;#125;/</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;About&amp;#125;/</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Route</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span> <span class="token attr-name">routes</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;routes&amp;#125;</span> <span class="token attr-name">history</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;browserHistory&amp;#125;/</span><span class="token punctuation">></span></span></code></pre><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><p>用来渲染与路径匹配的第一个<code>&lt;Route&gt;</code>或<code>&lt;Redirect&gt;</code></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span> Switch<span class="token punctuation">,</span> Route <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span>  <span class="token string">'react-router'</span> <span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">></span></span>   <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span> <span class="token string">"/"</span> component<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>Home<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span>Route path<span class="token operator">=</span> <span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>About<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span>Route path<span class="token operator">=</span> <span class="token string">"/:user"</span> component<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>User<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span> Route component<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>NoMatch<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span> <span class="token operator">/</span>Switch<span class="token operator">></span></code></pre><p>此时若路径为/about ，<code>&lt;Switch&gt;</code>开始寻找匹配的<code>&lt;Route&gt;</code>。找到了<code>&lt;Route path=&quot;/about&quot; /&gt;</code>便会停止查找并立即呈现<code>&lt;About&gt;</code>。</p><h2 id="Path-属性"><a href="#Path-属性" class="headerlink" title="Path 属性"></a>Path 属性</h2><p>Route组件的path属性指定路由的匹配规则。这个属性是可以省略的，这样的话，不管路径是否匹配，总是会加载指定组件。 请看下面的例子。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inbox<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Inbox&amp;#125;</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messages/:id<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Message&amp;#125;</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Route</span><span class="token punctuation">></span></span></code></pre><p>上面代码中，当用户访问/inbox/messages/:id时，会加载下面的组件。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Inbox</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Message</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Inbox</span><span class="token punctuation">></span></span></code></pre><p>如果省略外层Route的path参数，写成下面的样子。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Inbox&amp;#125;</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inbox/messages/:id<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Message&amp;#125;</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Route</span><span class="token punctuation">></span></span></code></pre><p>现在用户访问/inbox/messages/:id时，组件加载还是原来的样子。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Inbox</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Message</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Inbox</span><span class="token punctuation">></span></span></code></pre><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>path属性可以使用通配符</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello/:name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">// 匹配 /hello/michael</span><span class="token comment" spellcheck="true">// 匹配 /hello/ryan</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello(/:name)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">// 匹配 /hello</span><span class="token comment" spellcheck="true">// 匹配 /hello/michael</span><span class="token comment" spellcheck="true">// 匹配 /hello/ryan</span><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/files/*.*"</span><span class="token operator">></span><span class="token operator">/</span><span class="token operator">/</span> 匹配 <span class="token operator">/</span>files<span class="token operator">/</span>hello<span class="token punctuation">.</span>jpg<span class="token operator">/</span><span class="token operator">/</span> 匹配 <span class="token operator">/</span>files<span class="token operator">/</span>hello<span class="token punctuation">.</span>html<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/files/*"</span><span class="token operator">></span><span class="token operator">/</span><span class="token operator">/</span> 匹配 <span class="token regex">/files/</span> <span class="token operator">/</span><span class="token operator">/</span> 匹配 <span class="token operator">/</span>files<span class="token operator">/</span>a<span class="token operator">/</span><span class="token operator">/</span> 匹配 <span class="token operator">/</span>files<span class="token operator">/</span>a<span class="token operator">/</span>b<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/**/*.jpg"</span><span class="token operator">></span><span class="token comment" spellcheck="true">// 匹配 /files/hello.jpg</span><span class="token comment" spellcheck="true">// 匹配 /files/path/to/file.jpg</span></code></pre><p>通配符的规则如下。</p><blockquote><p>paramName<br>:paramName匹配URL的一个部分，直到遇到下一个/、?、#为止。这个路径参数可以通过this.props.params.paramName取出。</p><p>()<br>()表示URL的这个部分是可选的。</p></blockquote><p>*匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。</p><blockquote><p>**<br>** 匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。</p></blockquote><hr><p>path属性也可以使用相对路径（不以/开头），匹配时就会相对于父组件的路径，可以参考上一节的例子。嵌套路由如果想摆脱这个规则，可以使用绝对路由。 路由匹配规则是从上到下执行，一旦发现匹配，就不再其余的规则了。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/comments<span class="token punctuation">"</span></span> <span class="token attr-name">...</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/comments<span class="token punctuation">"</span></span> <span class="token attr-name">...</span> <span class="token punctuation">/></span></span></code></pre><p>上面代码中，路径/comments同时匹配两个规则，第二个规则不会生效。 设置路径参数时，需要特别小心这一点</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/:userName/:id<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;UserPage&amp;#125;/</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about/me<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;About&amp;#125;/</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">></span></span></code></pre><p>上面代码中，用户访问/about/me时，不会触发第二个路由规则，因为它会匹配/:userName/:id这个规则。因此，带参数的路径一般要写在路由规则的底部。 此外，URL的查询字符串/foo?bar=baz，可以用this.props.location.query.bar获取。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> NotFoundPage<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token number">404</span> <span class="token operator">-</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Go Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token keyword">const</span> Item <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          <span class="token operator">&lt;</span>Link to<span class="token operator">=</span> <span class="token string">"/Portfolio/1"</span> <span class="token operator">></span>item <span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>          <span class="token operator">&lt;</span>Link to<span class="token operator">=</span> <span class="token string">"/Portfolio/2"</span> <span class="token operator">></span>item <span class="token number">2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token keyword">const</span> ItemDetail <span class="token operator">=</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>A Thing I've Done<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This page is <span class="token keyword">for</span> item <span class="token keyword">with</span> the id <span class="token keyword">of</span> <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> Content <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Portfolio<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Portfolio&amp;#125;</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Portfolio/:id<span class="token punctuation">"</span></span>  <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;ItemDetail&amp;#125;</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;NotFoundPage&amp;#125;</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrowserRouter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BrowserRouter</span><span class="token punctuation">></span></span> <span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>routes <span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><h2 id="Navigation-lt-Link-gt-、-lt-NavLink-gt-、-lt-Redirect-gt"><a href="#Navigation-lt-Link-gt-、-lt-NavLink-gt-、-lt-Redirect-gt" class="headerlink" title="Navigation : &lt;Link&gt;、&lt;NavLink&gt;、&lt;Redirect&gt;"></a>Navigation : <code>&lt;Link&gt;</code>、<code>&lt;NavLink&gt;</code>、<code>&lt;Redirect&gt;</code></h2><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>相当于html的a标签，to可以接受string 或者object</p><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span>Link to<span class="token operator">=</span> <span class="token string">"/"</span> <span class="token operator">></span>Home<span class="token operator">&lt;</span> <span class="token operator">/</span>Link<span class="token operator">></span>     <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/*等于&lt;a href="/ ">Home&lt;/a>*/</span><span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">&lt;</span>link to<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>      pathname<span class="token punctuation">:</span><span class="token string">'/course'</span><span class="token punctuation">,</span>      search<span class="token punctuation">:</span><span class="token string">'?sort=name'</span> <span class="token punctuation">,</span>      hash<span class="token punctuation">:</span><span class="token string">'#the-hash'</span><span class="token punctuation">,</span>      state<span class="token punctuation">:</span><span class="token entity" title="&#123;">&amp;#123;</span>fromDashboard<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token entity" title="&#125;">&amp;#125;</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h3 id="NavLink"><a href="#NavLink" class="headerlink" title="NavLink"></a>NavLink</h3><p>相当于active的a标签。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span> <span class="token string">"/react"</span> activeClassName<span class="token operator">=</span> <span class="token string">"hurray"</span> <span class="token operator">></span>   React <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavLink</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/*当路径为/ react时，则渲染&lt;a href= "/react" className= "hurray" >React&lt; /a> 路径不匹配时，则渲染&lt;a href="/ react ">React&lt; /a>*/</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><blockquote><p>NavLink相比Link多了一些样式调节，作用其实相差不大</p></blockquote><h3 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h3><p><code>&lt;Redirect&gt;</code>重定向到同等级的其他路由，直接跳转</p><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span> <span class="token string">"/login"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p><code>&lt;IndexRedirect&gt;</code>从父路由的目录开始重定向</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;App&amp;#125;</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IndexRedirect</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/welcome<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>welcome<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Welcome&amp;#125;</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;About&amp;#125;</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Route</span><span class="token punctuation">></span></span></code></pre><h2 id="渲染props"><a href="#渲染props" class="headerlink" title="渲染props"></a>渲染props</h2><p>有三种方式：component， render（）， children，但是我们最常用的还是component，render</p><p>如果你有一个存在的组件，，而且你不想传递一个特定的组件内部变量信息的话，可以直接使用component，</p><p>如果你想渲染一个组件需要传递局部变量，可以使用render</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">const</span> someVariable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Home&amp;#125;</span> <span class="token punctuation">/></span></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> render<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>props <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>About <span class="token entity" title="&#123;">&amp;#123;</span><span class="token operator">...</span>props<span class="token entity" title="&#125;">&amp;#125;</span> extra<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>someVariable<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span>     <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/contact"</span> component<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>props <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>Contact <span class="token entity" title="&#123;">&amp;#123;</span><span class="token operator">...</span>props<span class="token entity" title="&#125;">&amp;#125;</span> extra<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>someVariable<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">></span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span></code></pre><p>因为如果你不这样做，会引起期望之外的组件的卸载和重载。</p><h1 id="Modal练习"><a href="#Modal练习" class="headerlink" title="Modal练习"></a>Modal练习</h1><pre class=" language-jsx"><code class="language-jsx">ReactModal<span class="token punctuation">.</span><span class="token function">setAppElement</span><span class="token punctuation">(</span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ExampleApp</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>      showModal<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleOpenModal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleOpenModal<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleCloseModal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleCloseModal<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  handleOpenModal <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> showModal<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  handleCloseModal <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> showModal<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleOpenModal&amp;#125;</span><span class="token punctuation">></span></span>Trigger Modal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ReactModal</span>            <span class="token attr-name">isOpen</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.state.showModal&amp;#125;</span>           <span class="token attr-name">contentLabel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onRequestClose</span> <span class="token attr-name">Example"</span>           <span class="token attr-name">onRequestClose</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleCloseModal&amp;#125;</span>        <span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Modal text<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleCloseModal&amp;#125;</span><span class="token punctuation">></span></span>Close Modal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ReactModal</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ExampleApp <span class="token entity" title="&#123;">&amp;#123;</span><span class="token operator">...</span>props<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="完整练习"><a href="#完整练习" class="headerlink" title="完整练习"></a>完整练习</h1><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span> <span class="token keyword">import</span> reportWebVitals <span class="token keyword">from</span> <span class="token string">'./reportWebVitals'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span> BrowserRouter<span class="token punctuation">,</span>Route<span class="token punctuation">,</span>Switch<span class="token punctuation">,</span>Link<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span> NavLink<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Header <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Portfolio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavLink</span> <span class="token attr-name">exact</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Home <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavLink</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavLink</span> <span class="token attr-name">exact</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Portfolio<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Portfolio <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavLink</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavLink</span> <span class="token attr-name">exact</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Contact<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Contact <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavLink</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Home <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is my site<span class="token punctuation">.</span> Take a look around<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> Item <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          <span class="token operator">&lt;</span>Link to<span class="token operator">=</span> <span class="token string">"/Portfolio/1"</span> <span class="token operator">></span>item <span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>          <span class="token operator">&lt;</span>Link to<span class="token operator">=</span> <span class="token string">"/Portfolio/2"</span> <span class="token operator">></span>item <span class="token number">2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> ItemDetail <span class="token operator">=</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>A Thing I've Done<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This page is <span class="token keyword">for</span> item <span class="token keyword">with</span> the id <span class="token keyword">of</span> <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> Portfolio <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>My Work<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Checkout the stuff I have done<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* &lt;Link to= "/Portfolio/1" >item 1&lt;/Link>       &lt;Link to= "/Portfolio/2" >item 2&lt;/Link> */</span><span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Contact <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Contact<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You can reach me at test@gmail<span class="token punctuation">.</span>com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> NotFoundPage<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token number">404</span> <span class="token operator">-</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Go Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token keyword">const</span> Content <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Home&amp;#125;</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Portfolio<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Portfolio&amp;#125;</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Portfolio/:id<span class="token punctuation">"</span></span>  <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;ItemDetail&amp;#125;</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Contact<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Contact&amp;#125;</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;NotFoundPage&amp;#125;</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrowserRouter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span>  <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;Header&amp;#125;</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BrowserRouter</span><span class="token punctuation">></span></span> <span class="token punctuation">)</span> ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>routes <span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://ithelp.ithome.com.tw/articles/10204137">https://ithelp.ithome.com.tw/articles/10204137</a></p><p><a href="https://blog.csdn.net/qq_39055963/article/details/100848845">https://blog.csdn.net/qq_39055963/article/details/100848845</a></p><h1 id="额外阅读"><a href="#额外阅读" class="headerlink" title="额外阅读"></a>额外阅读</h1><p><a href="https://imcy2018.appspot.com/projects.php">https://imcy2018.appspot.com/projects.php</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-1week Day 3</title>
      <link href="2020/12/16/react-1week03/"/>
      <url>2020/12/16/react-1week03/</url>
      
        <content type="html"><![CDATA[<h1 id="export-和-import-基本语法"><a href="#export-和-import-基本语法" class="headerlink" title="export 和 import 基本语法"></a>export 和 import 基本语法</h1><h2 id="几种import和export的基本语法"><a href="#几种import和export的基本语法" class="headerlink" title="几种import和export的基本语法"></a>几种import和export的基本语法</h2><h3 id="第一种导出"><a href="#第一种导出" class="headerlink" title="第一种导出"></a>第一种导出</h3><p>lib.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">"stringBar"</span><span class="token punctuation">;</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">"stringFoo"</span><span class="token punctuation">;</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> fn0 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fn0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">let</span> fn1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">let</span> fnSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">export</span><span class="token entity" title="&#123;">&amp;#123;</span> bar<span class="token punctuation">,</span> foo <span class="token punctuation">,</span>fn0<span class="token punctuation">,</span> fn1<span class="token punctuation">,</span> fnSum<span class="token entity" title="&#125;">&amp;#125;</span></code></pre><p>main.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span>bar<span class="token punctuation">,</span>foo<span class="token punctuation">,</span> fn0<span class="token punctuation">,</span> fn1<span class="token punctuation">,</span> fnSum<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">"./lib"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span>fnSum <span class="token keyword">as</span> fnSum1<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">"./lib"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fn0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//fn0</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//fn1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fnSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fnSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fnSum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//4</span></code></pre><h3 id="第二种导出"><a href="#第二种导出" class="headerlink" title="第二种导出"></a>第二种导出</h3><p>lib.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">let</span> fn0 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fn0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj0 <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">export</span> <span class="token entity" title="&#123;">&amp;#123;</span> fn0 <span class="token keyword">as</span> foo<span class="token punctuation">,</span> obj0 <span class="token keyword">as</span> bar<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span></code></pre><p>main.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span>foo<span class="token punctuation">,</span> bar<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">"./lib"</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//fn0</span>bar<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object &amp;#123;name: "123"&amp;#125;</span></code></pre><h3 id="第三种导出的方式"><a href="#第三种导出的方式" class="headerlink" title="第三种导出的方式"></a>第三种导出的方式</h3><p>lib.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fnFoo"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"foo"</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">,</span>bar <span class="token operator">=</span> <span class="token string">"stringBar"</span></code></pre><p>main.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span>foo<span class="token punctuation">,</span> bar<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">"./lib"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第四种导出的方式"><a href="#第四种导出的方式" class="headerlink" title="第四种导出的方式"></a>第四种导出的方式</h3><p>lib.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">"string"</span><span class="token comment" spellcheck="true">//export default ()=>&amp;#123;console.log("对于函数的返回");&amp;#125; </span></code></pre><p>main.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> defaultString <span class="token keyword">from</span> <span class="token string">"./lib"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>defaultString<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="第五种导出方式"><a href="#第五种导出方式" class="headerlink" title="第五种导出方式"></a>第五种导出方式</h3><p>lib.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"string"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token entity" title="&#123;">&amp;#123;</span>fn <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span></code></pre><p>main.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> defaultFn <span class="token keyword">from</span> <span class="token string">"./lib"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">defaultFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第六种导出方式"><a href="#第六种导出方式" class="headerlink" title="第六种导出方式"></a>第六种导出方式</h3><p>other.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">"stringFoo"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> fnFoo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fnFoo"</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span></code></pre><p>lib.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./other"</span><span class="token punctuation">;</span></code></pre><p>main.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span>foo<span class="token punctuation">,</span> fnFoo<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">"./lib"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fnFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第七种导出方式"><a href="#第七种导出方式" class="headerlink" title="第七种导出方式"></a>第七种导出方式</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> obj <span class="token keyword">from</span> <span class="token string">"./lib"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="ES6导入的模块都是属于引用"><a href="#ES6导入的模块都是属于引用" class="headerlink" title="ES6导入的模块都是属于引用"></a>ES6导入的模块都是属于引用</h3><p>lib.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">incCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    counter<span class="token operator">++</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setCounter</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    counter <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><p>main.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span> counter<span class="token punctuation">,</span> incCounter <span class="token punctuation">,</span>setCounter<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'./lib'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The imported value `counter` is live</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token function">incCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span><span class="token function">setCounter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//对于组件</span><span class="token keyword">const</span> option<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> option<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Option</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">import</span> option<span class="token operator">...</span><span class="token punctuation">.</span><span class="token keyword">import</span> Option <span class="token operator">...</span><span class="token operator">...</span></code></pre><h1 id="引入使用react-modal"><a href="#引入使用react-modal" class="headerlink" title="引入使用react modal"></a>引入使用react modal</h1><p><a href="http://reactcommunity.org/react-modal/">官方文档</a></p><p><a href="https://github.com/reactjs/react-modal">例子</a> &amp; <a href="https://github.com/PsChina/React/tree/master/components#Modal">例子2</a></p><h2 id="react-components-list"><a href="#react-components-list" class="headerlink" title="react components list"></a>react components list</h2><table><thead><tr><th>属性</th><th>说明</th><th>默认值</th><th>类型</th></tr></thead><tbody><tr><td>onOk</td><td>点击确定的回调函数</td><td>noop</td><td>function</td></tr><tr><td>onCancel</td><td>点击取消的回调函数</td><td>noop</td><td>function</td></tr><tr><td>conFirmText</td><td>确定按钮自定义文字</td><td>‘确定’</td><td>string</td></tr><tr><td>cancelText</td><td>取消按钮自定义文字</td><td>‘取消’</td><td>string</td></tr><tr><td>titleClass</td><td>对话框 title 自定义样式</td><td>‘modal-title’</td><td>string</td></tr><tr><td>contentClass</td><td>对话框内容自定义样式</td><td>‘modal-text’</td><td>string</td></tr><tr><td>footerClass</td><td>对话框确定取消按钮容器自定义样式</td><td>‘modal-footer</td><td>string</td></tr><tr><td>okClass</td><td>对话框确定按钮自定义样式</td><td>‘modal-confirm’</td><td>string</td></tr><tr><td>cancelClass</td><td>对话框取消按钮自定义样式</td><td>‘modal-cancel’</td><td>string</td></tr><tr><td>height</td><td>对话框宽度</td><td>‘auto’</td><td>string</td></tr><tr><td>width</td><td>对话框高度</td><td>‘400px’</td><td>string</td></tr><tr><td>opacity</td><td>对话框透明度</td><td>0.6</td><td>nunmber</td></tr></tbody></table><h2 id="自己练习例子"><a href="#自己练习例子" class="headerlink" title="自己练习例子"></a>自己练习例子</h2><p>index.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> PopModal <span class="token keyword">from</span> <span class="token string">'./PopModal'</span>clearError<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"clearing error"</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>        errorMsg<span class="token punctuation">:</span><span class="token string">""</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>errorMsg <span class="token operator">!==</span><span class="token string">""</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PopModal</span> <span class="token attr-name">clearError</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.clearError&amp;#125;</span> <span class="token attr-name">error</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.state.errorMsg&amp;#125;</span> <span class="token punctuation">/></span></span><span class="token entity" title="&#125;">&amp;#125;</span> </code></pre><p>PopModal.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span> <span class="token keyword">import</span> Modal <span class="token keyword">from</span> <span class="token string">"react-modal"</span><span class="token keyword">const</span> PopModal<span class="token operator">=</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token operator">&lt;</span>Modal          style<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>          <span class="token entity" title="&#123;">&amp;#123;</span> overlay<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">,</span>           content<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span>            width<span class="token punctuation">:</span> <span class="token string">'fit-content'</span><span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token string">'fit-content'</span><span class="token punctuation">,</span>            margin<span class="token punctuation">:</span><span class="token string">' auto'</span><span class="token punctuation">,</span>            background<span class="token punctuation">:</span> <span class="token string">'#464b5e'</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span> <span class="token string">'whitesmoke'</span>          <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#125;">&amp;#125;</span>           isOpen<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token operator">!</span><span class="token operator">!</span>props<span class="token punctuation">.</span>error<span class="token entity" title="&#125;">&amp;#125;</span>           onRequestClose<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>clearError<span class="token entity" title="&#125;">&amp;#125;</span>           ariaHideApp<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token boolean">false</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token operator">></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modalItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>error<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className="</span> <span class="token attr-name">modalItem</span> <span class="token attr-name">acceptBtn"</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;props.clearError&amp;#125;</span><span class="token punctuation">></span></span>ok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Modal</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> PopModal</code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-1week Day 2</title>
      <link href="2020/12/16/react-1week02/"/>
      <url>2020/12/16/react-1week02/</url>
      
        <content type="html"><![CDATA[<h1 id="React的生命周期"><a href="#React的生命周期" class="headerlink" title="React的生命周期"></a>React的生命周期</h1><h2 id="挂载卸载过程基本函数"><a href="#挂载卸载过程基本函数" class="headerlink" title="挂载卸载过程基本函数"></a>挂载卸载过程基本函数</h2><ul><li>constructor()</li><li>componentWillMount()</li><li>componentDidMount()</li><li>componentWillUnmount ()</li></ul><h2 id="更新过程基本函数"><a href="#更新过程基本函数" class="headerlink" title="更新过程基本函数"></a>更新过程基本函数</h2><ul><li>componentWillReceiveProps (nextProps) </li><li>shouldComponentUpdate(nextProps,nextState) </li><li>componentWillUpdate (nextProps,nextState) </li><li>componentDidUpdate(prevProps,prevState) </li><li>render() </li></ul><h2 id="React新增的生命周期基本函数"><a href="#React新增的生命周期基本函数" class="headerlink" title="React新增的生命周期基本函数"></a>React新增的生命周期基本函数</h2><ul><li>getDerivedStateFromProps(nextProps, prevState)</li><li>getSnapshotBeforeUpdate(prevProps, prevState)</li></ul><p>React的生命周期从广义上分为三个阶段：挂载、渲染、卸载</p><p><img src="/2020/12/16/react-1week02/image-20201216222750092.png"></p><h1 id="挂载卸载过程"><a href="#挂载卸载过程" class="headerlink" title="挂载卸载过程"></a>挂载卸载过程</h1><h2 id="1-constructor"><a href="#1-constructor" class="headerlink" title="1.constructor()"></a>1.constructor()</h2><p>constructor()中完成了React数据的初始化，它接受两个参数：props和context，当想在函数内部使用这两个参数时，需使用super()传入这两个参数。<br> 注意：只要使用了constructor()就必须写super(),否则会导致this指向错误。</p><h2 id="2-componentWillMount"><a href="#2-componentWillMount" class="headerlink" title="2.componentWillMount()"></a>2.componentWillMount()</h2><p>componentWillMount()一般用的比较少，它更多的是在服务端渲染时使用。它代表的过程是组件已经经历了constructor()初始化数据后，但是还未渲染DOM时。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果：执行多次哦</span><span class="token comment" spellcheck="true">//0</span><span class="token comment" spellcheck="true">//0</span><span class="token comment" spellcheck="true">//0</span></code></pre><h2 id="3-componentDidMount"><a href="#3-componentDidMount" class="headerlink" title="3.componentDidMount()"></a>3.componentDidMount()</h2><p>组件第一次渲染完成，此时dom节点已经生成，可以在这里调用ajax请求，返回数据setState后组件会重新渲染</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>      activeUsers<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>        activeUsers<span class="token punctuation">:</span> <span class="token number">1273</span>      <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">,</span> <span class="token number">2500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Active Users<span class="token punctuation">:</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>activeUsers<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h2 id="4-componentWillUnmount"><a href="#4-componentWillUnmount" class="headerlink" title="4.componentWillUnmount ()"></a>4.componentWillUnmount ()</h2><p>在此处完成组件的卸载和数据的销毁。</p><ol><li>clear你在组建中所有的setTimeout,setInterval</li><li>移除所有组建中的监听 removeEventListener</li><li>有时候我们会碰到这个warning:</li></ol><pre class=" language-csharp"><code class="language-csharp">Can only update a mounted or mounting component<span class="token punctuation">.</span> This usually means you called <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> on an unmounted component<span class="token punctuation">.</span> This <span class="token keyword">is</span> a   no<span class="token operator">-</span>op<span class="token punctuation">.</span> Please check the code <span class="token keyword">for</span> the undefined component<span class="token punctuation">.</span></code></pre><p>原因：因为你在组件中的ajax请求（异步函数）返回setState,而你组件销毁的时候，请求还未完成，因此会报warning<br> 解决方法：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isMount <span class="token operator">===</span> <span class="token boolean">true</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isMount <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 增加条件ismount为true时</span>      aaa<span class="token operator">:</span>res    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isMount <span class="token operator">===</span> <span class="token boolean">false</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>其他的：<a href="https://www.jianshu.com/p/b331d0e4b398">https://www.jianshu.com/p/b331d0e4b398</a> </p><h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><h2 id="5、componentDidUpdate-prevProps-prevState"><a href="#5、componentDidUpdate-prevProps-prevState" class="headerlink" title="5、componentDidUpdate(prevProps,prevState)"></a>5、componentDidUpdate(prevProps,prevState)</h2><p>数据发生变化之后才会被保存</p><p><img src="/2020/12/16/react-1week02/image-20201216225110202.png"></p><h2 id="6、componentDidMount"><a href="#6、componentDidMount" class="headerlink" title="6、componentDidMount()"></a>6、componentDidMount()</h2><p>渲染的时候，读取数据储存，刷新页面也还是根据localStorage</p><p><img src="/2020/12/16/react-1week02/image-20201216225806344.png"></p><p>但是这里其实加多判断看有没有option这个数据，另外要注意页面error（JSON.parse()这个很容易有error，导致页面崩塌）</p><p><img src="/2020/12/16/react-1week02/image-20201216230234924.png"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>偶数点击，显示count</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">OnlyEvens</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Should I update?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//只有当摁了两次才会发生改变</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>value <span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span>   <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Component re-rendered.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">Controller</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>      value<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>addValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addValue<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">addValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>      value<span class="token punctuation">:</span> state<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.addValue&amp;#125;</span><span class="token punctuation">></span></span>Add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OnlyEvens</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.state.value&amp;#125;</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><p>暂存option （indecision app）</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">,</span>prevState<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prevState<span class="token punctuation">.</span>options<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>options<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"options changed"</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> json <span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'option'</span><span class="token punctuation">,</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">try</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">const</span> json<span class="token operator">=</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'option'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> options<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>            options<span class="token punctuation">,</span>        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h2 id="对于localstorage"><a href="#对于localstorage" class="headerlink" title="对于localstorage"></a>对于localstorage</h2><p>基本用法</p><table><thead><tr><th><strong>名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>setItem(“key”,“value”)</td><td>存储数据，如果key存在，就更新value</td></tr><tr><td>getItem(“key”)</td><td>读取数据，获取名称为key的值，如果key不存在则返回null</td></tr><tr><td>clear</td><td>清空localStorage上存储的数据</td></tr><tr><td>removeItem(“key”)</td><td>删除名称为“key”的信息，这个key所对应的value也会全部被删除</td></tr><tr><td>key</td><td>读取第i个数据的名字或称为键值(从0开始计数)</td></tr><tr><td>length</td><td>获取localStorage存储变量的个数</td></tr></tbody></table><p>关于字符串和对象</p><ul><li>1.localStorage中只能存字符串，如果直接把对象放到localStorage中，则直接保存object object这个字符串</li><li>2.如果调用localStorage的getItem(“carts”)方法得到的信息也是字符串</li><li>3.js和字符串的转换<br>js对象—-&gt;字符串:var str=JSON.stringfy(js对象)<br>字符串—–&gt;js对象：var obj=JSON.parse(字符串);</li></ul><p>例如字符串和对象</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token entity" title="&#123;">&amp;#123;</span>String name<span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span>Person p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这是一个对象,转为字符串,用tostring方法</span></code></pre><p><strong>从本地获取数据得到的是字符串，要先从字符串转为js对象(数组),同理，最后用完了数据要转成字符串再存入本地</strong></p><h3 id="1、存"><a href="#1、存" class="headerlink" title="1、存"></a>1、存</h3><pre class=" language-json"><code class="language-json">localStorage.setItem(<span class="token string">"phone"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span>//对象let obj = &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"xiaoming"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token string">"16"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>localStorage.setItem(<span class="token string">"phone"</span><span class="token punctuation">,</span>JSON.stringify(obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2、取"><a href="#2、取" class="headerlink" title="2、取"></a>2、取</h3><pre class=" language-json"><code class="language-json">localStorage.getItem(<span class="token string">"phone"</span><span class="token punctuation">)</span>//对象let user = JSON.parse(localStorage.getItem(<span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3、删"><a href="#3、删" class="headerlink" title="3、删"></a>3、删</h3><pre class=" language-json"><code class="language-json">//指定删localStorage.removeItem('phone'<span class="token punctuation">)</span><span class="token punctuation">;</span>//全删localStorage.clear(<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="4、设置localStorageSet-过期时间"><a href="#4、设置localStorageSet-过期时间" class="headerlink" title="4、设置localStorageSet 过期时间"></a>4、设置localStorageSet 过期时间</h3><pre class=" language-json"><code class="language-json">//设置缓存const localStorageSet = (name<span class="token punctuation">,</span> data<span class="token punctuation">)</span> => &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    const obj = &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        data<span class="token punctuation">,</span>        expire<span class="token operator">:</span> new Date(<span class="token punctuation">)</span>.getTime(<span class="token punctuation">)</span> + <span class="token number">1000</span> * <span class="token number">60</span> * <span class="token number">30</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    localStorage.setItem(name<span class="token punctuation">,</span> JSON.stringify(obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h3 id="5、读取缓存，且比较时间戳是否过期"><a href="#5、读取缓存，且比较时间戳是否过期" class="headerlink" title="5、读取缓存，且比较时间戳是否过期"></a>5、读取缓存，且比较时间戳是否过期</h3><pre class=" language-json"><code class="language-json">//读取缓存const localStorageGet = name => &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    const storage = localStorage.getItem(name<span class="token punctuation">)</span><span class="token punctuation">;</span>    const time = new Date(<span class="token punctuation">)</span>.getTime(<span class="token punctuation">)</span><span class="token punctuation">;</span>    let result = <span class="token null">null</span><span class="token punctuation">;</span>    if (storage<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        const obj = JSON.parse(storage<span class="token punctuation">)</span><span class="token punctuation">;</span>        if (time &lt; obj.expire<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            result = obj.data<span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span> else &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            localStorage.removeItem(name<span class="token punctuation">)</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    return result<span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h3 id="6、使用"><a href="#6、使用" class="headerlink" title="6、使用"></a>6、使用</h3><pre class=" language-json"><code class="language-json">//存localStorageSet('weather'<span class="token punctuation">,</span> data<span class="token punctuation">)</span>//取（返回<span class="token null">null</span>则过期）localStorageGet('weather'<span class="token punctuation">)</span></code></pre><h1 id="一个完整的例子"><a href="#一个完整的例子" class="headerlink" title="一个完整的例子"></a>一个完整的例子</h1><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span><span class="token entity" title="&#123;">&amp;#123;</span>Component<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token entity" title="&#123;">&amp;#123;</span>render<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CommentInput</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>            username<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            content<span class="token punctuation">:</span><span class="token string">''</span>        <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    handleUsernameChange<span class="token operator">=</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>            username<span class="token punctuation">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>    handleContentChange<span class="token operator">=</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>            content<span class="token punctuation">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>    handleSubmit<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>submit<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>                username<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">,</span>                content<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>content<span class="token punctuation">,</span>                createTime<span class="token punctuation">:</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>        <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>            content<span class="token punctuation">:</span><span class="token string">''</span>        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>    handleUsernameHold<span class="token operator">=</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">const</span> username<span class="token operator">=</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>username<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>        <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>comment-input<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>comment-field<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>comment-field-name<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>comment-field-input<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                        <span class="token operator">&lt;</span>input                            ref<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token operator">=</span>input<span class="token entity" title="&#125;">&amp;#125;</span>                            value<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token entity" title="&#125;">&amp;#125;</span>                            onBlur<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleUsernameHold<span class="token entity" title="&#125;">&amp;#125;</span>                            onChange<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleUsernameChange<span class="token entity" title="&#125;">&amp;#125;</span>                        <span class="token operator">/</span><span class="token operator">></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>comment-field<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>comment-field-name<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>评论内容：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>comment-field-input<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span>                            <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.state.content&amp;#125;</span>                            <span class="token attr-name">onChange</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleContentChange&amp;#125;</span>                        <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>comment-field-button<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleSubmit&amp;#125;</span><span class="token punctuation">></span></span>                        发布                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">CommentList</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>            items<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Comment</span> <span class="token attr-name">deleteItem</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.props.deleteItem&amp;#125;</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;item&amp;#125;</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;index&amp;#125;</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;index&amp;#125;/</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>            timeString<span class="token punctuation">:</span><span class="token string">''</span>        <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    handleTimeString<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">const</span> item<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">const</span> duration<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>item<span class="token punctuation">.</span>createTime<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> duration<span class="token operator">></span><span class="token number">60</span><span class="token operator">?</span><span class="token template-string"><span class="token string">`$&amp;#123;Math.round(duration/60)&amp;#125;分钟前`</span></span><span class="token punctuation">:</span><span class="token template-string"><span class="token string">`$&amp;#123;Math.round(Math.max(duration,1))&amp;#125;秒前`</span></span><span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>    handleDelete<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>deleteItem<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">deleteItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>index<span class="token punctuation">)</span>        <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>comment<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>comment-user<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>comment-username<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>item<span class="token punctuation">.</span>username<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>：                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>item<span class="token punctuation">.</span>content<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comment-delete<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleDelete&amp;#125;</span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comment-createdtime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">CommentApp</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>            items<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    handleSubmit<span class="token operator">=</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>            items<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>items        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'items'</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>    handleDelete<span class="token operator">=</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>            items<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>items        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'items'</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">let</span> items<span class="token operator">=</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'items'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>            items<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>items<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>        <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CommentInput</span> <span class="token attr-name">submit</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleSubmit&amp;#125;</span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CommentList</span> <span class="token attr-name">deleteItem</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleDelete&amp;#125;</span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.state.items&amp;#125;/</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CommentApp</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Index</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h1><ul><li><p>CodeCamp 练习题</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/151286410">https://zhuanlan.zhihu.com/p/151286410</a></p></li><li><p><a href="https://www.cnblogs.com/Scar007/p/8081212.html">https://www.cnblogs.com/Scar007/p/8081212.html</a></p></li></ul><h1 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h1><p>react - indecisionApp &amp; counterApp</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-1week Day 1</title>
      <link href="2020/12/16/react-1week01/"/>
      <url>2020/12/16/react-1week01/</url>
      
        <content type="html"><![CDATA[<h1 id="React-开始"><a href="#React-开始" class="headerlink" title="React 开始"></a>React 开始</h1><p>通过react的脚手架，创建项目进行开发，部署。（推荐）</p><p>全局安装create-react-app</p><pre class=" language-sh"><code class="language-sh">$ npm install -g create-react-app</code></pre><p>创建一个项目</p><pre class=" language-sh"><code class="language-sh">$ create-react-app your-app 注意命名方式</code></pre><h1 id="React-事件与方法"><a href="#React-事件与方法" class="headerlink" title="React 事件与方法"></a>React 事件与方法</h1><p>通过前面的练习，我们将用class写</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">IndecisionApp</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">const</span> title <span class="token operator">=</span><span class="token string">'Indecision'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> subtitle <span class="token operator">=</span> <span class="token string">'Put your life in the hand of Computer'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"option 1"</span><span class="token punctuation">,</span><span class="token string">"option 2"</span><span class="token punctuation">,</span><span class="token string">"option 3"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;title&amp;#125;</span> <span class="token attr-name">subtitle</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;subtitle&amp;#125;/</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Actions</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Options</span> <span class="token attr-name">optionArray</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;options&amp;#125;/</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AddOption</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">Header</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>title<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>subtitle<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">Actions</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">handlePick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"pick!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* &lt;p>This is Action&lt;/p> */</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handlePick&amp;#125;</span> <span class="token punctuation">></span></span>What should I <span class="token keyword">do</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">Options</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"remove all "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        Here are option Components <span class="token keyword">from</span> optionArray        <span class="token entity" title="&#123;">&amp;#123;</span>         <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>optionArray<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>            <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Option</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;option&amp;#125;</span> <span class="token attr-name">optionText</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;option&amp;#125;/</span><span class="token punctuation">></span></span>          <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>        <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.removeAll&amp;#125;</span><span class="token punctuation">></span></span> Remove All<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">Option</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* &lt;p>This is Option Components&lt;/p> */</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>optionText<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//AddOption</span><span class="token keyword">class</span> <span class="token class-name">AddOption</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">addOptionFunc</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//防止刷新</span>    <span class="token keyword">const</span> option <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>option<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得输入值</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>      e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>option<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空输入值的显示</span>    <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is AddOption Components<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.addOptionFunc&amp;#125;</span><span class="token punctuation">></span></span>            <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* name 用来取值*/</span><span class="token entity" title="&#125;">&amp;#125;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span><span class="token operator">+</span><span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">/* const title ='Indecision';const subtitle = 'Put your life in the hand of Computer';const options = ["option 1","option 2"] const jxs = (   &lt;div>      &lt;Header title=&amp;#123;title&amp;#125; subtitle=&amp;#123;subtitle&amp;#125;/>     &lt;Actions />     &lt;Options optionArray=&amp;#123;options&amp;#125;/>     &lt;AddOption />   &lt;/div> )*/</span><span class="token comment" spellcheck="true">//注意此处 const 与class 渲染的不同方式</span><span class="token comment" spellcheck="true">//ReactDOM.render(jxs, document.getElementById('root'));</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IndecisionApp</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h1><h2 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h2><p><strong>React事件绑定时需要注意this指向</strong></p><p>react事件绑定时。this并不会指向当前DOM元素。往往使用bind来改变this指向。有参数就得使用bind</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.function.bind(this)&amp;#125;</span><span class="token punctuation">></span></span>Click Me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><blockquote><p>参考这篇文章：<a href="https://www.bignerdranch.com/blog/choosing-the-best-approach-for-react-event-handlers/">Choosing the Best Approach for React Event Handlers</a></p><p>1、function.bind()方式</p><p>2、inline arrow function方式</p><p>3、Class Property Arrow Functions - constructor</p><p>第一种方式比较常见，但因为每次父组件render时，会重新生成一个函数，相当于子组件的props发生了改变。子组件的PureComponent会失效。</p><p>第二种是一种性能好，书写简单，功能强大的方式。</p><p>第三种因为是类的属性，可能涉及到继承、方法调用问题，性能有影响。</p></blockquote><p>接下来要加上动态事件，这时候跟前面的区别在于这里由于用的是class，属性之间没有办法很好的共享</p><h3 id="function-bind-方式"><a href="#function-bind-方式" class="headerlink" title="function.bind()方式"></a>function.bind()方式</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>    name<span class="token operator">=</span><span class="token string">"tom"</span><span class="token punctuation">;</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//这里利用bind绑定对于后面的obj</span><span class="token keyword">const</span> getName<span class="token operator">=</span>obj<span class="token punctuation">,</span>getName<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>name<span class="token punctuation">:</span><span class="token string">"joe"</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="inline-arrow-function方式"><a href="#inline-arrow-function方式" class="headerlink" title="inline arrow function方式"></a>inline arrow function方式</h3><ol><li>为事件提供的处理函数，必须是如下格式</li></ol><pre><code>onClick= &#123; function &#125; </code></pre><ol start="2"><li>用的最多的事件绑定形式为：</li></ol><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">'传参'</span><span class="token punctuation">)</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">// 事件的处理函数，需要定义为 一个箭头函数，然后赋值给 函数名称</span>show <span class="token operator">=</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'show方法'</span> <span class="token operator">+</span> arg1<span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h2 id="回归例子"><a href="#回归例子" class="headerlink" title="回归例子"></a>回归例子</h2><h3 id="方式一-bind"><a href="#方式一-bind" class="headerlink" title="方式一 -  bind"></a>方式一 -  bind</h3><p>实际上我们尝试用处理removeAll, 先拿到所有的props，两种办法</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//方法1：加上removeAll动态的事件，拿到如数的数据，方式一：绑定bind（）</span><span class="token keyword">class</span> <span class="token class-name">Options</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>optionArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        Here are option Components <span class="token keyword">from</span> optionArray        <span class="token entity" title="&#123;">&amp;#123;</span>         <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>optionArray<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>            <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Option</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;option&amp;#125;</span> <span class="token attr-name">optionText</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;option&amp;#125;/</span><span class="token punctuation">></span></span>          <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>        <span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* 绑定“参数对象”，所以这里绑定的实际上是传进来的props，所以函数操作对应就是参数对象 */</span><span class="token entity" title="&#125;">&amp;#125;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.removeAll.bind(this)&amp;#125;</span><span class="token punctuation">></span></span> Remove All<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><p>缺点：</p><ol><li>数量多时极其浪费内存</li><li>如果是子组件的props，则会导致子组件重新渲染</li></ol><h3 id="方式二-：通过constructor绑定"><a href="#方式二-：通过constructor绑定" class="headerlink" title="方式二 ：通过constructor绑定"></a>方式二 ：通过constructor绑定</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//方式二 通过constructor绑定</span><span class="token keyword">class</span> <span class="token class-name">Options</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">//构造函数继承</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>removeAll <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>removeAll<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>optionArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        Here are option Components <span class="token keyword">from</span> optionArray        <span class="token entity" title="&#123;">&amp;#123;</span>         <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>optionArray<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>            <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Option</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;option&amp;#125;</span> <span class="token attr-name">optionText</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;option&amp;#125;/</span><span class="token punctuation">></span></span>          <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>        <span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* 绑定“参数的this” */</span><span class="token entity" title="&#125;">&amp;#125;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.removeAll&amp;#125;</span><span class="token punctuation">></span></span> Remove All<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h3 id="方式三-箭头函数"><a href="#方式三-箭头函数" class="headerlink" title="方式三 箭头函数"></a>方式三 箭头函数</h3><h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><p>组件自身的state，<strong>注意！！注意！！ 这是对象</strong></p><h2 id="setState函数"><a href="#setState函数" class="headerlink" title="setState函数"></a>setState函数</h2><p>做一个计数器中利用state进行改变数量</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//利用算数函数 确保立即执行 保障同步性；因为setState本身是异步函数</span><span class="token function">incrementCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevState<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>      count<span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//count 是state中属性</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevState<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>      count<span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span></code></pre><p><img src="/2020/12/16/react-1week01/image-20201216190542366.png"></p><p>实际上不会，由于是异步，所以第一个设为0并没有完成，但是可能先+1；</p><h2 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h2><p>改变class内state变量</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>addone<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>addone<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>minuseone<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>minuseone<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reset<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>reset<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span> count<span class="token punctuation">:</span><span class="token number">100</span> <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">addone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>       <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span>         count<span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">minuseone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>      <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span>        count<span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>count<span class="token number">-1</span><span class="token entity" title="&#125;">&amp;#125;</span>   <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>      <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span>        count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token entity" title="&#125;">&amp;#125;</span>   <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Count<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>addone <span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">></span> <span class="token operator">+</span><span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.minuseone&amp;#125;</span><span class="token punctuation">></span></span> <span class="token operator">-</span><span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.reset&amp;#125;</span><span class="token punctuation">></span></span> reset<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Counter</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="setState-的三种写法"><a href="#setState-的三种写法" class="headerlink" title="setState 的三种写法"></a>setState 的三种写法</h2><p><strong>(1)对象</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>key <span class="token punctuation">:</span> value<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//或者</span><span class="token keyword">const</span> <span class="token keyword">new</span><span class="token operator">=</span><span class="token string">"newValue"</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p><strong>(2)函数，一般是用于在setState之前做一些操作</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>key <span class="token punctuation">:</span> value<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//或者</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      a<span class="token punctuation">:</span><span class="token number">300</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> </code></pre><p><strong>(3)第二个参数，一般是用于在setState之后做一些操作</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  a<span class="token punctuation">:</span><span class="token number">300</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// TODO</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'state值修改成功，现在的name值为'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="存在props值的修改state的值"><a href="#存在props值的修改state的值" class="headerlink" title="存在props值的修改state的值"></a>存在props值的修改state的值</h2><p>因为更新的 props 和状态是异步的。这里，我们根据这些 props 更新状态。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 错误方式</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>  total<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>total <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">,</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 正确方式</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>     <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span>total<span class="token punctuation">:</span> state<span class="token punctuation">.</span>total <span class="token operator">+</span> props<span class="token punctuation">.</span>count<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span></code></pre><h1 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h1><h2 id="默认props-amp-基本props"><a href="#默认props-amp-基本props" class="headerlink" title="默认props &amp; 基本props"></a>默认props &amp; 基本props</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//默认input设置</span><span class="token keyword">const</span> ShoppingCart <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Shopping Cart Component<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span> ShoppingCart<span class="token punctuation">.</span>defaultProps<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>items <span class="token punctuation">:</span> <span class="token number">0</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//输入变量</span><span class="token keyword">const</span> Items <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Current Quantity <span class="token keyword">of</span> Items <span class="token keyword">in</span> Cart<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>quantity<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token entity" title="&#125;">&amp;#125;</span>Items<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>  quantity<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">ShoppingCart</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span> <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>     <span class="token keyword">return</span> <span class="token operator">&lt;</span>Items quantity<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span> <span class="token number">10</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">/</span><span class="token operator">></span>   <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组</span><span class="token operator">&lt;</span>ChildComponent colors<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token punctuation">[</span><span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">]</span><span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><h2 id="props-输入限制"><a href="#props-输入限制" class="headerlink" title="props 输入限制"></a>props 输入限制</h2><pre class=" language-jsx"><code class="language-jsx">componentName<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>  inputName<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token comment" spellcheck="true">//string </span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>componentName<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>  inputName<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">.</span>isRequired<span class="token comment" spellcheck="true">//number</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span></code></pre><h2 id="Props-children"><a href="#Props-children" class="headerlink" title="Props children"></a>Props children</h2><p>this.props.children。它表示组件所有的子节点。<br>this.props.children 的值有三种可能：</p><ul><li>如果当前组件没有子节点，它就是 undefined；</li><li>如果有一个子节点，数据类型是 object；</li><li>如果有多个子节点，数据类型就是 array</li></ul><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>一个 span 标签在 Parent 中作为Child的子节点传入，可在 Child 中通过 this.props.children 取到：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>slot1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>slot2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>slot3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h3 id="React-Children-方法"><a href="#React-Children-方法" class="headerlink" title="React.Children 方法"></a>React.Children 方法</h3><p>React 提供了工具方法 React.Children 来处理 this.props.children。</p><ol><li>React.Children.map</li></ol><pre class=" language-html"><code class="language-html">object React.Children.map(object children, function fn)</code></pre><p>遍历 props.children ，在每一个子节点上调用 fn 函数。</p><ol start="2"><li>React.Children.forEach</li></ol><pre class=" language-html"><code class="language-html">React.Children.forEach(object children, function fn)</code></pre><p>类似于 React.Children.map()，但是不返回对象。</p><ol start="3"><li>React.Children.count</li></ol><pre class=" language-html"><code class="language-html">number React.Children.count(object children)</code></pre><p>返回 children 当中的组件总数。</p><ol start="4"><li>React.Children.only</li></ol><pre class=" language-html"><code class="language-html">object React.Children.only(object children)</code></pre><p>返回 children 中仅有的子节点。如果在 props.children 传入多个子节点，将会抛出异常。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,</span> <span class="token attr-name">initial-scale</span><span class="token attr-value"><span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>common/react.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>common/react-dom.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/babel-core/5.8.38/browser.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>           <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>               <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/*props.children获取下面4个子节点:3个元素节点和1个文字节点*/</span><span class="token entity" title="&#125;">&amp;#125;</span>                    <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;index&amp;#125;</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>item<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token entity" title="&#125;">&amp;#125;</span>       <span class="token entity" title="&#125;">&amp;#125;</span>       ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">></span></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/*加一些子元素*/</span><span class="token entity" title="&#125;">&amp;#125;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>rick<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>zhangamie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>react<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token number">2132132</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>App</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>           document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span>       <span class="token punctuation">)</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="Props-vs-State"><a href="#Props-vs-State" class="headerlink" title="Props vs State"></a>Props vs State</h1><p><img src="/2020/12/16/react-1week01/image-20201216190719032.png"></p><p>props是单向联动的</p><h1 id="函数组件-函数名称以大写字母开头"><a href="#函数组件-函数名称以大写字母开头" class="headerlink" title="函数组件-函数名称以大写字母开头"></a>函数组件-函数名称以大写字母开头</h1><h2 id="无状态组件"><a href="#无状态组件" class="headerlink" title="无状态组件"></a>无状态组件</h2><p><strong>无状态组件不支持this！！</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/* 基本语法const User=()=>&amp;#123;    return &lt;div>&lt;/div>&amp;#125;*/</span><span class="token comment" spellcheck="true">//这里不需要用this.props</span><span class="token keyword">const</span> User<span class="token operator">=</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Name<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Age<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>age<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>User</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span> <span class="token attr-name">age</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;28&amp;#125;/</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="class组件-const组件对比"><a href="#class组件-const组件对比" class="headerlink" title="class组件 const组件对比"></a>class组件 const组件对比</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//注意区别 仔细看对比</span><span class="token keyword">class</span> <span class="token class-name">Header</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>title<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>subtitle<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> Header<span class="token operator">=</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>title<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>subtitle<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h3 id="默认input"><a href="#默认input" class="headerlink" title="默认input"></a>默认input</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Header<span class="token operator">=</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>title<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>subtitle<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//此处为默认input</span><span class="token comment" spellcheck="true">//className.defaultProps=&amp;#123; 属性：''&amp;#125;</span>Header<span class="token punctuation">.</span>defaultProps<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>  title<span class="token punctuation">:</span><span class="token string">'Default Title'</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">IndecisionApp</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>        options <span class="token punctuation">:</span> props<span class="token punctuation">.</span>options      <span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handlePick<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlePick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>removeAll<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>removeAll<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">const</span> title <span class="token operator">=</span><span class="token string">'Indecision App'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> subtitle <span class="token operator">=</span> <span class="token string">'Put your life in the hand of Computer'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>         <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* 此时title就是默认的title         &lt;Header title=&amp;#123;title&amp;#125; subtitle=&amp;#123;subtitle&amp;#125;/>         */</span><span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token attr-name">subtitle</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;subtitle&amp;#125;/</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>IndecisionApp<span class="token punctuation">.</span>defaultProps<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span> option<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//有无输入区别</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IndecisionApp</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ReactDOM.render(&lt;IndecisionApp options=&amp;#123;["option 1","option 2"]&amp;#125; />, document.getElementById('root'));</span></code></pre><h3 id="input双向绑定"><a href="#input双向绑定" class="headerlink" title="input双向绑定"></a>input双向绑定</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">ControlledInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>      input<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span> <span class="token entity" title="&#123;">&amp;#123;</span>      input<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span> <span class="token comment" spellcheck="true">/* 这里注意： 不仅input输入变状态 状态的改变也会改变输入*/</span><span class="token entity" title="&#125;">&amp;#125;</span>          <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>input<span class="token entity" title="&#125;">&amp;#125;</span> onChange<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token operator">/</span><span class="token operator">></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>Controlled Input <span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>input<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span></code></pre><h3 id="onclick函数"><a href="#onclick函数" class="headerlink" title="onclick函数"></a>onclick函数</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Option <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>optionText<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span><span class="token function">deleteFunc</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>inputText<span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">></span>remove <span class="token keyword">this</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleClick&amp;#125;</span><span class="token punctuation">></span></span>Click Me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/*handleClick是函数*/</span><span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h2 id="状态组件"><a href="#状态组件" class="headerlink" title="状态组件"></a>状态组件</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">StatefulComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>        name<span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>      <span class="token comment" spellcheck="true">//或者可以这里有个const 拿到上面的state中的值，下面再次调取</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span></code></pre><h1 id="父子组件之间的传递以及实例"><a href="#父子组件之间的传递以及实例" class="headerlink" title="父子组件之间的传递以及实例"></a>父子组件之间的传递以及实例</h1><h2 id="单纯的input传输"><a href="#单纯的input传输" class="headerlink" title="单纯的input传输"></a>单纯的input传输</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>      inputValue<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>      inputValue<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GetInput</span> <span class="token attr-name">input</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.state.inputValue&amp;#125;</span>  <span class="token attr-name">handleChange</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleChange&amp;#125;/</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RenderInput</span> <span class="token attr-name">input</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.state.inputValue&amp;#125;/</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GetInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Get Input<span class="token punctuation">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.props.input&amp;#125;</span>          <span class="token attr-name">onChange</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.props.handleChange&amp;#125;/</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">RenderInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Input Render<span class="token punctuation">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>input<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span></code></pre><h2 id="子组件事件-影响父组件state"><a href="#子组件事件-影响父组件state" class="headerlink" title="子组件事件 影响父组件state"></a>子组件事件 影响父组件state</h2><p>父组件 - IndecisionApp</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">IndecisionApp</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>            options <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"option 1"</span><span class="token punctuation">,</span><span class="token string">"option 2"</span><span class="token punctuation">,</span><span class="token string">"option 3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//options : [ ]</span>            pickedOption<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    handleRemove<span class="token operator">=</span><span class="token punctuation">(</span>optionValue<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"remove this "</span><span class="token punctuation">,</span>optionValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>            options<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>                <span class="token keyword">return</span>  elem <span class="token operator">!==</span> optionValue              <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">const</span> subtitle <span class="token operator">=</span> <span class="token string">'Put your life in the hands of a computer'</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token attr-name">subtitle</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;subtitle&amp;#125;/</span><span class="token punctuation">></span></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* What should i do  render pick- 弹窗+产生随机数 */</span><span class="token entity" title="&#125;">&amp;#125;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Action</span> <span class="token attr-name">active</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.state.options.length&amp;#125;</span> <span class="token attr-name">hanldPickOption</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.hanldPickOption&amp;#125;</span> <span class="token punctuation">/></span></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* show all options+ remove all + remove one */</span><span class="token entity" title="&#125;">&amp;#125;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Options</span> <span class="token attr-name">options</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.state.options&amp;#125;</span> <span class="token attr-name">removeAll</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleRemoveAll&amp;#125;</span> <span class="token attr-name">remove</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleRemove&amp;#125;/</span><span class="token punctuation">></span></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* add one option */</span><span class="token entity" title="&#125;">&amp;#125;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AddOption</span> <span class="token attr-name">addOption</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleAddOption&amp;#125;/</span><span class="token punctuation">></span></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* 弹框 */</span><span class="token entity" title="&#125;">&amp;#125;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OptionModal</span> <span class="token attr-name">pickedOption</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.state.pickedOption&amp;#125;</span> <span class="token attr-name">clearPickedOption</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.clearPickedOption&amp;#125;</span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token entity" title="&#125;">&amp;#125;</span></code></pre><p>子组件 - Options</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Options <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>options<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Add an option to started<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* &amp;#123;props.options.map((i) => &lt;li key=&amp;#123;i&amp;#125;>&amp;#123;i&amp;#125; &lt;button onClick=&amp;#123;props.remove&amp;#125;> remove &lt;/button>&lt;/li>)&amp;#125;  */</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Option</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;e&amp;#125;</span> <span class="token attr-name">optionText</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;e&amp;#125;</span> <span class="token attr-name">remove</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;props.remove&amp;#125;/</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;props.removeAll&amp;#125;</span><span class="token punctuation">></span></span>Remove all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Options</code></pre><h2 id="子组件向父组件通信"><a href="#子组件向父组件通信" class="headerlink" title="子组件向父组件通信"></a>子组件向父组件通信</h2><p>子组件通过 回调函数 向父组件传递数据。父组件将自己的某个方法传递给子组件，子组件通过this.props接收到父组件的方法后进行调用。</p><p>如果子组件内需要修改父组件传递过来的数据，需要通过调用父组件的方法，在父组件中对数据进行修改。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token entity" title="&#123;">&amp;#123;</span> Component <span class="token punctuation">,</span>createRef<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子组件</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token entity" title="&#123;">&amp;#123;</span>   state<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>     name<span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span>     age<span class="token punctuation">:</span><span class="token number">18</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  childClickHandle<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>address<span class="token punctuation">:</span><span class="token string">"beijing"</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>             <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/*方式一：直接调用父组件的方法*/</span><span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.props.showInfo.bind(this,this.state)&amp;#125;</span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/*方式二：先调用自身的方法，再调用父组件的方法*/</span><span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.childClickHandle&amp;#125;</span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">//父组件</span><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">clickHandle</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token comment" spellcheck="true">//data为子组件中传递过来的数据</span>    <span class="token comment" spellcheck="true">//&amp;#123;address: "beijing"&amp;#125;</span>    <span class="token comment" spellcheck="true">//&amp;#123;name: "admin", age: 18, sex: "woman"&amp;#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">showInfo</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.clickHandle.bind(this)&amp;#125;</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">></span></span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Parent</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h1><ul><li><a href="https://blog.csdn.net/u012372720/article/details/94000150">https://blog.csdn.net/u012372720/article/details/94000150</a></li><li>CodeCamp 练习题</li><li><a href="https://blog.csdn.net/Charissa2017/article/details/105746685">React 组件通信的五种方式_props_ref_Context_Redux</a></li></ul><h1 id="拓展读物"><a href="#拓展读物" class="headerlink" title="拓展读物"></a>拓展读物</h1><p><a href="https://doc.xuwenliang.com/docs/react/3503">五分钟，简单聊一聊React Component的发展历程</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react3-Form&amp;Array</title>
      <link href="2020/12/15/react3/"/>
      <url>2020/12/15/react3/</url>
      
        <content type="html"><![CDATA[<h1 id="react-之-表单组件"><a href="#react-之-表单组件" class="headerlink" title="react 之 表单组件"></a>react 之 表单组件</h1><p>在React中表单组件分为约束组件和无约束组件两种。</p><p>　　- 无约束组件，是指其value值不通过的props或者state来设置，仅由其自身来决定。表单组件的值的变化也不会被记录，只能通过找到DOM节点的方式来获取。</p><p>　　- 约束组件，是React中推荐的表单的使用方式。表单组件的值并不是由其自身决定，而是通过父组件传递或者本身的state来控制。其内容的每次变化都会被保存，需要时仅需要通过this.state便能获取。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react2-组件</title>
      <link href="2020/12/15/react2/"/>
      <url>2020/12/15/react2/</url>
      
        <content type="html"><![CDATA[<h1 id="组件的数据挂载方式"><a href="#组件的数据挂载方式" class="headerlink" title="组件的数据挂载方式"></a>组件的数据挂载方式</h1><h2 id="1、利用ES6进行属性修改"><a href="#1、利用ES6进行属性修改" class="headerlink" title="1、利用ES6进行属性修改"></a>1、利用ES6进行属性修改</h2><h3 id="1-点击button修改属性值"><a href="#1-点击button修改属性值" class="headerlink" title="1.点击button修改属性值"></a>1.点击button修改属性值</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">let</span> count<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">const</span> addone<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  count<span class="token operator">++</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span><span class="token string">"addone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">renderTemple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> minuseone<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  count<span class="token operator">--</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span><span class="token string">"minusone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">renderTemple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> reset<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span><span class="token string">"reset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">renderTemple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> renderTemple<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">const</span> temple2 <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Count<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span>count<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;addone&amp;#125;</span><span class="token punctuation">></span></span> <span class="token operator">+</span><span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;minuseone&amp;#125;</span><span class="token punctuation">></span></span> <span class="token operator">-</span><span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;reset&amp;#125;</span><span class="token punctuation">></span></span> reset<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> temple2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token function">renderTemple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-input值获取"><a href="#2-input值获取" class="headerlink" title="2.input值获取"></a>2.input值获取</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">const</span> App <span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>  title<span class="token punctuation">:</span><span class="token string">"this is main title"</span><span class="token punctuation">,</span>  subtitle<span class="token punctuation">:</span> <span class="token string">"this is 2nd title"</span><span class="token punctuation">,</span>  option<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> onFormSubmit<span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//防止刷新</span>  <span class="token keyword">const</span> option <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>option<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得输入值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    App<span class="token punctuation">.</span>option<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取得输入值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>App<span class="token punctuation">.</span>option<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>option<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空输入值的显示</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">renderTemple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> removeAll <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  App<span class="token punctuation">.</span>option<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> renderTemple<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">const</span> temple2 <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Title<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span>App<span class="token punctuation">.</span>title<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>          <span class="token entity" title="&#123;">&amp;#123;</span>App<span class="token punctuation">.</span>option<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span> <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Here you have options<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>No option<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>option<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span>App<span class="token punctuation">.</span>option<span class="token punctuation">.</span>length<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item <span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item <span class="token number">2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;onFormSubmit&amp;#125;</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>add option<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;removeAll&amp;#125;</span> <span class="token punctuation">></span></span>remove all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> temple2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token function">renderTemple</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3-数组展示数据"><a href="#3-数组展示数据" class="headerlink" title="3.数组展示数据"></a>3.数组展示数据</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">const</span> App <span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>   option<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> renderTemple<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">const</span> temple2 <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>option<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span>App<span class="token punctuation">.</span>option<span class="token punctuation">.</span>length<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>          <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* map函数是 **.map(()=>())  注意格式！！！！*/</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span>         App<span class="token punctuation">.</span>option<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;option&amp;#125;</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>option<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">// 这里的key必须唯一</span>          <span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> temple2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token function">renderTemple</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="2、属性-props"><a href="#2、属性-props" class="headerlink" title="2、属性(props)"></a>2、属性(props)</h2><p><code>props</code>是正常是外部传入的，<code>props</code>可以初始化设置，<code>props</code>属性是描述性质、特点的，组件自己不能随意更改，但是可以通过父组件主动重新渲染的方式来传入新的 <code>props</code> </p><p>Props可以设置默认值</p><p>HelloMessage.defaultProps = {  name:”老陈”，msg：“helloworld”  }</p><p>注意：props可以传递函数，props可以传递父元素的函数，就可以去修改父元素的state,从而达到传递数据给父元素。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token entity" title="&#123;">&amp;#123;</span> Component<span class="token punctuation">,</span> Fragment <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">Title</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎进入<span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span>的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> Content <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span>是一个构建UI的库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>React<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>React.js<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="1-设置组件的默认props"><a href="#1-设置组件的默认props" class="headerlink" title="(1) 设置组件的默认props"></a>(1) 设置组件的默认props</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token entity" title="&#123;">&amp;#123;</span> Component<span class="token punctuation">,</span> Fragment <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">Title</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token comment" spellcheck="true">// 使用类创建的组件，直接在这里写static方法，创建defaultProps</span>  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>    name<span class="token punctuation">:</span> <span class="token string">'React'</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎进入<span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span>的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> Content <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span>是一个构建UI的库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">// 使用箭头函数创建的组件，需要在这个组件上直接写defaultProps属性</span>Content<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>  name<span class="token punctuation">:</span> <span class="token string">'React.js'</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span>            <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* 由于设置了defaultProps， 不传props也能正常运行，如果传递了就会覆盖defaultProps的值 */</span><span class="token entity" title="&#125;">&amp;#125;</span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre><h3 id="2-props-children"><a href="#2-props-children" class="headerlink" title="(2) props.children"></a>(2) props.children</h3><p>我们知道使用组件的时候，可以嵌套。要在自定义组件的使用嵌套结构，就需要使用 <code>props.children</code> 。在实际的工作当中，我们几乎每天都需要用这种方式来编写组件。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token entity" title="&#123;">&amp;#123;</span> Component<span class="token punctuation">,</span> Fragment <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">Title</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎进入<span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token entity" title="&#125;">&amp;#125;</span>的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> Content <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>children<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">></span></span>React<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>React<span class="token punctuation">.</span>js<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>是一个构建UI的库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Content</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre><h3 id="3-使用prop-types检查props"><a href="#3-使用prop-types检查props" class="headerlink" title="(3) 使用prop-types检查props"></a>(3) 使用prop-types检查props</h3><p>React其实是为了构建大型应用程序而生, 在一个大型应用中，根本不知道别人使用你写的组件的时候会传入什么样的参数，有可能会造成应用程序运行不了，但是不报错。为了解决这个问题，React提供了一种机制，让写组件的人可以给组件的<code>props</code>设定参数检查，需要安装和使用<a href="https://www.npmjs.com/package/prop-types">prop-types</a>:</p><pre class=" language-sh"><code class="language-sh">$ npm i prop-types -S</code></pre><h2 id="3、状态-state"><a href="#3、状态-state" class="headerlink" title="3、状态(state)"></a>3、状态(state)</h2><p>状态就是组件描述某种显示情况的数据，由组件自己设置和更改，也就是说由组件自己维护，使用状态的目的就是为了在不同的状态下使组件的显示不同(自己管理)</p><p><strong>相当于VUE的DATA,但是使用方式跟VUE不一致。</strong></p><h3 id="1-定义state"><a href="#1-定义state" class="headerlink" title="(1) 定义state"></a>(1) 定义state</h3><p>第一种方式</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token entity" title="&#123;">&amp;#123;</span> Component <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> name<span class="token punctuation">:</span> <span class="token string">'React'</span><span class="token punctuation">,</span> isLiked<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎来到<span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span>的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>          <span class="token entity" title="&#123;">&amp;#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLiked <span class="token operator">?</span> <span class="token string">'❤️取消'</span> <span class="token punctuation">:</span> <span class="token string">'🖤收藏'</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre><p>另一种方式(推荐)</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token entity" title="&#123;">&amp;#123;</span> Component <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> name<span class="token punctuation">:</span> <span class="token string">'React'</span><span class="token punctuation">,</span> isLiked<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎来到<span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span>的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>              <span class="token entity" title="&#123;">&amp;#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLiked <span class="token operator">?</span> <span class="token string">'❤️取消'</span> <span class="token punctuation">:</span> <span class="token string">'🖤收藏'</span><span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre><p><code>this.props</code>和<code>this.state</code>是纯js对象,在vue中，data属性是利用<code>Object.defineProperty</code>处理过的，更改data的数据的时候会触发数据的<code>getter</code>和<code>setter</code>，但是React中没有做这样的处理，如果直接更改的话，react是无法得知的，所以，需要使用特殊的更改状态的方法<code>setState</code>。</p><h3 id="2-setState"><a href="#2-setState" class="headerlink" title="(2) setState"></a>(2) setState</h3><p><code>isLiked</code> 存放在实例的 <code>state</code> 对象当中，组件的 <code>render</code> 函数内，会根据组件的 <code>state</code> 的中的<code>isLiked</code>不同显示“取消”或“收藏”内容。下面给 <code>button</code> 加上了点击的事件监听。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token entity" title="&#123;">&amp;#123;</span> Component <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> name<span class="token punctuation">:</span> <span class="token string">'React'</span><span class="token punctuation">,</span> isLiked<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token comment" spellcheck="true">//click event </span>  handleBtnClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>isLiked<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLiked<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎来到<span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span>的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.handleBtnClick&amp;#125;</span><span class="token punctuation">></span></span>          <span class="token entity" title="&#123;">&amp;#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLiked <span class="token operator">?</span> <span class="token string">'❤️取消'</span> <span class="token punctuation">:</span> <span class="token string">'🖤收藏'</span> <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>setState</code>有两个参数</p><p>第一个参数可以是对象，也可以是方法return一个对象，我们把这个参数叫做<code>updater</code></p><ul><li><p>参数是对象</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span>  isLiked<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLiked<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span></code></pre></li><li><p>参数是方法</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevState<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span>isLiked<span class="token punctuation">:</span> <span class="token operator">!</span>prevState<span class="token punctuation">.</span>isLiked<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span></code></pre><p>注意的是这个方法接收两个参数，第一个是上一次的state, 第二个是props</p></li></ul><p><code>setState</code>是异步的，所以想要获取到最新的state，没有办法获取，就有了第二个参数，这是一个可选的回调函数</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevState<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">return</span> <span class="token entity" title="&#123;">&amp;#123;</span> isLiked<span class="token punctuation">:</span> <span class="token operator">!</span>prevState<span class="token punctuation">.</span>isLiked <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'回调里的'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLiked<span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setState外部的'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLiked<span class="token punctuation">)</span></code></pre><h2 id="4、属性vs状态"><a href="#4、属性vs状态" class="headerlink" title="4、属性vs状态"></a>4、属性vs状态</h2><p>相似点：都是纯js对象，都会触发render更新，都具有确定性（状态/属性相同，结果相同）</p><p>不同点：</p><ol><li>属性能从父组件获取，状态不能</li><li>属性可以由父组件修改，状态不能</li><li>属性能在内部设置默认值，状态也可以</li><li>属性不在组件内部修改，状态要改</li><li>属性能设置子组件初始值，状态不可以</li><li>属性可以修改子组件的值，状态不可以</li></ol><p><code>state</code> 的主要作用是用于组件保存、控制、修改自己的可变状态。<code>state</code> 在组件内部初始化，可以被组件自身修改，而外部不能访问也不能修改。你可以认为 <code>state</code> 是一个局部的、只能被组件自身控制的数据源。<code>state</code> 中状态可以通过 <code>this.setState</code>方法进行更新，<code>setState</code> 会导致组件的重新渲染。</p><p><code>props</code> 的主要作用是让使用该组件的父组件可以传入参数来配置该组件。它是外部传进来的配置参数，组件内部无法控制也无法修改。除非外部组件主动传入新的 <code>props</code>，否则组件的 <code>props</code> 永远保持不变。</p><p>如果搞不清 <code>state</code> 和 <code>props</code> 的使用场景，记住一个简单的规则：**尽量少地用 <code>state</code>，多用 <code>props</code>**。</p><p>没有 <code>state</code> 的组件叫无状态组件（stateless component），设置了 state 的叫做有状态组件（stateful component）。因为状态会带来管理的复杂性，我们尽量多地写无状态组件，尽量少地写有状态的组件。这样会降低代码维护的难度，也会在一定程度上增强组件的可复用性</p><h1 id="这部分内容的demo"><a href="#这部分内容的demo" class="headerlink" title="这部分内容的demo"></a>这部分内容的demo</h1><h2 id="indecision-app"><a href="#indecision-app" class="headerlink" title="indecision-app"></a>indecision-app</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">const</span> App <span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>  title<span class="token punctuation">:</span><span class="token string">"this is main title"</span><span class="token punctuation">,</span>  subtitle<span class="token punctuation">:</span> <span class="token string">"this is 2nd title"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//option:["onw","two","three","four","five","fix","seven"]</span>  option<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> onFormSubmit<span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止刷新</span>  <span class="token keyword">const</span> option <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>option<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得输入值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    App<span class="token punctuation">.</span>option<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取得输入值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>App<span class="token punctuation">.</span>option<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>option<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空输入值的显示</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token function">renderTemple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> removeAll <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span> App<span class="token punctuation">.</span>option<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> Select<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">const</span> randomNum<span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> App<span class="token punctuation">.</span>option<span class="token punctuation">.</span>length<span class="token punctuation">)</span>     <span class="token function">alert</span><span class="token punctuation">(</span>App<span class="token punctuation">.</span>option<span class="token punctuation">[</span>randomNum<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> renderTemple<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">const</span> temple2 <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Title<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span>App<span class="token punctuation">.</span>title<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>          <span class="token entity" title="&#123;">&amp;#123;</span>App<span class="token punctuation">.</span>title <span class="token operator">&amp;&amp;</span> App<span class="token punctuation">.</span>subtitle <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>App<span class="token punctuation">.</span>title<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token entity" title="&#123;">&amp;#123;</span>App<span class="token punctuation">.</span>option<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span> <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Here you have options<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>No option<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>option<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span>App<span class="token punctuation">.</span>option<span class="token punctuation">.</span>length<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token operator">&lt;</span>button disabled<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>App<span class="token punctuation">.</span>option<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token entity" title="&#125;">&amp;#125;</span> onClick<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>Select<span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">></span>  What should I <span class="token keyword">do</span><span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>          <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* map函数是 **.map(()=>())  注意格式！！！！*/</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span>         App<span class="token punctuation">.</span>option<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;option&amp;#125;</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>option<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;onFormSubmit&amp;#125;</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>add option<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;removeAll&amp;#125;</span> <span class="token punctuation">></span></span>remove all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> temple2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token function">renderTemple</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="Visibility-Toggle"><a href="#Visibility-Toggle" class="headerlink" title="Visibility Toggle"></a>Visibility Toggle</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">let</span> visibility<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">const</span> toggle<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>      visibility<span class="token operator">=</span><span class="token operator">!</span>visibility<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>visibility<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">renderTemple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> renderTemple<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">const</span> temple2 <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Visibility Toggle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;toggle&amp;#125;</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>visibility<span class="token operator">?</span> <span class="token string">"Show Detail"</span> <span class="token punctuation">:</span> <span class="token string">"Hide Detail"</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>         <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/*根据visibility显示*/</span><span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* &amp;#123;visibility? &lt;p>&lt;/p> : &lt;p>This is the content&lt;/p>&amp;#125; */</span><span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token entity" title="&#123;">&amp;#123;</span>visibility <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is the content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> temple2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token function">renderTemple</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-JSX&amp;React元素</title>
      <link href="2020/12/14/react/"/>
      <url>2020/12/14/react/</url>
      
        <content type="html"><![CDATA[<h1 id="React官方"><a href="#React官方" class="headerlink" title="React官方"></a><a href="https://react.docschina.org/">React官方</a></h1><h1 id="React-特点"><a href="#React-特点" class="headerlink" title="React 特点"></a>React 特点</h1><p>1、声明式的设计</p><p>2、高效，采用虚拟DOM来实现DOM的渲染，最大限度的减少DOM的操作。</p><p>3、灵活，跟其他库灵活搭配使用。</p><p>4、JSX，俗称JS里面写HTML，JavaScript语法的扩展。</p><p>5、组件化，模块化。代码容易复用，2016年之前大型项目非常喜欢react</p><p>6、单向数据流。没有实现数据的双向绑定。数据-》视图-》事件-》数据</p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>1、通过script引入使用，仅用于学习调试使用</p><pre><code>&lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</code></pre><p>2.通过react的脚手架，创建项目进行开发，部署。（推荐）</p><p>全局安装create-react-app</p><pre class=" language-sh"><code class="language-sh">$ npm install -g create-react-app</code></pre><p>创建一个项目</p><pre class=" language-sh"><code class="language-sh">$ create-react-app your-app 注意命名方式</code></pre><p>如果<strong>不想全局安装</strong>，可以直接使用npx</p><pre class=" language-sh"><code class="language-sh">$ npx create-react-app your-app    也可以实现相同的效果</code></pre><p>这需要等待一段时间，这个过程实际上会安装三个东西</p><ul><li>react: react的顶级库</li><li>react-dom: 因为react有很多的运行环境，比如app端的react-native, 我们要在web上运行就使用react-dom</li><li>react-scripts: 包含运行和打包react应用程序的所有脚本及配置</li></ul><p>出现下面的界面，表示创建项目成功:</p><pre class=" language-sh"><code class="language-sh">Success! Created your-app at /dir/your-appInside that directory, you can run several commands:  npm start    Starts the development server.  npm run build    Bundles the app into static files for production.  npm test    Starts the test runner.  npm run eject    Removes this tool and copies build dependencies, configuration files    and scripts into the app directory. If you do this, you can’t go back!We suggest that you begin by typing:  cd your-app  npm start</code></pre><p>根据上面的提示，通过<code>cd your-app</code>命令进入目录并运行<code>npm start</code>即可运行项目。</p><p>生成项目的目录结构如下：</p><pre class=" language-sh"><code class="language-sh">├── README.md                        使用方法的文档├── node_modules                    所有的依赖安装的目录├── package-lock.json                锁定安装时的包的版本号,保证团队的依赖能保证一致。├── package.json                    ├── public                            静态公共目录└── src                                开发用的源代码目录</code></pre><p>常见问题：</p><ul><li>npm安装失败<ul><li>切换为npm镜像为淘宝镜像</li><li>使用yarn，如果本来使用yarn还要失败，还得把yarn的源切换到国内</li><li>如果还没有办法解决，请删除node_modules及package-lock.json然后重新执行<code>npm install命令</code></li><li>再不能解决就删除node_modules及package-lock.json的同时清除npm缓存<code>npm cache clean --force</code>之后再执行<code>npm install</code>命令</li></ul></li><li>yarn<ul><li>安装 npm install -g yarn</li><li>查看版本 yarn –version</li><li>设置淘宝源 yarn config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> -g</li></ul></li></ul><h1 id="react-元素渲染方式"><a href="#react-元素渲染方式" class="headerlink" title="react 元素渲染方式"></a>react 元素渲染方式</h1><h2 id="JSX基本方式"><a href="#JSX基本方式" class="headerlink" title="JSX基本方式"></a>JSX基本方式</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//实现页面时刻的显示</span><span class="token keyword">function</span><span class="token function"> clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> element <span class="token operator">=</span><span class="token function"> </span><span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>现在的时间是<span class="token entity" title="&#123;">&amp;#123;</span>time<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>这是副标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">setInterval</span><span class="token punctuation">(</span>clock<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre><h1 id="React-Jsx-优点"><a href="#React-Jsx-优点" class="headerlink" title="React Jsx 优点"></a>React Jsx 优点</h1><p>优点：</p><p>1、JSX执行更快，编译为JavaScript代码时进行优化</p><p>2、类型更安全，编译过程如果出错就不能编译，及时发现错误</p><p>3、JSX编写模板更加简单快速。（不要跟VUE比）</p><p>注意：</p><p>1、JSX必须要有根节点。</p><p>2、正常的普通HTML元素要小写。如果是大写，默认认为是组件。</p><h2 id="JSX表达式"><a href="#JSX表达式" class="headerlink" title="JSX表达式"></a>JSX表达式</h2><p>1、由HTML元素构成, 一个var 只能由一层div组成</p><p>2、中间如果需要插入变量用{}</p><p>3、{}中间可以使用表达式</p><p>4、{}中间表达式中可以使用JSX对象</p><p>5、属性和html内容一样都是用{}来插入内容</p><p>6、class名 只能用className 换行符可以用<code>&lt;hr /&gt;</code>&amp;<code>&lt;br /&gt;</code></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//定义基本</span><span class="token keyword">var</span> temple1 <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义变量</span><span class="token keyword">var</span> name <span class="token operator">=</span><span class="token string">"header"</span><span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">;</span><span class="token keyword">var</span> app<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>    title<span class="token punctuation">:</span><span class="token string">"this is the main title"</span><span class="token punctuation">,</span>    subtitle<span class="token punctuation">:</span><span class="token string">"this is 2nd title"</span><span class="token punctuation">,</span>    options<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"option1"</span><span class="token punctuation">,</span><span class="token string">"option2"</span><span class="token punctuation">]</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">consoleName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">var</span> temple2 <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>name<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* 三元运算符 */</span><span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>age <span class="token operator">==</span> <span class="token string">"1000"</span><span class="token operator">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* function运用 */</span><span class="token entity" title="&#125;">&amp;#125;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token function">consoleName</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* 本身的题目显示 */</span><span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>app<span class="token punctuation">.</span>title<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* 属性存在简单条件判断 显示或者不显示 利用&amp;&amp; */</span><span class="token entity" title="&#125;">&amp;#125;</span>       <span class="token entity" title="&#123;">&amp;#123;</span>app<span class="token punctuation">.</span>title <span class="token operator">&amp;&amp;</span> app<span class="token punctuation">.</span>subtitle <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>app<span class="token punctuation">.</span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* 显示option */</span><span class="token entity" title="&#125;">&amp;#125;</span>       <span class="token entity" title="&#123;">&amp;#123;</span>app<span class="token punctuation">.</span>options<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span> <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Here you have options<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>No option<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/*此除了可以将p标签放在外面*/</span><span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>app<span class="token punctuation">.</span>subtitle<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> temple2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//let man = '发热';</span><span class="token keyword">let</span> element4 <span class="token operator">=</span><span class="token function"> </span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>横着躺<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>竖着躺<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>man <span class="token operator">=</span> <span class="token string">'正常'</span><span class="token keyword">let</span> element3 <span class="token operator">=</span><span class="token function"> </span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>今天是否隔离<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>man<span class="token operator">==</span><span class="token string">"发热"</span><span class="token operator">?</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>隔离<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">:</span>element4<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    element3<span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token string">'bgRed'</span><span class="token keyword">let</span> logo <span class="token operator">=</span> <span class="token string">'https://www.baidu.com/img/pc_1c6e30772d5e4103103bd460913332f9.png'</span><span class="token comment" spellcheck="true">//HTML的样式类名要写className,因为class在js当中是关键词</span><span class="token keyword">let</span> element5 <span class="token operator">=</span><span class="token function"> </span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;color&amp;#125;</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;logo&amp;#125;</span> <span class="token punctuation">/></span></span>        红色的背景颜色    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element5<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="编写第一个react应用程序"><a href="#编写第一个react应用程序" class="headerlink" title="编写第一个react应用程序"></a>编写第一个react应用程序</h1><p>eact开发需要引入多个依赖文件：react.js、react-dom.js，分别又有开发版本和生产版本，create-react-app里已经帮我们把这些东西都安装好了。把通过CRA创建的工程目录下的src目录清空，然后在里面重新创建一个index.js. 写入以下代码:</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 从 react 的包当中引入了 React。只要你要写 React.js 组件就必须引入React, 因为react里有一种语法叫JSX，稍后会讲到JSX，要写JSX，就必须引入React</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token comment" spellcheck="true">// ReactDOM 可以帮助我们把 React 组件渲染到页面上去，没有其它的作用了。它是从 react-dom 中引入的，而不是从 react 引入。</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token comment" spellcheck="true">// ReactDOM里有一个render方法，功能就是把组件渲染并且构造 DOM 树，然后插入到页面上某个特定的元素上</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">// 这里就比较奇怪了，它并不是一个字符串，看起来像是纯 HTML 代码写在 JavaScript 代码里面。语法错误吗？这并不是合法的 JavaScript 代码, “在 JavaScript 写的标签的”语法叫 JSX- JavaScript XML。</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎进入React的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 渲染到哪里</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="元素与组件"><a href="#元素与组件" class="headerlink" title="元素与组件"></a>元素与组件</h2><h3 id="变量元素"><a href="#变量元素" class="headerlink" title="变量元素"></a>变量元素</h3><p>如果代码多了之后，不可能一直在render方法里写，所以就需要把里面的代码提出来，定义一个变量，像这样：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token comment" spellcheck="true">// 这是在用JSX定义一下react元素</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎进入React的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> app<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎进入<span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span>的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">//const App(props)&amp;#123;</span><span class="token comment" spellcheck="true">//return (&lt;h1>欢迎进入&amp;#123;props.name&amp;#125;的世界&lt;/h1>)</span><span class="token comment" spellcheck="true">//&amp;#125;</span> <span class="token comment" spellcheck="true">// React组件的调用方式</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>react<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>注意！注意！注意！\</strong>组件名必须**大写**，否则报错</p><h3 id="class组件"><a href="#class组件" class="headerlink" title="class组件"></a>class组件</h3><p>ES6的加入让JavaScript直接支持使用class来定义一个类，react的第二种创建组件的方式就是使用的类的继承，<code>ES6 class</code>是目前官方推荐的使用方式.(class 可以实现的，函数组件不一定能实现)</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">// 注意这里得用this.props.name, 必须用this.props</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎进入<span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span>的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>react<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre><p>运行结果和之前完全一样，因为JS里没有真正的class，这个class只是一个语法糖, 但二者的运行机制底层运行机制不一样。</p><ul><li><p>函数式组件是直接调用, 在前面的代码里已经有看到</p></li><li><p><code>es6 class</code>组件其实就是一个构造器,每次使用组件都相当于在实例化组件，像这样：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎进入<span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span>的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> name<span class="token punctuation">:</span> <span class="token string">'react'</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> app<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre></li></ul><h4 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h4><p>Es6中的super可以用在类的继承中，super关键字，它指代父类的实例（即父类的this对象）。子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token entity" title="&#123;">&amp;#123;</span>    constructor <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token entity" title="&#123;">&amp;#123;</span>    constructor <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用在构造函数中，必须在使用this之前调用</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h3 id="组件的组合、嵌套"><a href="#组件的组合、嵌套" class="headerlink" title="组件的组合、嵌套"></a>组件的组合、嵌套</h3><p>将一个组件渲染到某一个节点里的时候，会将这个节点里原有内容覆盖.</p><p>组件嵌套的方式就是将子组件写入到父组件的模板中去，且react没有Vue中的内容分发机制（slot），所以我们在一个组件的模板中只能看到父子关系</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 从 react 的包当中引入了 React 和 React.js 的组件父类 Component</span><span class="token comment" spellcheck="true">// 还引入了一个React.js里的一种特殊的组件 Fragment</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token entity" title="&#123;">&amp;#123;</span> Component<span class="token punctuation">,</span> Fragment <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">Title</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎进入React的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token keyword">class</span> <span class="token class-name">Content</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>React<span class="token punctuation">.</span>js是一个构建UI的库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">/** 由于每个React组件只能有一个根节点，所以要渲染多个组件的时候，需要在最外层包一个容器，如果使用div, 会生成多余的一层domclass App extends Component &amp;#123;  render () &amp;#123;    return (        &lt;div>            &lt;Title />        &lt;Content />      &lt;/div>      )  &amp;#125;&amp;#125;**/</span><span class="token comment" spellcheck="true">// 如果不想生成多余的一层dom可以使用React提供的Fragment组件在最外层进行包裹</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="JSX-原理"><a href="#JSX-原理" class="headerlink" title="JSX 原理"></a>JSX 原理</h1><p>要明白JSX的原理，需要先明白如何用 JavaScript 对象来表现一个 DOM 元素的结构?</p><p>看下面的DOM结构</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>appRoot<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>title<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>欢迎进入React的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    React.js 是一个帮助你构建页面 UI 的库  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> </code></pre><p>上面这个 HTML 所有的信息我们都可以用 JavaScript 对象来表示：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  tag<span class="token punctuation">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>  attrs<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> className<span class="token punctuation">:</span> <span class="token string">'app'</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token string">'appRoot'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      tag<span class="token punctuation">:</span> <span class="token string">'h1'</span><span class="token punctuation">,</span>      attrs<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> className<span class="token punctuation">:</span> <span class="token string">'title'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'欢迎进入React的世界'</span><span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      tag<span class="token punctuation">:</span> <span class="token string">'p'</span><span class="token punctuation">,</span>      attrs<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'React.js 是一个构建页面 UI 的库'</span><span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p>但是用 JavaScript 写起来太长了，结构看起来又不清晰，用 HTML 的方式写起来就方便很多了。</p><p>于是 React.js 就把 JavaScript 的语法扩展了一下，让 JavaScript 语言能够支持这种直接在 JavaScript 代码里面编写类似 HTML 标签结构的语法，这样写起来就方便很多了。编译的过程会把类似 HTML 的 JSX 结构转换成 JavaScript 的对象结构。</p><p>下面代码:</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>appRoot<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>title<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>欢迎进入React的世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>          React<span class="token punctuation">.</span>js 是一个构建页面 UI 的库        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre><p>编译之后将得到这样的代码:</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>        <span class="token string">"div"</span><span class="token punctuation">,</span>        <span class="token entity" title="&#123;">&amp;#123;</span>          className<span class="token punctuation">:</span> <span class="token string">'app'</span><span class="token punctuation">,</span>          id<span class="token punctuation">:</span> <span class="token string">'appRoot'</span>        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">,</span>        React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>          <span class="token string">"h1"</span><span class="token punctuation">,</span>          <span class="token entity" title="&#123;">&amp;#123;</span> className<span class="token punctuation">:</span> <span class="token string">'title'</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">,</span>          <span class="token string">"欢迎进入React的世界"</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>          <span class="token string">"p"</span><span class="token punctuation">,</span>          <span class="token keyword">null</span><span class="token punctuation">,</span>          <span class="token string">"React.js 是一个构建页面 UI 的库"</span>        <span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre><p><code>React.createElement</code> 会构建一个 JavaScript 对象来描述你 HTML 结构的信息，包括标签名、属性、还有子元素等, 语法为</p><pre class=" language-jsx"><code class="language-jsx">React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  type<span class="token punctuation">,</span>  <span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token operator">...</span>children<span class="token punctuation">]</span><span class="token punctuation">)</span> </code></pre><p>所谓的 JSX 其实就是 JavaScript 对象，所以使用 React 和 JSX 的时候一定要经过编译的过程:</p><blockquote><p>JSX —使用react构造组件，bable进行编译—&gt; JavaScript对象 — <code>ReactDOM.render()</code>—&gt;DOM元素 —&gt;插入页面</p></blockquote><h1 id="JSX-style-样式"><a href="#JSX-style-样式" class="headerlink" title="JSX_style 样式"></a>JSX_style 样式</h1><h2 id="行内style"><a href="#行内style" class="headerlink" title="行内style"></a>行内style</h2><p>react组件jsx，行内style<strong>固定</strong>写法就是<strong>双花括号</strong>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span>Input placeholder<span class="token operator">=</span><span class="token string">"xxx"</span>  style<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>width<span class="token punctuation">:</span><span class="token string">'233px'</span><span class="token punctuation">,</span> marginRight<span class="token punctuation">:</span><span class="token string">'10px'</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>注意style中有多组属性要用逗号’,’隔开，而不是html行内样式的分号’;’ 要注意区分</p><p><strong>有两对花括号的原因：</strong></p><p>①外层花括号：因为React使用的是JSX语法，JSX语法中嵌入任何js变量、表达式、对象都要用花括号{}扩起来，</p><p>②内层花括号：JSX如果用到行内CSS style样式时，这个行内样式必须是一个js对象，即{width:’233px’, marginRight:’10px’}是一个对象所以用花括号扩起来。</p><p>使用React的行内样式设置样式过程</p><p>(1)在JSX文件中定义样式变量,和定义普通的对象变量一样</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">let</span> backAndTextColor <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>backgroundColor<span class="token punctuation">:</span><span class="token string">'blue'</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span><span class="token string">'#ff671b'</span><span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span><span class="token number">40</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span></code></pre><p>(2)JSX的调用</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">let</span> element3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;backAndTextColor&amp;#125;</span><span class="token punctuation">></span></span>行内样式测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token punctuation">)</span></code></pre><p>也可以直接写到JSX中,如下:</p><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>backgroundColor<span class="token punctuation">:</span><span class="token string">'blue'</span><span class="token punctuation">,</span>color<span class="token punctuation">:</span><span class="token string">'#ff671b'</span><span class="token punctuation">,</span>fontSize<span class="token punctuation">:</span><span class="token number">40</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">></span>行内样式测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="多个类共存的操作"><a href="#多个类共存的操作" class="headerlink" title="多个类共存的操作"></a>多个类共存的操作</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">let</span> element2 <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token string">"abc "</span><span class="token operator">+</span>classStr<span class="token entity" title="&#125;">&amp;#125;</span><span class="token operator">></span>helloworld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token keyword">let</span> classStr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abc2'</span><span class="token punctuation">,</span><span class="token string">'redBg2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">let</span> element3 <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/* 这里写注释 */</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;classStr2&amp;#125;</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;exampleStyle&amp;#125;</span><span class="token punctuation">></span></span>helloworld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery Ajax</title>
      <link href="2020/12/13/jQuery-Ajax/"/>
      <url>2020/12/13/jQuery-Ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p>AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。</p><p>简短地说，在不重载整个网页的情况下，AJAX 通过后台加载数据，并在网页上进行显示。</p><h2 id="1-jQuery中ajax的两种书写方式【一般采用第二种方式】"><a href="#1-jQuery中ajax的两种书写方式【一般采用第二种方式】" class="headerlink" title="1.jQuery中ajax的两种书写方式【一般采用第二种方式】"></a>1.jQuery中ajax的两种书写方式【一般采用第二种方式】</h2><ol><li>$.ajax(url,[setting]);</li><li>$.ajax([setting]); </li></ol><pre class=" language-js"><code class="language-js"> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        url<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//放置请求地址路径</span>        method<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//请求方式(GET、POST等请求方式,不区分大小写)</span>        data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//传递给服务器的参数数据,如果不传递数据可以不需要该键值对</span>        success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//请求成功回调函数,参数res为请求成功返回的结果信息</span>        error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//请求失败回调函数,参数error为请求失败返回的结果信息</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-setting参数说明"><a href="#2-setting参数说明" class="headerlink" title="2.setting参数说明"></a>2.setting参数说明</h2><p>setting为一个对象,用于配置 Ajax 请求的键值对集合 </p><ul><li>acync：　　     是否异步请求【默认为true】<br>beforeSend: 　 请求发送前的回调函数   返回false将取消这个请求。<br>complete：　　  请求完成后的回调函数(请求success,error之后均调用)该选项可以接受一个函数数组，每个函数将被依次调用。<br>cache：　　　　 浏览器是否缓存此页面【默认为true】<br>dataType : 　　从服务器返回你期望的数据类型<br>常用的参数值为：”json”: 返回 JSON 数据<br>statusCode :    (默认: {})</li></ul><pre class=" language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>        statusCode<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//HTTP状态码为404时,执行下面的函数</span>              <span class="token number">404</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"页面没有找到！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-load"><a href="#3-load" class="headerlink" title="3. load()"></a>3. load()</h2><p>load() 方法从服务器加载数据，并把返回的数据放入被选元素中。</p><p><strong>语法:</strong></p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>URL<span class="token punctuation">,</span>data<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>$dom<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  </code></pre><p>可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数：</p><ul><li><em>responseTxt</em> - 包含调用成功时的结果内容</li><li><em>statusTXT</em> - 包含调用的状态</li><li><em>xhr</em> - 包含 XMLHttpRequest 对象</li></ul><p>下面的例子会在 load() 方法完成后显示一个提示框。如果 load() 方法已成功，则显示”外部内容加载成功！”，而如果失败，则显示错误消息：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"demo_test.txt"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>responseTxt<span class="token punctuation">,</span>statusTxt<span class="token punctuation">,</span>xhr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>statusTxt<span class="token operator">==</span><span class="token string">"success"</span><span class="token punctuation">)</span>                  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"外部内容加载成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>statusTxt<span class="token operator">==</span><span class="token string">"error"</span><span class="token punctuation">)</span>                  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Error: "</span><span class="token operator">+</span>xhr<span class="token punctuation">.</span>status<span class="token operator">+</span><span class="token string">": "</span><span class="token operator">+</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>注意：</strong><br>a、该指定路径页面为html页面,该页面可以直接写节点信息【不需要文件头等信息】;<br>也可以在路径中指定html页面中的相应元素节点内容<br>b、注意url路径是相对于选取的dom节点元素的路径</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#result'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'./test.html #container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//向$('#result')中载入test.html中的$("#container")</span></code></pre><h2 id="4-get-和-post-方法"><a href="#4-get-和-post-方法" class="headerlink" title="4.get() 和 post() 方法"></a>4.get() 和 post() 方法</h2><p>两种在客户端和服务器端进行请求-响应的常用方法是：GET 和 POST。</p><ul><li><em>GET</em> - 从指定的资源请求数据</li><li><em>POST</em> - 向指定的资源提交要处理的数据</li></ul><p>GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。</p><p>POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据。</p><h3 id="4-1-get-方法"><a href="#4-1-get-方法" class="headerlink" title="4.1 $.get() 方法"></a>4.1 $.get() 方法</h3><p>$.get() 方法通过 HTTP GET 请求从服务器上请求数据。</p><p>语法：</p><pre class=" language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>URL<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>dataType<span class="token punctuation">]</span><span class="token punctuation">)</span>    </code></pre><p>必需的 <em>URL</em> 参数规定您希望请求的 URL。</p><p>可选的 <em>callback</em> 参数是请求成功后所执行的函数名</p><blockquote><p>第一个回调参数存有被请求页面的内容，第二个回调参数存有请求的状态。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"> $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"demo_test.php"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据: "</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"\n状态: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-2-post-方法"><a href="#4-2-post-方法" class="headerlink" title="4.2 $.post() 方法"></a>4.2 $.post() 方法</h3><p>$.post() 方法通过 HTTP POST 请求向服务器提交数据。</p><p><strong>语法:</strong></p><pre class=" language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>URL<span class="token punctuation">,</span>data<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>dataType<span class="token punctuation">]</span><span class="token punctuation">)</span>  </code></pre><p>必需的 <em>URL</em> 参数规定您希望请求的 URL。</p><p>可选的 <em>data</em> 参数规定连同请求发送的数据。</p><p>可选的 <em>callback</em> 参数是请求成功后所执行的函数名。</p><blockquote><p>第一个回调参数存有被请求页面的内容，而第二个参数存有请求的状态。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"> $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/try/ajax/demo_test_post.php"</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name<span class="token punctuation">:</span><span class="token string">"菜鸟教程"</span><span class="token punctuation">,</span>        url<span class="token punctuation">:</span><span class="token string">"http://www.runoob.com"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据: \n"</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"\n状态: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5-getJSON方式"><a href="#5-getJSON方式" class="headerlink" title="5. $getJSON方式"></a>5. $getJSON方式</h2><p>$.getJSON(url,[data],[success(){}])   期待后台请求数据为JSON类型</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">//$.post()    后台返回的数据类型是JSON格式的时候</span>    $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token string">'$.getJSON请求'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="6-获取数据"><a href="#6-获取数据" class="headerlink" title="6. 获取数据"></a>6. 获取数据</h2><h3 id="6-1XMLHttpRequest"><a href="#6-1XMLHttpRequest" class="headerlink" title="6.1XMLHttpRequest"></a>6.1XMLHttpRequest</h3><pre class=" language-js"><code class="language-js">  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'getMessage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//事件取数据</span>          <span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">'/json/cats.json'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//get方式 true:异步请求</span>          req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          req<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//事件处理程序解析返回数据</span>          <span class="token keyword">const</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解析字符串</span>          document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-2-JavaScriptfetch"><a href="#6-2-JavaScriptfetch" class="headerlink" title="6.2 JavaScriptfetch()"></a>6.2 JavaScript<code>fetch()</code></h3><pre class=" language-js"><code class="language-js">  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'getMessage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/json/cats.json'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//发出请求 返回promise</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//成功后 转换为json 返回promise</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="7-获得json数据-方法"><a href="#7-获得json数据-方法" class="headerlink" title="7. 获得json数据 方法"></a>7. 获得json数据 方法</h2><h3 id="7-1forEach方法遍历数据"><a href="#7-1forEach方法遍历数据" class="headerlink" title="7.1forEach方法遍历数据"></a>7.1forEach方法遍历数据</h3><ul><li>[ ]-&gt;方括号表示数组</li><li>{ }-&gt;括号表示对象</li><li>“ ”-&gt;双引号表示字符串。它们还用于JSON中的键名</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//将所有的数据取出来 </span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'getMessage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">'/json/cats.json'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      req<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          json<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除所有的数据</span>            <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;div class = 'cat'>"</span><span class="token punctuation">;</span>            keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;strong>"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"&lt;/strong>: "</span> <span class="token operator">+</span> val<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将数据放进去</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;/div>&lt;br>"</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据直接放到html中 message</span></code></pre><pre class=" language-js"><code class="language-js">    <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    json<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;div class = 'cat'>"</span><span class="token punctuation">;</span>        html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;img src = '"</span> <span class="token operator">+</span> val<span class="token punctuation">.</span>imageLink <span class="token operator">+</span> <span class="token string">"' "</span> <span class="token operator">+</span> <span class="token string">"alt='"</span> <span class="token operator">+</span> val<span class="token punctuation">.</span>altText <span class="token operator">+</span> <span class="token string">"'>"</span><span class="token punctuation">;</span>      html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;/div>&lt;br>"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>html<span class="token punctuation">;</span></code></pre><h3 id="7-2-预先过滤JSON以获取所需的数据-filter"><a href="#7-2-预先过滤JSON以获取所需的数据-filter" class="headerlink" title="7.2 预先过滤JSON以获取所需的数据 - filter"></a>7.2 预先过滤JSON以获取所需的数据 - filter</h3><pre class=" language-js"><code class="language-js">  json <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>id <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="8-发布数据方法"><a href="#8-发布数据方法" class="headerlink" title="8.发布数据方法"></a>8.发布数据方法</h2><h3 id="8-1XMLHttpRequest方法发布数据"><a href="#8-1XMLHttpRequest方法发布数据" class="headerlink" title="8.1XMLHttpRequest方法发布数据"></a>8.1XMLHttpRequest方法发布数据</h3><pre class=" language-js"><code class="language-js">   document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'sendMessage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 基本元素</span>      <span class="token keyword">const</span> userName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'https://jsonplaceholder.typicode.com/posts'</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这里post数据</span>    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/json; charset=UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">201</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> serverResponse <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> serverResponse<span class="token punctuation">.</span>userName <span class="token operator">+</span> serverResponse<span class="token punctuation">.</span>suffix<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> body <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> userName<span class="token punctuation">:</span> userName<span class="token punctuation">,</span> suffix<span class="token punctuation">:</span> <span class="token string">' loves cats!'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="2020/12/12/jq/"/>
      <url>2020/12/12/jq/</url>
      
        <content type="html"><![CDATA[<h1 id="1-jQuery基础"><a href="#1-jQuery基础" class="headerlink" title="1. jQuery基础"></a>1. jQuery基础</h1><p><strong>引入方法 - 国内</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.5.1.js<span class="token punctuation">"</span></span>  <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha256-QWo7LDvxbWT2tbbQ97B53yJnYU3WhH/C8ycbRAkjPDc<span class="token punctuation">=</span><span class="token punctuation">"</span></span>  <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><h2 id="1-1-jQuery函数"><a href="#1-1-jQuery函数" class="headerlink" title="1.1 jQuery函数"></a>1.1 jQuery函数</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//最基础</span><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"jQuery(document).ready(function()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    jQuery  简写成 $  */</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"$(document).ready(function()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*  最简单的写法  */</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"$(function()&amp;#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong><code>JQuery</code>的<code>ready</code>事件不等于<code>Js</code>的<code>load</code>：</strong></p><ul><li>执行时机不同：<code>load</code>需要等外部图片和视频等全部加载才执行。<code>ready</code>是<code>DOM</code>绘制完毕后执行，先与外部文件</li><li>用法不同：<code>load</code>只可写一次，<code>ready</code>可以多次</li></ul></blockquote><p><strong>window.onload与$(document).ready()对比</strong></p><table><thead><tr><th></th><th>window.onload</th><th>$(document).ready()</th></tr></thead><tbody><tr><td>执行时机</td><td>必须等网页中所有内容加载完后(图片)才执行</td><td>网页中的<code>DOM</code>结构绘制完后就执行,可能<code>DOM</code>元素相关的东西并没有加载完</td></tr><tr><td>编写个数</td><td>不能同时执行多个</td><td>能同时执行多个</td></tr><tr><td>简化写法</td><td>无</td><td><code>$(document).ready(function()&#123; //.. &#125;);</code><br>推荐写法：<code>$(function()&#123; &#125;);</code></td></tr></tbody></table><h2 id="1-2-jQuery对象"><a href="#1-2-jQuery对象" class="headerlink" title="1.2 jQuery对象"></a>1.2 jQuery对象</h2><ul><li>jQuery对象是一个类数组对象，内部存放的元素是DOM对象</li><li>jQuery对象的获取通常是使用选择器来获取  【eg: $(选择器字符串)】</li><li>jQuery对象的操作实际上就是对jQuery数组中DOM对象的批量操作<pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在jQuery对象后面添加数值下标即可选择其获取到的JQuery类数组对象中相应位置存放的DOM对象</span></code></pre></li></ul><p>var div = document.getElementsByTagName(‘div’);    //多个div返回的是一个DOM类数组对象<br>var $div = $(div);    //将DOM对象作为jQuery函数的参数即可将该DOM对象转化为jQuery对象</p><pre><code>## 1.3 jq选择器[Slector Reference](https://www.runoob.com/jquery/jquery-ref-selectors.html)### a、基本选择器| 名称       | 用法               | 描述                                 || ---------- | ------------------ | ------------------------------------ || ID选择器   | $(“#id”);          | 获取指定ID的元素                     || 类选择器   | $(“.class”);       | 获取同一类class的元素                || 标签选择器 | $(“div”);          | 获取同一类标签的所有元素             || 并集选择器 | $(“div,p,li”);     | 使用逗号分隔，只要符合条件之一就可。 || 交集选择器 | $(“div.redClass”); | 获取class为redClass的div元素         |所有选择器 *#### **$()和document是相等的吗**```html&lt;div id=&quot;a&quot; class=&quot;aa&quot;&gt;&lt;/div&gt;&lt;div id=&quot;b&quot; class=&quot;aa&quot;&gt;&lt;/div&gt;&lt;div id=&quot;c&quot; class=&quot;aa&quot;&gt;&lt;/div&gt;alert(document.getElementById(&quot;id&quot;) == $(&quot;#aa&quot;));//返回结果为falsealert(document.getElementById(&quot;id&quot;) == $(&quot;#aa&quot;).get(0));//返回true</code></pre><h3 id="b、层次选择器"><a href="#b、层次选择器" class="headerlink" title="b、层次选择器"></a>b、层次选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(“ul&gt;li”);</td><td>使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”);</td><td>使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr><tr><td>相邻选择器</td><td>$(“prev + next”)</td><td>匹配所有紧接在<code>prev</code>元素后的<code>next</code>元素。</td></tr><tr><td>兄弟选择器</td><td>$(“prev ~ siblings”)</td><td>匹配prev元素之后的所有<code>sibling</code>元素</td></tr></tbody></table><h3 id="c、兄弟选择器-状态和伪类"><a href="#c、兄弟选择器-状态和伪类" class="headerlink" title="c、兄弟选择器 - 状态和伪类"></a>c、兄弟选择器 - 状态和伪类</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:eq（index）</td><td>$(“li:eq(2)”).css(“color”, ”red”);</td><td>获取到的li元素中，选择索引号为2的元素，索引号index从0开始。</td></tr><tr><td>:odd</td><td>$(“li:odd”).css(“color”, ”red”);</td><td>获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”).css(“color”, ”red”);</td><td>获取到的li元素中，选择索引号为偶数的元素</td></tr><tr><td>:first</td><td>$(“p:first”)</td><td>选取第一个 <code>&lt;p&gt;</code> 元素</td></tr><tr><td>:first-child</td><td>$(“ul li:first-child”)</td><td>选取每个 <code>&lt;ul&gt; </code>元素的第一个 <code>&lt;li&gt;</code> 元素</td></tr><tr><td>[href]</td><td>$(“[href]”)</td><td>选取带有 href 属性的元素</td></tr><tr><td>:button</td><td>$(“:button”)</td><td>选取所有 type=”button” 的 <code>&lt;input&gt; </code>元素 和 <code>&lt;button&gt;</code> 元素</td></tr></tbody></table><h2 id="1-4-jQuery过滤器"><a href="#1-4-jQuery过滤器" class="headerlink" title="1.4  jQuery过滤器"></a>1.4  jQuery过滤器</h2><h3 id="基本过滤器"><a href="#基本过滤器" class="headerlink" title="基本过滤器"></a>基本过滤器</h3><pre class=" language-js"><code class="language-js">语法：  selector<span class="token punctuation">:</span>过滤器</code></pre><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>$(“ul”).children(“li”)</td><td>相当于$(“ul&gt;li”)，子类选择器</td></tr><tr><td>find(selector)</td><td>$(“ul”).find(“li”);</td><td>相当于$(“ul li”),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(“#first”).siblings(“li”);</td><td>查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(“#first”).parent();</td><td>查找父亲</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2);</td><td>相当于$(“li:eq(2)”),index从0开始</td></tr><tr><td>next()</td><td>$(“li”).next()</td><td>找下一个兄弟</td></tr><tr><td>prev()</td><td>$(“li”).prev()</td><td>找上一次兄弟</td></tr></tbody></table><ul><li>selector:first           获取所有已选择到的元素中的第一个元素<br>selector:last           获取所有已选择到的元素中的最后一个元素<br>selector:even         获取所有已选择到的元素中的索引为偶数元素<br>selector:odd           获取所有已选择到的元素中的索引为奇数元素<br>selector:eq(index)     获取所有已选择到的元素中的索引为index的元素<br>selector:lt(index)       获取所有已选择到的元素中索引值小于index的元素<br>selector:gt(index)      获取所有已选择到的元素中索引值大于index的元素<br>selector1:not(selector2)  获取所有已选择到的元素中不为selector2的元素<br>selector:header                获取所有已选择到的元素中的标题元素【标题h1~h6】</li></ul><h3 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h3><pre class=" language-js"><code class="language-js">语法：  selector<span class="token punctuation">:</span>过滤器            </code></pre><ul><li>selector:contains(text)    获取所有已选择到的元素中文本包含text的元素<br>selector:empty                获取所有已选择到的元素中没有子节点的元素<br>selector:parent                获取所有已选择到的元素中有子节点的元素<br>selector:has(selector2)  获取所有已选择到的元素中包含selector2的元素</li></ul><h3 id="可见性过滤器"><a href="#可见性过滤器" class="headerlink" title="可见性过滤器"></a>可见性过滤器</h3><pre class=" language-js"><code class="language-js">语法：  selector<span class="token punctuation">:</span>过滤器</code></pre><p>隐藏类型分2种：</p><h4 id="a-不占据屏幕空间"><a href="#a-不占据屏幕空间" class="headerlink" title="a.不占据屏幕空间"></a>a.不占据屏幕空间</h4><pre class=" language-css"><code class="language-css">    <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>    //显示为none    &lt;input type=<span class="token string">"hidden"</span>>    //隐藏input标签</code></pre><h4 id="b-占据屏幕空间"><a href="#b-占据屏幕空间" class="headerlink" title="b.占据屏幕空间"></a>b.占据屏幕空间</h4><pre class=" language-css"><code class="language-css">    <span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>    // 可见度为隐藏    <span class="token property">opacity</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    //透明度为<span class="token number">0</span>    使用：            <span class="token punctuation">:</span>visible    选择所有占据屏幕空间的元素        <span class="token punctuation">:</span>hidden        选择所有不占据屏幕空间的元素</code></pre><h3 id="属性过滤器"><a href="#属性过滤器" class="headerlink" title="属性过滤器"></a>属性过滤器</h3><pre class=" language-js"><code class="language-js">语法：  selector<span class="token punctuation">[</span>属性过滤器<span class="token punctuation">]</span></code></pre><ul><li>selector[attr]          获取所有已选择到的元素中具有属性attr的元素<br>selector[attr=Val]   获取所有已选择到的元素中具有属性attr，并且属性值为Val的元素<br>selector[attr^=Val]  获取所有已选择到的元素中具有属性attr，并且属性值为以Val开头的元素<br>selector[attr$=Val]  获取所有已选择到的元素中具有属性attr，并且属性值为以Val结尾的元素<br>selector[attr*=Val]  获取所有已选择到的元素中具有属性attr，并且属性值中包含Val的元素<br>selector[attr!=Val]  获取所有已选择到的元素中具有属性attr，并且属性值不为Val的元素或者没有该属性attr的元素</li></ul><h3 id="后代过滤器"><a href="#后代过滤器" class="headerlink" title="后代过滤器"></a>后代过滤器</h3><p>选择器一定要先选择到后代元素，是对选择到的后代元素的过滤</p><blockquote><p><strong>注意：</strong><br>选择所有符合selector的后代中的相应元素【批处理】<br>空格是表示所有后代      <code>&gt;</code>是表示所有子代</p></blockquote><h4 id="下面示例使用的是空格【可能存在多个层级关系】"><a href="#下面示例使用的是空格【可能存在多个层级关系】" class="headerlink" title="下面示例使用的是空格【可能存在多个层级关系】"></a>下面示例使用的是空格【可能存在多个层级关系】</h4><ul><li>selector :nth-child(n)    //获取每个selector元素中所有后代且后代中作为别人的第n个孩子的元素<br>selector :first-child   //获取每个selector元素中所有后代且后代中作为别人的第一个子元素【可能选择到一个或多个元素】</li></ul><p><em>注意与selector :first的区别，获取所有selector元素的所有后代元素中的第一个【只选择到一个元素】</em></p><ul><li>selector :last-child     //获取每个selector元素中所有后代且后代中作为别人的最后一个子元素【每个父元素的最后一个子元素】<br>selector :only-child     // 获取每个selector元素中所有后代且后代中作为别人的作为别人的父元素且只有一个子元素【每个父元素如果只有一个孩子元素，获取该元素】<br>selector :first-of-type  //获取每个selector元素中所有后代且后代中作为别人的每种类型子元素中的第一个<br>Selector :last-of-type   //获取每个selector元素中所有后代且后代中作为别人的每种类型子元素中的最后一个  </li></ul><h3 id="表单过滤器-【对选择的表单元素进行过滤】"><a href="#表单过滤器-【对选择的表单元素进行过滤】" class="headerlink" title="表单过滤器    【对选择的表单元素进行过滤】"></a>表单过滤器    【对选择的表单元素进行过滤】</h3><ul><li>:enabled   //选取所有可用元素该选择器仅可用于选择支持disabled属性(attribute)的HTML    元素【<code>&lt;button&gt;, &lt;input&gt;,&lt;optgroup&gt;,&lt;option&gt;,&lt;select&gt;,&lt;textarea&gt;</code>】<br>:disabled   //选取所有不可用的元素该选择器也是仅可用于支持disabled属性的HTML元素<br>:checked   //选取所有被选中的元素，用于复选框和单选框、下拉框<br>:selected   //选取所有被选中的选项元素，该选择器只适用于<option><br>:focus    //选择当前获取焦点的元素<br>:input    //选取所有的<code>&lt;input&gt;,&lt;textarea&gt;,&lt;select&gt;,&lt;button&gt;</code>元素。</option></li></ul><p><em>注意：**<br>    <code>$(&quot;:input&quot;)</code>是选择可以让用户输入的标签元素; 而<code>$(&quot;input&quot;)</code>是选择名字为input的所有标签</em>元素</p><ul><li>:text   //选取所有的单行文本框（<code>&lt;input type=&quot;text&quot;&gt;</code>）<br>:password  //选取所有的密码框<br>:radio  //选取所有的单选框<br>:checkbox   //选取所有的多选框<br>:submit    //选取所有的提交按钮【有提交功能的按钮】<br>:reset    //选取所有input类型为reset的表单元素<br>:image    //选取所有input类型为image的表单元素<br>:button    //选取所有input类型为button的表单元素<br>:file        //选取所有input类型为file的表单元素</li></ul><h1 id="2-jq节点操作"><a href="#2-jq节点操作" class="headerlink" title="2.jq节点操作"></a>2.jq节点操作</h1><p><a href="https://www.runoob.com/jquery/jquery-ref-traversing.html">节点操作reference</a></p><h2 id="2-1-查找结点"><a href="#2-1-查找结点" class="headerlink" title="2.1 查找结点"></a>2.1 查找结点</h2><p><code>$</code>(选择器字符串);    </p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div.one span:first'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询所有类名为one的div里面的所有后代span里面的第一个span元素</span></code></pre><h2 id="2-2-创建节点"><a href="#2-2-创建节点" class="headerlink" title="2.2 创建节点"></a>2.2 创建节点</h2><p><code>$</code>(HTML文本字符串); </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> $newNode <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个span节点，里面内容为hello</span></code></pre><h2 id="2-3-插入子节点"><a href="#2-3-插入子节点" class="headerlink" title="2.3 插入子节点"></a>2.3 插入子节点</h2><h3 id="插入节点作为最后孩子"><a href="#插入节点作为最后孩子" class="headerlink" title="插入节点作为最后孩子"></a>插入节点作为最后孩子</h3><p><code>append() </code>在自身内部插入其它节点作为最后孩子</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> $node <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将$node插入到所选取的div内容最后，作为div的最后一个孩子</span></code></pre><p><code>appendTo()</code>    将自身插入到其它节点内容中作为最后孩子</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将span节点插入到所有匹配的div中并作为div的最后孩子</span></code></pre><h3 id="插入节点作为开始孩子"><a href="#插入节点作为开始孩子" class="headerlink" title="插入节点作为开始孩子"></a>插入节点作为开始孩子</h3><p><code>prepend()</code>    在自身内部插入其它节点作为开始孩子</p><pre class=" language-js"><code class="language-js">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将span节点插入到所有匹配的div中并作为div的开始孩子</span></code></pre><p><code>prependTo()</code>    将自身插入到其它节点内容中作为开始孩子</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prependTo</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将span节点插入到所有匹配的div中并作为div的开始孩子</span></code></pre><h2 id="2-4-插入兄弟节点"><a href="#2-4-插入兄弟节点" class="headerlink" title="2.4 插入兄弟节点"></a>2.4 插入兄弟节点</h2><p>after()    将节点插入到自身后面作为自己后面的兄弟元素</p><p>insertAfter()   将自身插入到节点后面作为节点后面的兄弟元素</p><p>before()    将节点插入到自身前面作为自己前面的兄弟元素</p><p>insertBefore() 将自身插入到节点前面作为节点前面的兄弟元素</p><h2 id="2-5-删除节点"><a href="#2-5-删除节点" class="headerlink" title="2.5 删除节点"></a>2.5 删除节点</h2><p>remove([selector])  返回被删除的节点对象</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'.one'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除类名为one的div</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div.one'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除类名为one的div</span></code></pre><p>detach([selector])    返回被删除的节点对象</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div:not(".one")'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">':first'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除类名不为one的div中的第一个div</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div.one'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除类名为one的div</span></code></pre><p>empty()   无参数，移除匹配元素的所有子节点</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div:contains("one")'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//清空的div内容中包含文本one的div元素内容</span></code></pre><h2 id="2-6-复制节点"><a href="#2-6-复制节点" class="headerlink" title="2.6 复制节点"></a>2.6 复制节点</h2><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>   </code></pre><ul><li> 返回克隆的节点对象</li><li>参数：<br>false,浅复制,复制元素但不复制元素中所绑定的事件【默认为false】<br>true,深复制,复制元素且复制元素中所绑定的事件</li></ul><h2 id="2-7-替换节点"><a href="#2-7-替换节点" class="headerlink" title="2.7 替换节点"></a>2.7 替换节点</h2><p>replaceWith()    用参数节点替换自身,返回被替换的元素</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span><span class="token string">'&lt;span>hello&lt;span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用span节点替换所有div节点【每个div均用span节点替换】</span></code></pre><p>replaeAll()    自身替换参数中的节点</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;span>hello&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaeAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//使用span节点替换所有div节点【每个div均用span节点替换】</span></code></pre><h2 id="2-8-包裹节点"><a href="#2-8-包裹节点" class="headerlink" title="2.8 包裹节点"></a>2.8 包裹节点</h2><p> <code> wrap([wrappingElement])</code>  在每个匹配的元素外层包上一个html元素。</p><p><code>wrapAll([wrappingElement])</code> 将所有匹配的元素用一个元素来包裹，可以嵌套多层，但是最内层只能有一个元素; 所有匹配元素将会被当作是一个整体，在这个整体的外部用指定的HTML结构进行包裹。</p><p><code>wrapInner([wrappingElement])</code>  每个匹配元素里面内容(子元素)都会被这种结构包裹【匹配元素里面需要有内容；如果为空则最后一个空元素也会出现包裹html元素】  </p><h2 id="2-9-节点遍历"><a href="#2-9-节点遍历" class="headerlink" title="2.9 节点遍历"></a>2.9 <a href="https://www.runoob.com/jquery/jquery-ref-traversing.html">节点遍历</a></h2><p>children([selector])    获取匹配元素的子元素集合</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">".inner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取类名content的所有子元素【有参数则再过滤出类名为inner的子元素】</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".content>.inner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//与上面效果是一样的</span></code></pre><p>find(selector)　　获取所有匹配元素中符合参数的所有后代元素            </p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">".inner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取类名content的所有后代中类名为inner的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".content .inner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//与上面效果是一样的</span></code></pre><p>next([selector])        获取下一个兄弟元素</p><p>nextAll([selector])    获取后面的兄弟元素</p><p>prev([selector])        获取前一个兄弟元素</p><p>prevAll([selector])    获取前面所有的兄弟元素</p><p>siblings([selector])　获取所有兄弟元素</p><p>closest( selector)    获取最近的匹配元素,如果匹配不上继续向上查找父元素</p><p>filter(selector)    继续过滤原来匹配元素</p><p>parent([selector])    获取父元素</p><p>parents([selector])    获取祖先元素</p><h1 id="3-jq事件"><a href="#3-jq事件" class="headerlink" title="3.jq事件"></a>3.jq事件</h1><p><a href="https://www.runoob.com/jquery/jquery-ref-events.html">event reference</a> </p><h2 id="3-1-基本事件函数"><a href="#3-1-基本事件函数" class="headerlink" title="3.1.基本事件函数"></a>3.1.基本事件函数</h2><h3 id="3-1-1参数说明"><a href="#3-1-1参数说明" class="headerlink" title="3.1.1参数说明"></a>3.1.1参数说明</h3><pre class=" language-js"><code class="language-js">eventType：事件类型，字符串<span class="token string">'click'</span> <span class="token string">'submit'</span>多个事件类型可以通过用空格隔开【一次性绑定<span class="token string">'click submit'</span>】eventData：事件数据，一个对象handler：事件处理函数eventObjec：事件对象data：传递给事件处理函数handler的额外数据</code></pre><h3 id="3-1-2绑定函数之类"><a href="#3-1-2绑定函数之类" class="headerlink" title="3.1.2绑定函数之类"></a>3.1.2绑定函数之类</h3><h4 id="3-1-2-1-事件绑定"><a href="#3-1-2-1-事件绑定" class="headerlink" title="3.1.2.1 事件绑定"></a>3.1.2.1 事件绑定</h4><p>bind(eventType,[eventData ],handler(eventObject))   同时绑定多个事件类型/处理程序</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     click<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//点击按钮对p标签进行滑动显示隐藏</span>     mouseover<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//鼠标移入按钮时设置匹配div的背景颜色为红色</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-1-2-2-事件解绑"><a href="#3-1-2-2-事件解绑" class="headerlink" title="3.1.2.2 事件解绑"></a>3.1.2.2 事件解绑</h4><p>unbind([eventType],[handler(eventObject)])<br>a、无参时,.unbind() 将移除指定元素上所有绑定的处理程序<br>b、参数为某事件类型时，移除该事件类型上的所有绑定的处理程序<br>c、参数为事件类型,事件处理函数时，移除该事件类型上绑定的该处理函数【处理函数在绑定时需单独定义出来赋予函数名】</p><h4 id="3-1-2-3-绑定一个或多个事件-类似事件代理"><a href="#3-1-2-3-绑定一个或多个事件-类似事件代理" class="headerlink" title="3.1.2.3 绑定一个或多个事件;(类似事件代理)"></a>3.1.2.3 绑定一个或多个事件;(类似事件代理)</h4><p>on( events,[selector],[data],handler(eventObject))<br>a、有selector参数时,表示只能添加事件到指定元素的selector选择的后代元素上【函数内的事件对象target,currentTarget和this均为selector选中的元素】<br>b、无selector参数时,表示给指定元素绑定相应的events事件</p><h4 id="3-1-2-4-解除on上面绑定的一个或多个事件"><a href="#3-1-2-4-解除on上面绑定的一个或多个事件" class="headerlink" title="3.1.2.4 解除on上面绑定的一个或多个事件"></a>3.1.2.4 解除on上面绑定的一个或多个事件</h4><p>off( events,[selector],[handler])    </p><p>与上面的unbind()函数类似,用于解除on()方法绑定的事件</p><h4 id="3-1-2-5-模拟事件执行-即让事件自动触发执行"><a href="#3-1-2-5-模拟事件执行-即让事件自动触发执行" class="headerlink" title="3.1.2.5 模拟事件执行,即让事件自动触发执行"></a>3.1.2.5 模拟事件执行,即让事件自动触发执行</h4><p>trigger( eventType,[extraParams])   </p><p>根据绑定到匹配元素的给定的事件类型eventType执行该事件处理程序的行为。    extraParams传递给事件处理程序的额外参数,为数组类型。<br>eg:</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//模拟div点击事件自动执行并传递两个额外参数给执行函数</span></code></pre><h2 id="3-2-鼠标事件-amp-键盘事件"><a href="#3-2-鼠标事件-amp-键盘事件" class="headerlink" title="3.2.鼠标事件 &amp;键盘事件"></a>3.2.鼠标事件 &amp;键盘事件</h2><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><table><thead><tr><th align="left">触发器</th><th align="left">触发条件</th></tr></thead><tbody><tr><td align="left">click()</td><td align="left">单击</td></tr><tr><td align="left">dblclick()</td><td align="left">双击</td></tr><tr><td align="left">mouseenter()</td><td align="left">鼠标移入 - 不支持子元素</td></tr><tr><td align="left">mouseleave()</td><td align="left">鼠标移出 - 不支持子元素</td></tr><tr><td align="left">mouseout()</td><td align="left">鼠标移出 - 支持子元素</td></tr><tr><td align="left">mouseover()</td><td align="left">鼠标移入 - 支持子元素</td></tr><tr><td align="left">mousedown()</td><td align="left">鼠标摁下</td></tr><tr><td align="left">mouseup()</td><td align="left">鼠标抬起</td></tr><tr><td align="left">mousemove()</td><td align="left">鼠标移动事件</td></tr><tr><td align="left">hover()</td><td align="left">鼠标悬停 hover( inFunc, outFunc )</td></tr><tr><td align="left">submit()</td><td align="left">表单提交</td></tr><tr><td align="left">focus()</td><td align="left">当通过鼠标点击选中元素或通过 tab 键定位到元素时，发生 focus 事件。</td></tr><tr><td align="left">blur()</td><td align="left">当元素失去焦点时，发生 blur 事件。</td></tr></tbody></table><p><strong>例子</strong></p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"selector"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 动作触发后执行的代码!!</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#p1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你进入了 p1!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"拜拜! 现在你离开了 p1!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><ul><li>keypress()   按键按下事件<br>keyup()         按键抬起事件<br>keydown()    键按下的过程发生的事件  </li></ul><h2 id="3-3-表单事件"><a href="#3-3-表单事件" class="headerlink" title="3.3.表单事件"></a>3.3.表单事件</h2><ul><li>focus()        聚焦事件</li><li>blur()        失焦事件</li><li>change()    元素的值改变时激发的事件</li><li>select()      当textarea或文本类型的input元素中的文本被选择时触发的事件,绑定在单行文本框或多行文本框上</li><li>submit()    表单提交事件，绑定在form</li></ul><h2 id="4-jq效果"><a href="#4-jq效果" class="headerlink" title="4.jq效果"></a>4.jq效果</h2><p><a href="https://www.runoob.com/jquery/jquery-ref-effects.html">效果reference</a></p><h3 id="隐藏-amp-显示"><a href="#隐藏-amp-显示" class="headerlink" title="隐藏&amp;显示"></a>隐藏&amp;显示</h3><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>easing<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>easing<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//隐藏&amp;显示</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>easing<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//第二个参数是一个字符串，表示过渡使用哪种缓动函数。（译者注：jQuery自身提供"linear" 和 "swing"，其他可以使用相关的插件）。</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".hidebtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">"linear"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hide() Done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p><img src="/2020/12/12/jq/image-20201213113214390.png" alt="easing"></p><blockquote><p>对于可选的 callback 参数，有以下两点说明：<br>1.$(<em>selector</em>)选中的元素的个数为n个，则callback函数会执行n次；<br>2.callback 函数加上括号时，函数立即执行，只会调用一次， 如果不加括号，元素显示或隐藏后调用函数，才会调用多次。</p></blockquote><p><a href="https://c.runoob.com/codedemo/5659">例子</a></p><h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>easing<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>easing<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>easing<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//淡入淡出之间转换</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span>speed<span class="token punctuation">,</span>opacity<span class="token punctuation">[</span><span class="token punctuation">,</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//fadeIn fadeOut fadeToggle</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//fadeTo()  没有默认参数，必须加上 slow/fast/Time &amp;opacity</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">,</span><span class="token number">0.15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="滑动效果"><a href="#滑动效果" class="headerlink" title="滑动效果"></a>滑动效果</h3><pre><code>$(selector).slideDown([speed][,callback]);$(selector).slideUp([speed][,callback]);$(selector).slideToggle([speed][,callback]);</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//三个都这样</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#flip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><p>.animate(properties [, duration] [, easing] [, complete])</p><table><thead><tr><th><strong>參數</strong></th><th><strong>型別</strong></th><th><strong>說明</strong></th></tr></thead><tbody><tr><td>properties</td><td>Object</td><td>一组包含最后 CSS 样式</td></tr><tr><td>duration</td><td>String,Number</td><td>三种预定的速度 (slow, normal, fast)，或动画间隔的毫秒数值 (如一秒=1000)</td></tr><tr><td>easing</td><td>String</td><td>缓和方式，预设是 linear 线性，还有 swing 可選选</td></tr><tr><td>complete</td><td>Function</td><td>每个元素在完成动画后要执行的函数</td></tr></tbody></table><blockquote><p>.animate() 只支援 “可數字化” 的屬性，如 height, width, left, top, opacity 等。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//基本的</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    left<span class="token punctuation">:</span><span class="token string">'250px'</span><span class="token punctuation">,</span>    opacity<span class="token punctuation">:</span><span class="token string">'0.5'</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span><span class="token string">'150px'</span><span class="token punctuation">,</span>    width<span class="token punctuation">:</span><span class="token string">'150px'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用相对值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    left<span class="token punctuation">:</span><span class="token string">'250px'</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span><span class="token string">'+=150px'</span><span class="token punctuation">,</span>    width<span class="token punctuation">:</span><span class="token string">'+=150px'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性预定值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token string">'toggle'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队列功能</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> div<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>height<span class="token punctuation">:</span><span class="token string">'300px'</span><span class="token punctuation">,</span>opacity<span class="token punctuation">:</span><span class="token string">'0.4'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>width<span class="token punctuation">:</span><span class="token string">'300px'</span><span class="token punctuation">,</span>opacity<span class="token punctuation">:</span><span class="token string">'0.8'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>height<span class="token punctuation">:</span><span class="token string">'100px'</span><span class="token punctuation">,</span>opacity<span class="token punctuation">:</span><span class="token string">'0.4'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>width<span class="token punctuation">:</span><span class="token string">'100px'</span><span class="token punctuation">,</span>opacity<span class="token punctuation">:</span><span class="token string">'0.8'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="操作动画队列"><a href="#操作动画队列" class="headerlink" title="操作动画队列"></a>操作动画队列</h4><p>jQuery提供了以下几种方法来操作动画队列。</p><ol><li>stop([clearQuery],[gotoEnd]):停止当前jQuery对象里每个DOM元素上正在执行的动画。</li><li>queue([queueName,]callback):将callback动画数添加到当前jQuery对象里所有DOM元素的动画函数队列的尾部。</li><li> queue([queueName,]naeQueue):用newQueue动画函数队列代替当前jQuery对象里所的DOM元素的动画函数队列。</li><li> dequeue():执行动画函数队列头的第一个动画函数，并将该动画函数移出队列。</li><li> clearQueue([queueName]):清空动画函数队列中的所有动画函数。</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">60</span>px<span class="token punctuation">;</span>         <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f0f</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery-1.8.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>动画队列的长度是：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">runIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第1个动画：显示出来</span>        div<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第2个动画：自动动画，水平左移300px</span>        div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>left<span class="token punctuation">:</span><span class="token string">'+=300'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第3个动画：卷起来</span>        div<span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第4个动画：放下来</span>        div<span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token string">"fast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第5个动画：自动动画，水平右移300px</span>        div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>left<span class="token punctuation">:</span><span class="token string">'-=300'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第6个动画：隐藏出来</span>        div<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第7个动画：显示出来</span>        div<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第8个动画：卷起来，动画完成后回调runIt</span>        div<span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token string">"normal"</span><span class="token punctuation">,</span> runIt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 控制每0.1秒调用一次该方法，该方法用于显示动画队列的长度</span>    <span class="token keyword">function</span> <span class="token function">showIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> n <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>showIt<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">runIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">showIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="停止动画"><a href="#停止动画" class="headerlink" title="停止动画"></a>停止动画</h3><pre><code>$(selector).stop(stopAll,goToEnd);</code></pre><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#stop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>动画队列停止动画测试，只停止当前正在进行的动画，停止当前动画后，队列中的下一个动画开始进行：</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#flip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#stop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以在 stop() 中设置 stopAll 的参数为 true，这样就可以停止所有动画效果而不是只停止当前动画：</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#flip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#stop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="jQuery链条-chaining"><a href="#jQuery链条-chaining" class="headerlink" title="jQuery链条 - chaining"></a>jQuery链条 - chaining</h3><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#p1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5-jQuery-HTML"><a href="#5-jQuery-HTML" class="headerlink" title="5.jQuery HTML"></a>5.jQuery HTML</h2><h3 id="获得内容与属性"><a href="#获得内容与属性" class="headerlink" title="获得内容与属性"></a>获得内容与属性</h3><h4 id="text-、html-amp-val"><a href="#text-、html-amp-val" class="headerlink" title="text()、html() &amp; val()"></a>text()、html() &amp; val()</h4><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Text: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"HTML: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"值为: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="attr"><a href="#attr" class="headerlink" title="attr()"></a>attr()</h4><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#runoob"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="prop-vs-attr"><a href="#prop-vs-attr" class="headerlink" title="prop() vs attr()"></a>prop() vs attr()</h3><p><strong>prop()函数的结果:</strong></p><p>   1.如果有相应的属性，返回指定属性值。</p><p>   2.如果没有相应的属性，返回值是空字符串。</p><p><strong>attr()函数的结果:</strong></p><p>   1.如果有相应的属性，返回指定属性值。</p><p>   2.如果没有相应的属性，返回值是 undefined。</p><p>对于HTML元素本身就带有的固有属性，在处理时，使用prop方法。</p><p>对于HTML元素我们自己自定义的DOM属性，在处理时，使用 attr 方法。</p><p>具有 true 和 false 两个属性的属性，如 checked, selected 或者 disabled 使用prop()</p><p>例子</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.runoob.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>菜鸟教程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>这个例子里 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span> 元素的 DOM 属性有: href、target 和 class，这些属性就是 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span> 元素本身就带有的属性，也是 W3C 标准里就包含有这几个属性，或者说在 IDE 里能够智能提示出的属性，这些就叫做固有属性。处理这些属性时，建议使用 prop 方法。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link1<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nofollow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>这个例子里 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span> 元素的 DOM 属性有: href、id 和 action，很明显，前两个是固有属性，而后面一个 action 属性是我们自己自定义上去的，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span> 元素本身是没有这个属性的。这种就是自定义的 DOM 属性。处理这些属性时，建议使用 attr 方法。</code></pre><h3 id="设置内容与属性"><a href="#设置内容与属性" class="headerlink" title="设置内容与属性"></a>设置内容与属性</h3><h4 id="text-、html-amp-val-1"><a href="#text-、html-amp-val-1" class="headerlink" title="text()、html() &amp; val()"></a>text()、html() &amp; val()</h4><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"new contents"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"&lt;b>new contents&lt;/b>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"new contents"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="attr-1"><a href="#attr-1" class="headerlink" title="attr()"></a>attr()</h4><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#runoob"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"http://www.runoob.com/jquery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><h4 id="text-、html-amp-val-2"><a href="#text-、html-amp-val-2" class="headerlink" title="text()、html() &amp; val()"></a>text()、html() &amp; val()</h4><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>origText<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"旧文本: "</span> <span class="token operator">+</span> origText <span class="token operator">+</span> <span class="token string">" 新文本: Hello world! (index: "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>origText<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"旧 html: "</span> <span class="token operator">+</span> origText <span class="token operator">+</span> <span class="token string">" 新 html: Hello &lt;b>world!&lt;/b> (index: "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="attr-2"><a href="#attr-2" class="headerlink" title="attr()"></a>attr()</h4><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#runoob"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>origValue<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> origValue <span class="token operator">+</span> <span class="token string">"/jquery"</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><ul><li>append() - 在被选元素的结尾插入内容</li><li>prepend() - 在被选元素的开头插入内容</li><li>after() - 在被选元素之后插入内容</li><li>before() - 在被选元素之前插入内容</li></ul><p><strong>append</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>s1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="s2">s2&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>结果是这样的:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>s1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>s2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p><strong>after</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>s1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="s2">s2&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>结果是这样的:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>s1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>s2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p>增加多个元素</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">afterText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> txt1<span class="token operator">=</span><span class="token string">"&lt;b>I &lt;/b>"</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 使用 HTML 创建元素</span>    <span class="token keyword">var</span> txt2<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;i>&lt;/i>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"love "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 使用 jQuery 创建元素</span>    <span class="token keyword">var</span> txt3<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"big"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用 DOM 创建元素</span>    txt3<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"jQuery!"</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">[</span>txt1<span class="token punctuation">,</span>txt2<span class="token punctuation">,</span>txt3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 在图片后添加文本</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="append-prepend-vs-after-before"><a href="#append-prepend-vs-after-before" class="headerlink" title="append/prepend vs after/before"></a>append/prepend vs after/before</h3><ol><li>append/prepend 是在选择元素内部嵌入。</li><li>after/before 是在元素外面追加。</li></ol><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><ul><li>remove() - 删除被选元素（及其子元素）</li><li>empty() - 从被选元素中删除子元素</li></ul><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">".italic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除 class="italic" 的所有 &lt;p> 元素，不能删除带有过滤器的子元素。</span></code></pre><h3 id="操作css类"><a href="#操作css类" class="headerlink" title="操作css类"></a>操作css类</h3><ul><li>addClass(className) - 向被选元素添加一个或多个类</li><li>hasClass(className) - 确定任何一个匹配元素是否有指定的类。</li><li>removeClass([className]) - 从被选元素删除一个或多个类</li><li>toggleClass() - 对被选元素进行添加/删除类的切换操作</li><li>css() - 设置或返回样式属性</li></ul><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"*propertyname*"</span><span class="token punctuation">,</span><span class="token string">"*value*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"propertyname"</span><span class="token punctuation">:</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"propertyname"</span><span class="token punctuation">:</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="jQuery-尺寸"><a href="#jQuery-尺寸" class="headerlink" title="jQuery 尺寸"></a>jQuery 尺寸</h3><ul><li>width()</li><li>height()</li><li>innerWidth()</li><li>innerHeight()</li><li>outerWidth()</li><li>outerHeight()</li></ul><p><img src="/2020/12/12/jq/image-20201213143222879.png"></p><p>例子</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> txt<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>  txt<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"div 的宽度是: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>  txt<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"div 的高度是: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置了 box-sizing 后，width() 获取的是 css 设置的 width 减去 padding 和 border 的值。</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>test&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">box-sizing</span><span class="token punctuation">:</span>border-box<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><ul><li> width() 获取为: 60</li><li> innerWidth() 获取值为: 80</li><li> outWidth() 获取值为: 100</li></ul><h2 id="6-validation"><a href="#6-validation" class="headerlink" title="6.validation"></a>6.validation</h2><ol><li><a href="https://blog.csdn.net/lhzjj/article/details/17378435?utm_medium=distribute.pc_relevant.none-task-blog-title-6&spm=1001.2101.3001.4242">详细</a></li><li><a href="https://jqueryvalidation.org/">document</a></li><li><a href="https://xiaohuochai.site/FELib/jq/validate/validation.html">https://xiaohuochai.site/FELib/jq/validate/validation.html</a></li></ol><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ol><li><p><a href="https://docs.huihoo.com/jquery/jquery-fundamentals/zh-cn/book.html#N20CE6">https://docs.huihoo.com/jquery/jquery-fundamentals/zh-cn/book.html#N20CE6</a></p></li><li><p><a href="https://www.jianshu.com/p/f8e3936b34c9">https://www.jianshu.com/p/f8e3936b34c9</a></p></li><li><p><a href="https://blog.csdn.net/owen_william/article/details/51339850?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/owen_william/article/details/51339850?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p></li><li><p><a href="https://www.runoob.com/jquery/jquery-tutorial.html">https://www.runoob.com/jquery/jquery-tutorial.html</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js create obj</title>
      <link href="2020/12/07/js-create-obj/"/>
      <url>2020/12/07/js-create-obj/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript深入之创建对象的多种方式以及优缺点"><a href="#JavaScript深入之创建对象的多种方式以及优缺点" class="headerlink" title="JavaScript深入之创建对象的多种方式以及优缺点"></a>JavaScript深入之创建对象的多种方式以及优缺点</h1><h2 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1. 工厂模式"></a>1. 工厂模式</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'kevin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>缺点：对象无法识别，因为所有的实例都指向一个原型</p><h2 id="2-构造函数模式"><a href="#2-构造函数模式" class="headerlink" title="2. 构造函数模式"></a>2. 构造函数模式</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'kevin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优点：实例可以识别为一个特定的类型</p><p>缺点：每次创建实例时，每个方法都要被创建一次</p><h2 id="2-1-构造函数模式优化"><a href="#2-1-构造函数模式优化" class="headerlink" title="2.1 构造函数模式优化"></a>2.1 构造函数模式优化</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">=</span> getName<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'kevin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优点：解决了每个方法都要被重新创建的问题</p><p>缺点：这叫啥封装……</p><h2 id="3-原型模式"><a href="#3-原型模式" class="headerlink" title="3. 原型模式"></a>3. 原型模式</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'keivn'</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优点：方法不会重新创建</p><p>缺点：1. 所有的属性和方法都共享 2. 不能初始化参数</p><h2 id="3-1-原型模式优化"><a href="#3-1-原型模式优化" class="headerlink" title="3.1 原型模式优化"></a>3.1 原型模式优化</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">'kevin'</span><span class="token punctuation">,</span>    getName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优点：封装性好了一点</p><p>缺点：重写了原型，丢失了constructor属性</p><h2 id="3-2-原型模式优化"><a href="#3-2-原型模式优化" class="headerlink" title="3.2 原型模式优化"></a>3.2 原型模式优化</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    constructor<span class="token punctuation">:</span> Person<span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'kevin'</span><span class="token punctuation">,</span>    getName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优点：实例可以通过constructor属性找到所属构造函数</p><p>缺点：原型模式该有的缺点还是有</p><h2 id="4-组合模式-推荐"><a href="#4-组合模式-推荐" class="headerlink" title="4. 组合模式 (推荐)"></a>4. 组合模式 (推荐)</h2><p>构造函数模式与原型模式双剑合璧。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    constructor<span class="token punctuation">:</span> Person<span class="token punctuation">,</span>    getName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优点：该共享的共享，该私有的私有，使用最广泛的方式</p><p>缺点：有的人就是希望全部都写在一起，即更好的封装性</p><h2 id="4-1-动态原型模式"><a href="#4-1-动态原型模式" class="headerlink" title="4.1 动态原型模式"></a>4.1 动态原型模式</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">!=</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：使用动态原型模式时，不能用对象字面量重写原型</p><p>解释下为什么：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">!=</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            constructor<span class="token punctuation">:</span> Person<span class="token punctuation">,</span>            getName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'kevin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'daisy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错 并没有该方法</span>person1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注释掉上面的代码，这句是可以执行的。</span>person2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为了解释这个问题，假设开始执行<code>var person1 = new Person(&#39;kevin&#39;)</code>。</p><p>如果对 new 和 apply 的底层执行过程不是很熟悉，可以阅读底部相关链接中的文章。</p><p>我们回顾下 new 的实现步骤：</p><ol><li>首先新建一个对象</li><li>然后将对象的原型指向 Person.prototype</li><li>然后 Person.apply(obj)</li><li>返回这个对象</li></ol><p>注意这个时候，回顾下 apply 的实现步骤，会执行 obj.Person 方法，这个时候就会执行 if 语句里的内容，注意构造函数的 prototype 属性指向了实例的原型，使用字面量方式直接覆盖 Person.prototype，并不会更改实例的原型的值，person1 依然是指向了以前的原型，而不是 Person.prototype。而之前的原型是没有 getName 方法的，所以就报错了！</p><p>如果你就是想用字面量方式写代码，可以尝试下这种：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">!=</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            constructor<span class="token punctuation">:</span> Person<span class="token punctuation">,</span>            getName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'kevin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'daisy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// kevin</span>person2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// daisy</span></code></pre><h2 id="5-1-寄生构造函数模式"><a href="#5-1-寄生构造函数模式" class="headerlink" title="5.1 寄生构造函数模式"></a>5.1 寄生构造函数模式</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'kevin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><p>寄生构造函数模式，我个人认为应该这样读：</p><p>寄生-构造函数-模式，也就是说寄生在构造函数的一种方法。</p><p>也就是说打着构造函数的幌子挂羊头卖狗肉，你看创建的实例使用 instanceof 都无法指向构造函数！</p><p>这样方法可以在特殊情况下使用。比如我们想创建一个具有额外方法的特殊数组，但是又不想直接修改Array构造函数，我们可以这样写：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SpecialArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    values<span class="token punctuation">.</span>toPipedString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> values<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpecialArray</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> colors2 <span class="token operator">=</span> <span class="token function">SpecialArray</span><span class="token punctuation">(</span><span class="token string">'red2'</span><span class="token punctuation">,</span> <span class="token string">'blue2'</span><span class="token punctuation">,</span> <span class="token string">'green2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">toPipedString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// red|blue|green</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors2<span class="token punctuation">.</span><span class="token function">toPipedString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// red2|blue2|green2</span></code></pre><p>你会发现，其实所谓的寄生构造函数模式就是比工厂模式在创建对象的时候，多使用了一个new，实际上两者的结果是一样的。</p><p>但是作者可能是希望能像使用普通 Array 一样使用 SpecialArray，虽然把 SpecialArray 当成函数也一样能用，但是这并不是作者的本意，也变得不优雅。</p><p>在可以使用其他模式的情况下，不要使用这种模式。</p><p>但是值得一提的是，上面例子中的循环：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    values<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>可以替换成：</p><pre class=" language-js"><code class="language-js">values<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5-2-稳妥构造函数模式"><a href="#5-2-稳妥构造函数模式" class="headerlink" title="5.2 稳妥构造函数模式"></a>5.2 稳妥构造函数模式</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token string">'kevin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// kevin</span>person1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"daisy"</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// kevin</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// daisy</span></code></pre><p>所谓稳妥对象，指的是没有公共属性，而且其方法也不引用 this 的对象。</p><p>与寄生构造函数模式有两点不同：</p><ol><li>新创建的实例方法不引用 this</li><li>不使用 new 操作符调用构造函数</li></ol><p>稳妥对象最适合在一些安全的环境中。</p><p>稳妥构造函数模式也跟工厂模式一样，无法识别对象所属类型。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://segmentfault.com/a/1190000016708006">https://segmentfault.com/a/1190000016708006</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js Inheritance</title>
      <link href="2020/12/07/js-Inheritance/"/>
      <url>2020/12/07/js-Inheritance/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript六种继承方式"><a href="#JavaScript六种继承方式" class="headerlink" title="JavaScript六种继承方式"></a>JavaScript六种继承方式</h1><p><img src="/2020/12/07/js-Inheritance/1607335652503.png"></p><h2 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h2><blockquote><p>原理：将子类的原型挂载到父类上；</p><p>优点：父类方法可以继承使用</p><p>缺点：子类new出来的实例不能向父类传递参数，父类的<strong>引用属性</strong>没有隔离，会相互影响；不能多继承</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父类</span><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">=</span>Child<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里如果没有的话，原型链会有问题，因为child的构建函数会指向Parent</span></code></pre><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父类</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为父类新增加一个方法</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新增的代码</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am a person'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承 注意,继承必须要写在子类方法定义的前面</span><span class="token comment" spellcheck="true">// 所有涉及到原型链继承的继承方式都要修改子类构造函数的指向，否则子类实例的构造函数会指向Parent。</span>Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">=</span>Student<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为子类新增一个方法(在继承之后,否则会被覆盖)</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>study <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新增的代码</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am studing'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 下面是错误的写法！！！ 这样= 掐断原生链Child.prototype = &amp;#123;  getChildValue:function () &amp;#123;   return this.Childproperty  &amp;#125;&amp;#125;*/</span><span class="token comment" spellcheck="true">//stu指向Student的原型，Student的原型又指向Person的原型</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'lucy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'savannah'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// lucy --子类覆盖父类的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0 --父类的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 80 --子类自己的属性</span>stu<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// I am a person --继承自父类的方法</span>stu<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// I am studing --子类自己的方法</span>stu<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// savannah --子类覆盖父类的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0 --父类的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//5 --子类更改后属性</span></code></pre><p>原型链继承有一个缺点,就是属性如果是引用类型的话,会共享引用类型</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父类</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span><span class="token string">'reading'</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承</span>Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// music,reading,basketball</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// music,reading,basketball</span></code></pre><h2 id="2-借用构造函数-经典继承"><a href="#2-借用构造函数-经典继承" class="headerlink" title="2.借用构造函数(经典继承)"></a>2.借用构造函数(经典继承)</h2><blockquote><p>原理：在子类的构造函数里调用父类的构造函数，通过使用apply()和call()方法将父类构造函数的内容复制给了子类的构造函数。这是所有继承中唯一一个不涉及到 prototype的继承。</p><p>优点：  和原型链继承完全反过来 ; 父类的引用属性不会被共享 ; 子类构建实例时可以向父类传递参数，可以多继承（call 多个父类）</p><p>缺点：子类只是接用父类的构造函数，别的都没干，原型上的东西子类都没有</p></blockquote><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新执行一遍parent函数</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span><span class="token string">'reading'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//继承了Person，同时还传递了参数 </span>    Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"lucy"</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//"Nicholas"</span><span class="token function">alert</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//29</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// music,reading,basketball</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// music,reading</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>say <span class="token operator">===</span> stu2<span class="token punctuation">.</span>say<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false 子类没有办法共享父类的函数</span></code></pre><h2 id="3-组合继承-原型链-构造函数-最常用的模式"><a href="#3-组合继承-原型链-构造函数-最常用的模式" class="headerlink" title="3.组合继承  ( 原型链+构造函数 ) - 最常用的模式"></a>3.组合继承  ( 原型链+构造函数 ) - 最常用的模式</h2><blockquote><p>原理：原型式继承和构造函数继承的组合，兼具了二者的优点。</p><p>优点： 父类的方法可以被复用 ; 父类的引用属性不会被共享  ; 子类构建实例时可以向父类传递参数</p><p>缺点：多次调用父类构造函数；性能浪费</p></blockquote><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//父类</span><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span></code></pre><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父类</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span><span class="token string">'reading'</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 父类函数</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am a '</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 构造函数继承(继承属性) - 再一次调用父类构造函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承</span>Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 原型链继承(继承方法) - 调用了一次父类构造函数</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类函数</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实例化</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"lucy"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// music,reading,basketball</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// music,reading</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>say <span class="token operator">==</span> stu2<span class="token punctuation">.</span>say<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>stu1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//"Nicholas"</span>stu1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//23</span></code></pre><h3 id="组合继承优化1"><a href="#组合继承优化1" class="headerlink" title="组合继承优化1"></a>组合继承优化1</h3><blockquote><p>原理:这种方式通过父类原型和子类原型指向同一对象</p><p>优点：子类可以继承到父类的公有方法当做自己的公有方法，而且不会初始化两次实例方法/属性，避免的组合继承的缺点。</p><p>缺点:没办法辨别是对象是子类还是父类实例化</p></blockquote><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//父类</span><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span></code></pre><h4 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>setAge <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>setAge <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price    <span class="token keyword">this</span><span class="token punctuation">.</span>setScore <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayHello <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span></code></pre><h3 id="组合继承优化2-推荐使用-Object-create"><a href="#组合继承优化2-推荐使用-Object-create" class="headerlink" title="组合继承优化2 (推荐使用) - Object.create"></a>组合继承优化2 (推荐使用) - Object.create</h3><blockquote><p>原理：借助原型可以基于已有的对象来创建对象，var B = Object.create(A)以A对象为原型，生成了B对象。B继承了A的所有属性和方法。</p></blockquote><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//父类</span><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//核心代码</span>Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token comment" spellcheck="true">//核心代码</span></code></pre><h4 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>setAge <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price    <span class="token keyword">this</span><span class="token punctuation">.</span>setScore <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//核心代码</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token comment" spellcheck="true">//核心代码</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">,</span> s1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Student</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span></code></pre><h2 id="4-原型式继承-Object-create"><a href="#4-原型式继承-Object-create" class="headerlink" title="4.原型式继承 - Object.create"></a>4.原型式继承 - Object.create</h2><blockquote><p>核心：原型式继承的object方法本质上是对参数对象的一个浅复制。</p><p>优点：父类方法可以复用</p><p>缺点：父类的引用属性会被所有子类实例共享 ；子类构建实例时不能向父类传递参数</p></blockquote><h3 id="图解与语法"><a href="#图解与语法" class="headerlink" title="图解与语法"></a>图解与语法</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> Child <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//var Child = Object.create(Parent) 与上面的意思一样</span></code></pre><p><img src="/2020/12/07/js-Inheritance/1607343408122.png"></p><h3 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*clone 内部首先是创建了一个空的构造函数F,然后把F的prototype指向参数proto,最后返回一个F的实例对象,完成继承. 最好看图 */</span><span class="token comment" spellcheck="true">//本质上讲，就是对传入的对象执行了一次浅复制</span><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     name<span class="token punctuation">:</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span>     friends<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span><span class="token string">"Court"</span><span class="token punctuation">,</span><span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> anotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>anotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span><span class="token punctuation">;</span>anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Rob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> yetAnotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>yetAnotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Linda"</span><span class="token punctuation">;</span>yetAnotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Barbie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//"Shelby,Court,Van,Rob,Barbie"</span></code></pre><h4 id="Object-create-方法"><a href="#Object-create-方法" class="headerlink" title="Object.create()方法"></a>Object.create()方法</h4><p>基本用法和上面的object一样，除了object不能接受第二个参数以外</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> ‘Jiang’<span class="token punctuation">,</span>  friends<span class="token punctuation">:</span> <span class="token punctuation">[</span>‘Shelby’<span class="token punctuation">,</span> ‘Court’<span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> anotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [‘Shelby’, ‘Court’]</span></code></pre><h2 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5. 寄生式继承"></a>5. 寄生式继承</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//object()函数创建对象</span>    <span class="token comment" spellcheck="true">// 或者用var clone =Object.create(original) 是一样的</span>    clone<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//增强这个对象 （就是给这个对象增加一些其他方法）</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> clone<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//返回这个对象</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"Nicholas"</span><span class="token punctuation">;</span>    friends<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span><span class="token string">"Court"</span><span class="token punctuation">,</span><span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//基础对象</span><span class="token keyword">var</span> anotherPerson <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//新对象（不仅拥有了person的属性和方法，而且还拥有了自己的sayHi方法）</span>anotherPerson<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//"hi" </span></code></pre><h2 id="6-寄生组合式继承-推荐"><a href="#6-寄生组合式继承-推荐" class="headerlink" title="6. 寄生组合式继承(推荐)"></a>6. 寄生组合式继承(推荐)</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建了父类原型的浅复制</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修正原型的构造函数</span>  Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将子类的原型替换为这个原型</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父类创建</span><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span>‘red’<span class="token punctuation">,</span> ‘blue’<span class="token punctuation">,</span> ‘green’<span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> job<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 继承属性</span>  Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 核心：因为是对父类原型的复制，所以不包含父类的构造函数，也就不会调用两次父类的构造函数造成浪费</span><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继承</span><span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>‘Jiang’<span class="token punctuation">,</span> ‘student’<span class="token punctuation">)</span>instance<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="7-ES6-Class-extends"><a href="#7-ES6-Class-extends" class="headerlink" title="7. ES6 Class extends"></a>7. ES6 Class extends</h2><blockquote><p>核心： ES6继承的结果和寄生组合继承相似，本质上，ES6继承是一种语法糖。但是，寄生组合继承是先创建子类实例this对象，然后<br>再对其增强；而ES6先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改<br>this。</p></blockquote><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Parent'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通过super()调用父类构造函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"Child"</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> child_1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> child_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>child_1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child_1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Parent</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child_1<span class="token punctuation">.</span>arr<span class="token punctuation">,</span> child_2<span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4]  [1, 2, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child_1<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Child<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child_2<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Parent<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://segmentfault.com/a/1190000014476341">https://segmentfault.com/a/1190000014476341</a></li><li>《JavaScript 高级程序设计》</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js iteration method</title>
      <link href="2020/12/04/js-iteration-method/"/>
      <url>2020/12/04/js-iteration-method/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript中常见的数组遍历方法总结"><a href="#Javascript中常见的数组遍历方法总结" class="headerlink" title="Javascript中常见的数组遍历方法总结"></a>Javascript中常见的数组遍历方法总结</h1><h2 id="1、for循环的使用"><a href="#1、for循环的使用" class="headerlink" title="1、for循环的使用"></a>1、for循环的使用</h2><ul><li>优化后的for循环，是用临时变量将长度缓存起来，避免了重复获取数组长度，当遍历的数组较长时，优化效果会比较明显。</li></ul><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="2、forEach循环的使用"><a href="#2、forEach循环的使用" class="headerlink" title="2、forEach循环的使用"></a>2、forEach循环的使用</h2><ul><li><code>forEach(function(currentValue, index, arr))</code>方法是用来遍历数组，参数是一个回调函数，无返回值，对原数组无影响，不能使用break</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'['</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">'] = '</span> <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [0] = 2</span><span class="token comment" spellcheck="true">// [1] = 5</span><span class="token comment" spellcheck="true">// [2] = 9</span><span class="token keyword">var</span> out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (function()&amp;#123;&amp;#125; ,out)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>elem <span class="token operator">*</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>out <span class="token comment" spellcheck="true">// [1, 4, 9]</span></code></pre><p>正确使用for循环和forEach循环</p><ul><li>forEach循环是for循环的简化版</li><li>1.在数据长度固定且不需要计算的情况下，for循环的计算效率高于<br>forEach</li><li>2.在数据比较复杂，且数组长度不固定的情况下，用forEach则更为好</li><li>3.forEach是函数，那么就存在函数作用域，而for循环则不存在函数作用域问题，因此在某些情况下则要自己权衡利弊了</li></ul><h2 id="3、map的使用（常用）"><a href="#3、map的使用（常用）" class="headerlink" title="3、map的使用（常用）"></a>3、map的使用（常用）</h2><ul><li><code>map(function(currentValue, index, arr))</code>方法是用来遍历数组，参数是一个回调函数，<code>有返回值，返回值是一个利用回调函数处理之后的新数组</code>，对原数组无影响，</li></ul><h3 id="单参数"><a href="#单参数" class="headerlink" title="单参数"></a>单参数</h3><pre class=" language-javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的参数为map里面方程的参数</span>            <span class="token comment" spellcheck="true">//处理数据</span>            <span class="token keyword">return</span> <span class="token string">'处理之后的数据'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">let</span> doubles <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// doubles is now   [2, 8, 18]</span><span class="token comment" spellcheck="true">// numbers is still [1, 4, 9]</span></code></pre><h3 id="两个参数使用"><a href="#两个参数使用" class="headerlink" title="两个参数使用"></a>两个参数使用</h3><p>map方法还可以接受第二个参数，用来绑定回调函数内部的this变量(与forEach相视)。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ['b', 'c']</span></code></pre><h2 id="4、filter的使用（常用）"><a href="#4、filter的使用（常用）" class="headerlink" title="4、filter的使用（常用）"></a>4、filter的使用（常用）</h2><h3 id="单参数-1"><a href="#单参数-1" class="headerlink" title="单参数"></a>单参数</h3><ul><li>循环数组，有返回值，返回一个新的过滤之后的数组</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//多parameter</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, 3, 5]</span><span class="token comment" spellcheck="true">//单parameter</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>elem <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [4, 5]</span></code></pre><h3 id="两个参数使用-1"><a href="#两个参数使用-1" class="headerlink" title="两个参数使用"></a>两个参数使用</h3><p><code>filter</code>方法还可以接受第二个参数，用来绑定参数函数内部的<code>this</code>变量。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> MAX<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> myFilter <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>MAX<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>myFilter<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [8, 4, 9]</span></code></pre><h2 id="5、some-循环的使用（常用）"><a href="#5、some-循环的使用（常用）" class="headerlink" title="5、some()循环的使用（常用）"></a>5、some()循环的使用（常用）</h2><ul><li>循环数组，检测到<code>是否有某个值满足条件</code>，有返回值true，否则返回false</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> elem <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span></code></pre><h2 id="6、every-循环的使用"><a href="#6、every-循环的使用" class="headerlink" title="6、every() 循环的使用"></a>6、every() 循环的使用</h2><ul><li>循环数组，<code>检测所有值是否都大于某个值</code>。如果是就返回true,否则false</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> elem <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span></code></pre><ul><li>some和every的区别</li><li>some循环，检测数据中是否有某个值满足这个条件，如果有，则返回true，如果都不满足否则返回false</li><li>every循环，检测数组中是否每个值都满足这个条件，如果都满足，才返回true，否则任何一个不满足，就会返回false</li></ul><h2 id="7、find-循环的使用"><a href="#7、find-循环的使用" class="headerlink" title="7、find() 循环的使用"></a>7、find() 循环的使用</h2><h3 id="单参数-2"><a href="#单参数-2" class="headerlink" title="单参数"></a>单参数</h3><ul><li>find()方法返回数组中符合测试函数条件的第一个元素。否则返回undefined</li></ul><p><strong>基本数组</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 10</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// undefined</span></code></pre><p><strong>对象</strong></p><pre class=" language-javascript"><code class="language-javascript">         <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>                gender<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">20</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                name<span class="token punctuation">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span>                gender<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">20</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">]</span>        <span class="token keyword">let</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> item<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">"张三"</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &amp;#123;name: "张三", gender: "男", age: 20&amp;#125;</span></code></pre><h3 id="多参数"><a href="#多参数" class="headerlink" title="多参数"></a>多参数</h3><p>可以接受第二个参数，用来绑定回调函数的<code>this</code>对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 26</span></code></pre><h2 id="8、findIndex-的使用"><a href="#8、findIndex-的使用" class="headerlink" title="8、findIndex() 的使用"></a>8、findIndex() 的使用</h2><ul><li>对于数组中的每一个元素，findIndex 方法都会执行一次回调函数（利用升序索引），直到操作某个元素并且回调函数的返回值为true时。findIndex 方法将立即返回该回调函数返回 true 的元素的索引值。如果数组中没有任何元素返回 true，则 findIndex 返回 -1。</li></ul><p>findIndex 不会改变数组对象。</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> item <span class="token operator">==</span> <span class="token number">9</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印结果为3 也即是9的索引值 </span></code></pre><h2 id="9、for-of的使用"><a href="#9、for-of的使用" class="headerlink" title="9、for of的使用"></a>9、for of的使用</h2><ul><li>for of 可以正确使用break、continue和return语句</li></ul><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//默认遍历元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> value <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 还可以借助es6新增方法使用 entries()，keys()和values()</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 0</span>        <span class="token comment" spellcheck="true">// 1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> elem <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 'a'</span>        <span class="token comment" spellcheck="true">// 'b'</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 0 "a"</span>        <span class="token comment" spellcheck="true">// 1 "b" </span></code></pre><h2 id="10、reduce方法和reduceRight方法"><a href="#10、reduce方法和reduceRight方法" class="headerlink" title="10、reduce方法和reduceRight方法"></a>10、reduce方法和reduceRight方法</h2><p>但是作为累加器，不是单个能自定义处理</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//单个数组</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> pre<span class="token operator">+</span>next<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//14</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> total<span class="token operator">*</span>num<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 24</span><span class="token comment" spellcheck="true">//多个数组</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> total<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h1 id="对象的遍历方法"><a href="#对象的遍历方法" class="headerlink" title="对象的遍历方法"></a>对象的遍历方法</h1><table><thead><tr><th align="left">方式</th><th align="left">查找原型链属性</th><th align="left">查找自定义属性</th><th align="left">查找不可枚举属性</th></tr></thead><tbody><tr><td align="left"><code>for-in</code></td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td></tr><tr><td align="left"><code>Object.keys(..)</code></td><td align="left">❌</td><td align="left">✅</td><td align="left">❌</td></tr><tr><td align="left"><code>Object.getOwnpropertyNames(..)</code></td><td align="left">❌</td><td align="left">✅</td><td align="left">✅</td></tr></tbody></table><h2 id="for…in-方法"><a href="#for…in-方法" class="headerlink" title="for…in 方法"></a>for…in 方法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">'小郭'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遍历对象  </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">":"</span><span class="token punctuation">,</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//name :'小郭'</span><span class="token comment" spellcheck="true">//age : 20</span></code></pre><h2 id="Object-keys-obj"><a href="#Object-keys-obj" class="headerlink" title="Object.keys(obj)"></a>Object.keys(obj)</h2><p>遍历返回一个数组,包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性).</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span><span class="token string">"hello"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a 1</span><span class="token comment" spellcheck="true">//b true</span><span class="token comment" spellcheck="true">//c hello</span></code></pre><h2 id="Object-getOwnPropertyNames-obj"><a href="#Object-getOwnPropertyNames-obj" class="headerlink" title="Object.getOwnPropertyNames(obj)"></a>Object.getOwnPropertyNames(obj)</h2><p>遍历返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属性).</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span><span class="token string">"hello"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> key <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a 1</span><span class="token comment" spellcheck="true">//b true</span><span class="token comment" spellcheck="true">//c hello</span></code></pre><h2 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys()"></a>Reflect.ownKeys()</h2><p>遍历返回一个数组,包含对象自身的所有属性,不管属性名是Symbol或字符串,也不管是否可枚举.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span><span class="token string">"hello"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> key <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a 1</span><span class="token comment" spellcheck="true">//b true</span><span class="token comment" spellcheck="true">//c hello</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js question&amp;solution</title>
      <link href="2020/12/01/js-question-solution/"/>
      <url>2020/12/01/js-question-solution/</url>
      
        <content type="html"><![CDATA[<h2 id="1-this-与-event-target的区别"><a href="#1-this-与-event-target的区别" class="headerlink" title="1.this 与 event.target的区别"></a>1.this 与 event.target的区别</h2><p>使用listener的时候， this可以跟踪对应的listener持有者。 event.target是当前的时间互动触发点</p><h2 id="2-作用域"><a href="#2-作用域" class="headerlink" title="2.作用域"></a>2.作用域</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">loo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    vargoo<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">moo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">moo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>goo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">loo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//UncaughtReferrenceError:goo is not defined</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css question&amp;solution</title>
      <link href="2020/12/01/css-question-solution/"/>
      <url>2020/12/01/css-question-solution/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么height-100-不生效"><a href="#为什么height-100-不生效" class="headerlink" title="为什么height:100%不生效"></a>为什么height:100%不生效</h2><p>对于<code>height</code>属性，如果父元素<code>height</code>为<code>auto</code>，只要子元素在文档流中（即<code>position</code>不等于<code>fixed</code>或者<code>absolute</code>），其百分比值完全就被忽略了。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token number">.</span>box &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> // 这是多余的      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> // 这是无效的      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p>1.设定显式的高度值。</p><pre class=" language-CSS"><code class="language-CSS">html, body &#123; height: 100%;&#125;</code></pre><p>2，使用绝对定位</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    body &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    <span class="token number">.</span>box &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="ul高度显示为0（内容撑不开）"><a href="#ul高度显示为0（内容撑不开）" class="headerlink" title="ul高度显示为0（内容撑不开）"></a>ul高度显示为0（内容撑不开）</h2><p><img src="/2020/12/01/css-question-solution/1606914092190.png"></p><h3 id="推荐方法一"><a href="#推荐方法一" class="headerlink" title="推荐方法一"></a>推荐方法一</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fuqin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clearfloat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token number">.</span>clearfloat&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="推荐方法二"><a href="#推荐方法二" class="headerlink" title="推荐方法二"></a>推荐方法二</h3><p>利用伪元素:after,给ul清除浮动</p><pre class=" language-css"><code class="language-css">#box><span class="token property">ul</span><span class="token punctuation">:</span>after&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>在:after为元素里面用到了content属性，这样这条样式的意思是在ul元素后面生成指定的内容，这里生成的内容是一个空字符串，因为只是让它来消除ul标签的高度折叠，并不让它显示出来。还有，这条样式里有display属性，要将他设置成block，这样clear属性才会起作用，因为清除操作只作用于块级元素，它的原理是为要执行清除操作的元素添加上边距，以此让元素降到浮动元素的下面，而操作行内元素的上边距不起作用。</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p> 利用overflow属性<br>可以包含元素设置overflow属性，并设置属性值为auto或者hidden。</p><pre class=" language-css"><code class="language-css">ul &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*添加overflow属性，可以设置为auto或者hidden*/</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="元素对齐"><a href="#元素对齐" class="headerlink" title="元素对齐"></a>元素对齐</h2><p><img src="/2020/12/01/css-question-solution/1606991751651.png"></p><ul><li><p>vertical-align ： 设置元素的垂直对齐方式。</p></li><li><p>vertical-align注意点:</p></li><li><ul><li>text-align是设置给需要对齐元素的父元素</li><li>vertical -align是设置给需要对齐的那个元素本身</li><li>vertical -align只对行内元素和单元格元素垂直居中生效</li></ul></li><li><p>默认情况下图片和一行文字的基线对齐</p></li><li><p>基线就是一行文字中最短那个文字的底部</p></li></ul><p>有宽度的块级元素居中对齐，是margin: 0 auto;</p><p>让文字居中对齐，是 text-align: center;</p><p>设置元素内容的垂直方式(只对行内元素,单元格元素生效,块级元素不生效).</p><p>特别是行内块元素， <strong>通常用来控制图片/表单与文字的对齐;</strong></p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="相邻兄弟选择器-（有识别器紧跟的一个）"><a href="#相邻兄弟选择器-（有识别器紧跟的一个）" class="headerlink" title="相邻兄弟选择器 （有识别器紧跟的一个）"></a>相邻兄弟选择器 （有识别器紧跟的一个）</h3><p> 给指定选择器后面紧跟的那个选择器选中的标签设置属性.</p><pre class=" language-css"><code class="language-css">check<span class="token number">1</span>+check<span class="token number">2</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> //目的是设置check<span class="token number">1</span>后面紧跟屁股的check<span class="token number">2</span>     <span class="token property">attr</span><span class="token punctuation">:</span> value<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><ul><li>相邻兄弟选择器必须通过+连接;</li><li>相邻兄弟选择器只能选中紧跟其后的那个标签, 不能选中被隔开的标签.</li></ul><h3 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器"></a>通用兄弟选择器</h3><p> 给指定选择器后面的所有选择器选中的所有标签设置属性.</p><pre class=" language-css"><code class="language-css">选择器<span class="token number">1</span>~选择器<span class="token number">2</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> //设置选择器<span class="token number">1</span>后面的全部选择器<span class="token number">2</span>    属性<span class="token punctuation">:</span>值<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><ul><li>通用兄弟选择器必须用~连接;</li><li>通用兄弟选择器选中的是指定选择器后面某个选择器选中的所有标签, 无论有没有被隔开都可以选中;</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    h<span class="token number">1</span>~p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> chocolate<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我是标题1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我是标题1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><h3 id="序选择器"><a href="#序选择器" class="headerlink" title="序选择器"></a>序选择器</h3><ul><li><p><strong>同级别的第几个</strong></p></li><li><ul><li> 注意点：不区分类型;</li></ul></li></ul><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span>first-child 选中同级别中的第一个标签<span class="token punctuation">:</span>last-child 选中同级别中的最后一个标签<span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 选中同级别中的第n个标签<span class="token punctuation">:</span><span class="token function">nth-last-child</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 选中同级别中的倒数第n个标签<span class="token punctuation">:</span>only-child 选中父元素中唯一的标签</code></pre><ul><li><strong>同类型的第几个</strong></li></ul><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span>first-of-type 选中同级别中同类型的第一个标签<span class="token punctuation">:</span>last-of-type  选中同级别中同类型的最后一个标签<span class="token punctuation">:</span><span class="token function">nth-of-type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 选中同级别中同类型的第n个标签<span class="token punctuation">:</span><span class="token function">nth-last-of-type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  选中同级别中同类型的倒数第n个标签<span class="token punctuation">:</span>only-of-type 选中父元素中唯一类型的某个标签</code></pre><ul><li><h2 id="同级别同类型的奇偶个"><a href="#同级别同类型的奇偶个" class="headerlink" title="同级别同类型的奇偶个"></a><strong>同级别同类型的奇偶个</strong></h2></li></ul><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span> 同级别奇数<span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span>同级别偶数<span class="token punctuation">:</span><span class="token function">nth-of-type</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span>同类型奇数<span class="token punctuation">:</span><span class="token function">nth-of-type</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span>同类型偶数</code></pre><h2 id="a标签的伪类选择器"><a href="#a标签的伪类选择器" class="headerlink" title="a标签的伪类选择器"></a>a标签的伪类选择器</h2><p> a标签的伪类选择器是专门用来修改a标签不同状态的样式的.</p><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span>link 修改从未被访问过状态下的样式<span class="token punctuation">:</span>visited 修改被访问过的状态下的样式<span class="token punctuation">:</span>hover 修改鼠标悬停在a标签上状态下的样式<span class="token punctuation">:</span>active 修改鼠标长按状态下的样式</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js animation 动画</title>
      <link href="2020/11/30/js-animation/"/>
      <url>2020/11/30/js-animation/</url>
      
        <content type="html"><![CDATA[<h1 id="js实现动画"><a href="#js实现动画" class="headerlink" title="js实现动画"></a>js实现动画</h1><h2 id="运动的三要素"><a href="#运动的三要素" class="headerlink" title="运动的三要素"></a>运动的三要素</h2><ol><li>起始点</li></ol><blockquote><p>一个运动的起始点其实就是当前元素的位置，我们通过API获取当前元素的位置，让这个位置作为运动的起始。</p></blockquote><ol><li>目标</li><li>速度</li></ol><h2 id="基本的元素移动-left"><a href="#基本的元素移动-left" class="headerlink" title="基本的元素移动 - left"></a>基本的元素移动 - left</h2><pre class=" language-html"><code class="language-html">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">          <span class="token keyword">var</span> imgObj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            imgObj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myImage'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            imgObj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position<span class="token operator">=</span> <span class="token string">'relative'</span><span class="token punctuation">;</span>            imgObj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">'0px'</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">function</span> <span class="token function">moveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            imgObj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>imgObj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         window<span class="token punctuation">.</span>onload <span class="token operator">=</span>init<span class="token punctuation">;</span>       </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myImage<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/html.gif<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Click button below to move the image to right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Click Me<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>moveRight();<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="css-transition-过渡动画"><a href="#css-transition-过渡动画" class="headerlink" title="css transition 过渡动画"></a>css transition 过渡动画</h2><p>当元素 <strong>从一种样式变换为另一种样式</strong> 时为元素添加效果</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class=" language-css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> propertyName duration+s timing-function dealy</code></pre><h3 id="transition的各项子属性详细值"><a href="#transition的各项子属性详细值" class="headerlink" title="transition的各项子属性详细值"></a>transition的各项子属性详细值</h3><table><thead><tr><th>name</th><th>value</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>transition-property</td><td>需要应用过渡效果的CSS 属性的名字/all</td><td>是</td><td>填写一个属性名则监听一个，填 <strong>all</strong> 则监听该元素的所有样式变化，当指定的 CSS 属性改变时，过渡效果将开始执行。</td></tr><tr><td>transition-duration</td><td>过渡时间</td><td>是</td><td>不填写默认为0，不会发生动画渐变效果</td></tr><tr><td>transition-timing-function</td><td>过渡效果的时间曲线</td><td>否</td><td>贝塞尔曲线，默认ease</td></tr><tr><td>transition-delay</td><td>是否延迟执行过渡</td><td>否</td><td>不填写时默认为0</td></tr></tbody></table><h1 id="css动画总结"><a href="#css动画总结" class="headerlink" title="css动画总结"></a><a href="https://www.yuque.com/xiexiaoxie-wxtcg/talizw/bfoodp#jCyrj">css动画总结</a></h1><h2 id="时间块-timer"><a href="#时间块-timer" class="headerlink" title="时间块- timer"></a>时间块- timer</h2><p><code>setTimeout(&quot;function&quot;, interval)</code>，让指定的函数经过某段时间（interval）之后才开始执行，单位为毫秒。 <code>variable = setTimeout(&quot;function&quot;, interval);</code> </p><p>取消等待执行的某个函数：<code>clearTimeout(variable)</code> 设置5秒后，移动，期间随时可以使用<code>clearTimeout(movement)</code>来取消移动。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>where<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>whoa!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">       <span class="token keyword">function</span> <span class="token function">positionMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"absolute"</span><span class="token punctuation">;</span>        elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">"50px"</span><span class="token punctuation">;</span>        elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">"100px"</span><span class="token punctuation">;</span>        <span class="token function">moveElement</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"message2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"absolute"</span><span class="token punctuation">;</span>        elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">"50px"</span><span class="token punctuation">;</span>        elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">"50px"</span><span class="token punctuation">;</span>        <span class="token function">moveElement</span><span class="token punctuation">(</span><span class="token string">"message2"</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//movement = setTimeout("moveMessage()", 5000);</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">moveElement</span><span class="token punctuation">(</span>elementID<span class="token punctuation">,</span>final_x<span class="token punctuation">,</span>final_y<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>elementID<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> xpos <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> ypos <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>xpos <span class="token operator">==</span> final_x <span class="token operator">&amp;&amp;</span> ypos <span class="token operator">==</span> final_y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>xpos <span class="token operator">&lt;</span> final_x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           xpos<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>xpos <span class="token operator">></span> final_x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        xpos<span class="token operator">--</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>ypos <span class="token operator">&lt;</span> final_y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           ypos<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>ypos <span class="token operator">></span> final_y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ypos<span class="token operator">--</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> xpos <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>    elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> ypos <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> repeat <span class="token operator">=</span> <span class="token string">"moveElement('"</span><span class="token operator">+</span>elementID<span class="token operator">+</span><span class="token string">"',"</span><span class="token operator">+</span>final_x<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>final_y<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>interval<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span>    movement <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>repeat<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// function moveMessage()&amp;#123;</span>    <span class="token comment" spellcheck="true">//     var elem = document.getElementById("message");</span>    <span class="token comment" spellcheck="true">//     elem.style.left = "200px";</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token function">positionMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// moveMessage();</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="css属性-动画注意点"><a href="#css属性-动画注意点" class="headerlink" title="css属性 动画注意点"></a>css属性 动画注意点</h2><p><code>overflow</code>属性处理元素尺寸超过容器的情况。 <code>overflow</code>可取属性有四种：visible，hidden，scroll，auto</p><ul><li>visible：不裁减溢出内容</li><li>hidden：隐藏溢出内容</li><li>scroll：隐藏溢出内容，但有一个滚动条</li><li>auto：发生溢出时才有滚动条，无溢出不滚动</li></ul><h2 id="js动画例子"><a href="#js动画例子" class="headerlink" title="js动画例子"></a>js动画例子</h2><h3 id="跟着鼠标走的动画"><a href="#跟着鼠标走的动画" class="headerlink" title="跟着鼠标走的动画"></a>跟着鼠标走的动画</h3><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        #img&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        body&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>         &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这里插入图片地址<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> img<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//解决兼容问题</span>    event <span class="token operator">=</span> event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取鼠标的坐标</span>    <span class="token comment" spellcheck="true">//client可见窗口坐标</span>    <span class="token comment" spellcheck="true">// var X=event.clientX;</span>    <span class="token comment" spellcheck="true">// var Y=event.clientY;</span>    <span class="token comment" spellcheck="true">//div的偏移量是相对于整个页面的</span>    <span class="token comment" spellcheck="true">// var X=event.pageX;//IE8不适用</span>    <span class="token comment" spellcheck="true">// var Y=event.pageY;</span>    <span class="token keyword">var</span> X<span class="token operator">=</span>event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>    <span class="token keyword">var</span> Y<span class="token operator">=</span>event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置图片坐标</span>    img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token operator">=</span>X<span class="token operator">+</span>sl<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">=</span>Y<span class="token operator">+</span>st<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="匀速移动代码"><a href="#匀速移动代码" class="headerlink" title="匀速移动代码"></a>匀速移动代码</h3><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    * &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>移动到400px<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>移动到800px<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>common.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//点击按钮移动div</span>    <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">animate</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"dv"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">animate</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"dv"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//匀速动画</span>    <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//清理定时器</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>      element<span class="token punctuation">.</span>timeId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取元素的当前位置</span>        <span class="token keyword">var</span> current <span class="token operator">=</span> element<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//移动的步数</span>        <span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        step <span class="token operator">=</span> target <span class="token operator">></span> current <span class="token operator">?</span> step <span class="token punctuation">:</span> <span class="token operator">-</span>step<span class="token punctuation">;</span>        current <span class="token operator">+</span><span class="token operator">=</span> step<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>current <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>          element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> target <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">my$</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="变速移动代码"><a href="#变速移动代码" class="headerlink" title="变速移动代码"></a>变速移动代码</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//点击按钮移动div</span>    <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">animate</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"dv"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">animate</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"dv"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//变速动画</span>    <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//清理定时器</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>      element<span class="token punctuation">.</span>timeId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取元素的当前位置</span>        <span class="token keyword">var</span> current <span class="token operator">=</span> element<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//移动的步数</span>        <span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token operator">-</span>current<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        step <span class="token operator">=</span> step<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">+</span><span class="token operator">=</span> step<span class="token punctuation">;</span>        element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//清理定时器</span>          <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">my$</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="keyframes制作动画"><a href="#keyframes制作动画" class="headerlink" title="@keyframes制作动画"></a>@keyframes制作动画</h2><p>以百分比来规定改变发生的时间，或者通过关键词 “from” 和 “to”，等价于 0% 和 100%。</p><p>0% 是动画的开始时间，100% 动画的结束时间。</p><p>为了获得最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。</p><p><strong>不同浏览器需要查一下</strong></p><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> animationname &amp;#123<span class="token punctuation">;</span></span>keyframes-selector &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>css-styles<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="向下移动"><a href="#向下移动" class="headerlink" title="向下移动"></a>向下移动</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"> @keyframes mymove&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>from &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>to &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>element&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span> mymove<span class="token punctuation">;</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">0.4</span>s&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="在一个动画中改变多个-CSS-样式"><a href="#在一个动画中改变多个-CSS-样式" class="headerlink" title="在一个动画中改变多个 CSS 样式"></a>在一个动画中改变多个 CSS 样式</h3><pre class=" language-css"><code class="language-css">@keyframes mymove&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token number">0%</span>   &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">100%</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="带有多个-CSS-样式的多个-keyframe-选择器"><a href="#带有多个-CSS-样式的多个-keyframe-选择器" class="headerlink" title="带有多个 CSS 样式的多个 keyframe 选择器"></a>带有多个 CSS 样式的多个 keyframe 选择器</h3><pre class=" language-css"><code class="language-css">@keyframes mymove&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token number">0%</span>   &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">25%</span>  &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">50%</span>  &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">75%</span>  &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">100%</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ol><li><a href="https://www.yuque.com/xiexiaoxie-wxtcg/talizw/bfoodp#jCyrj">https://www.yuque.com/xiexiaoxie-wxtcg/talizw/bfoodp#jCyrj</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js validation</title>
      <link href="2020/11/29/js-validation/"/>
      <url>2020/11/29/js-validation/</url>
      
        <content type="html"><![CDATA[<h1 id="js判断是否为整数类型"><a href="#js判断是否为整数类型" class="headerlink" title="js判断是否为整数类型"></a>js判断是否为整数类型</h1><h3 id="方式一、使用取余运算符判断"><a href="#方式一、使用取余运算符判断" class="headerlink" title="方式一、使用取余运算符判断"></a>方式一、使用取余运算符判断</h3><p>任何整数都会被1整除，即余数是0。利用这个规则来判断是否是整数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> obj<span class="token operator">%</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false　</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true1234567891011</span></code></pre><p>对于空字符串、字符串类型数字、布尔true、空数组都返回了true。对这些类型的内部转换细节感兴趣的请参考：JavaScript中奇葩的假值<br>因此，需要先判断下对象是否是数字，比如加一个typeof</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">&amp;&amp;</span> obj<span class="token operator">%</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false12345678</span></code></pre><h3 id="方式二、使用Math-round、Math-ceil、Math-floor判断"><a href="#方式二、使用Math-round、Math-ceil、Math-floor判断" class="headerlink" title="方式二、使用Math.round、Math.ceil、Math.floor判断"></a>方式二、使用Math.round、Math.ceil、Math.floor判断</h3><p>整数取整后还是等于自己。利用这个特性来判断是否是整数，Math.floor示例，如下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> obj<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false1234567891011</span></code></pre><h3 id="方式三、通过parseInt判断"><a href="#方式三、通过parseInt判断" class="headerlink" title="方式三、通过parseInt判断"></a>方式三、通过parseInt判断</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">===</span> obj<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false、</span><span class="token comment" spellcheck="true">//很不错，但也有一个缺点</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1000000000000000000000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false12345678910111213</span></code></pre><p>原因是parseInt在解析整数之前强迫将第一个参数解析成字符串。这种方法将数字转换成整型不是一个好的选择。</p><h3 id="方式四、通过位运算判断"><a href="#方式四、通过位运算判断" class="headerlink" title="方式四、通过位运算判断"></a>方式四、通过位运算判断</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>obj <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> obj<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">//这个函数很不错，效率还很高。但有个缺陷，上文提到过，位运算只能处理32位以内的数字，对于超过32位的无能为力</span><span class="token function">isInteger</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 32位以上的数字返回false了12345678910111213</span></code></pre><h3 id="方式五、ES6提供了Number-isInteger"><a href="#方式五、ES6提供了Number-isInteger" class="headerlink" title="方式五、ES6提供了Number.isInteger"></a>方式五、ES6提供了Number.isInteger</h3><pre class=" language-js"><code class="language-js">Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3.1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h1 id="数字判断"><a href="#数字判断" class="headerlink" title="数字判断"></a>数字判断</h1><h2 id="验证数字type"><a href="#验证数字type" class="headerlink" title="验证数字type"></a>验证数字type</h2><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> checkNum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> num <span class="token operator">!==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> undefined<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> num<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="奇数偶数"><a href="#奇数偶数" class="headerlink" title="奇数偶数"></a>奇数偶数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">printOdd</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">printEven</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Prime-number"><a href="#Prime-number" class="headerlink" title="Prime number"></a>Prime number</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> number <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// return true if it is divisible by any number that is not itself.</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// if it passes the for loops conditions it is a prime</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js BOM</title>
      <link href="2020/11/27/js-BOM/"/>
      <url>2020/11/27/js-BOM/</url>
      
        <content type="html"><![CDATA[<h2 id="1-BOM-对象"><a href="#1-BOM-对象" class="headerlink" title="1. BOM 对象"></a>1. BOM 对象</h2><h4 id="1-1-BOM-结构体系"><a href="#1-1-BOM-结构体系" class="headerlink" title="1.1 BOM 结构体系"></a>1.1 BOM 结构体系</h4><p><img src="/2020/11/27/js-BOM/1606472485720.png"></p><h4 id="1-2-BOM-的作用"><a href="#1-2-BOM-的作用" class="headerlink" title="1.2 BOM 的作用"></a>1.2 BOM 的作用</h4><ul><li>BOM可实现功能<ul><li><code>弹出新的浏览器窗口</code></li><li><code>移动、关闭浏览器窗口以及调整窗口的大小</code></li><li><code>页面的前进、后退、刷新和重新加载</code></li><li><code>获取操作系统和浏览器的信息</code></li></ul></li></ul><h2 id="2-Window-对象"><a href="#2-Window-对象" class="headerlink" title="2. Window 对象"></a>2. Window 对象</h2><h4 id="2-1-常用属性"><a href="#2-1-常用属性" class="headerlink" title="2.1 常用属性"></a>2.1 常用属性</h4><ul><li><strong>常用属性</strong></li></ul><table><thead><tr><th>属性名称</th><th>说明</th></tr></thead><tbody><tr><td>history</td><td>有关用户访问过的URL的信息</td></tr><tr><td>location</td><td>有关当前 URL 的信息</td></tr><tr><td>document</td><td>有关页面文档的信息</td></tr><tr><td>navigator</td><td>有关浏览器的信息</td></tr><tr><td>screen</td><td>有关显示器屏幕的信息</td></tr><tr><td>innerHeight</td><td>浏览器窗口的高度和宽度</td></tr></tbody></table><p>浏览器高度和宽度</p><ul><li>window.innerWidth</li><li>window.innerHeight</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token comment" spellcheck="true">//全局成员是window对象的属性</span><span class="token keyword">function</span> <span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我是函数！'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//UI响应式设计innerWidth发挥应用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'浏览器窗口宽度：'</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'浏览器窗口高度：'</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token number">12345678</span></code></pre><h4 id="2-2-常用方法"><a href="#2-2-常用方法" class="headerlink" title="2.2 常用方法"></a>2.2 常用方法</h4><ul><li><strong>常用方法</strong></li></ul><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>prompt()</td><td>显示可提示用户输入的对话框</td></tr><tr><td>alert()</td><td>显示带有一个提示信息和一个确定按钮的警示框</td></tr><tr><td>confirm()</td><td>显示一个带有提示信息、确定和取消按钮的对话框</td></tr><tr><td>close()</td><td>关闭浏览器窗口</td></tr><tr><td>open()</td><td>打开一个新的浏览器窗口，加载给定 URL 所指定的文档</td></tr></tbody></table><h6 id="2-2-1-open-方法"><a href="#2-2-1-open-方法" class="headerlink" title="2.2.1 open 方法"></a>2.2.1 open 方法</h6><ul><li><code>window.open(&quot;弹出窗口的 url&quot;, &quot;窗口名称&quot;, &quot;窗口特征&quot;)</code></li></ul><table><thead><tr><th>属性名称</th><th>说明</th></tr></thead><tbody><tr><td>height、width</td><td>窗口文档显示区的高度、宽度、以像素计</td></tr><tr><td>left、top</td><td>窗口的 x 坐标、y 坐标，以像素计</td></tr></tbody></table><h4 id="2-3-其他方法"><a href="#2-3-其他方法" class="headerlink" title="2.3 其他方法"></a>2.3 其他方法</h4><ul><li><strong>其他方法</strong></li></ul><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>resizeBy()</td><td>把窗口的大小尺寸调整指定的像素</td></tr><tr><td>resizeTo()</td><td>把窗口的大小尺寸调整到指定的宽度和高度</td></tr><tr><td>moveBy()</td><td>把当前窗口移动指定的像素距离</td></tr><tr><td>moveTo()</td><td>把窗口的左上角移动到指定的坐标</td></tr><tr><td>scrollBy()</td><td>滚动指定的像素距离，内容必须大于窗口的尺寸</td></tr><tr><td>scrollTo()</td><td>滚动到指定的坐标位置</td></tr><tr><td>setTimeout()</td><td>在指定的毫秒数后调用函数或计算表达式</td></tr><tr><td>setInterval()</td><td>按照指定的周期（以毫秒计）来调用函数或表达式</td></tr></tbody></table><h4 id="2-4-方法案例"><a href="#2-4-方法案例" class="headerlink" title="2.4 方法案例"></a>2.4 方法案例</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">Buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//涉及到安全、数据更改、删除操作</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'您确定要下单吗？'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'用户已经确认，马上提交服务器。。。。。。'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'用户已经撤销，不再继续操作！'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">closeWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">openWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'page1.html'</span><span class="token punctuation">,</span><span class="token string">'myNewWin'</span><span class="token punctuation">,</span><span class="token string">'width=300px,height=300px,left=100px,top=100px'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">moveWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//适用于open打开的窗口，其他没有效果</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">scrollWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//实现页面滚动</span>        window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//实现页面滚动</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2000</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>下单<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Buy()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>关闭<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>closeWindow()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>打开新窗口<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>openWindow()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>移动窗口<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>moveWindow()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>滚动窗口<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scrollWindow()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="3-定时器方法"><a href="#3-定时器方法" class="headerlink" title="3. 定时器方法"></a>3. 定时器方法</h2><h4 id="3-1-设置定时器方法"><a href="#3-1-设置定时器方法" class="headerlink" title="3.1 设置定时器方法"></a>3.1 设置定时器方法</h4><h6 id="3-1-1-1-setTimeout"><a href="#3-1-1-1-setTimeout" class="headerlink" title="3.1.1.1 setTimeout()"></a>3.1.1.1 <code>setTimeout()</code></h6><ul><li><p><code>功能</code></p><ul><li>用于<code>在指定的毫秒数后调用函数或计算表达式</code></li><li><code>code 必需参数</code>，要调用的函数后要执行的 JavaScript 代码串</li><li><code>millisec 必需参数</code>，在执行代码前需等待的毫秒数</li><li>setTimeout() <code>只执行 code 一次</code></li></ul></li><li><p><strong>语法</strong></p><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"调用的函数"</span><span class="token punctuation">,</span>等待的毫秒数<span class="token punctuation">)</span></code></pre></li></ul><pre class=" language-html"><code class="language-html">//举例: 实现五秒后出现提示框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">startWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我在准备中！'</span><span class="token punctuation">)</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我开工了！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          num<span class="token operator">=</span>num<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span> num <span class="token operator">></span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>开始工作<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>startWork()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>                              </code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> timer<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span>log <span class="token punctuation">(</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h6 id="3-1-1-2-立即改变用户输入"><a href="#3-1-1-2-立即改变用户输入" class="headerlink" title="3.1.1.2 立即改变用户输入"></a>3.1.1.2 立即改变用户输入</h6><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myInput<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">myInput<span class="token punctuation">.</span>onkeypress <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        myInput<span class="token punctuation">.</span>value <span class="token operator">=</span> myInput<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h6 id="3-1-1-3-js改变线性顺序"><a href="#3-1-1-3-js改变线性顺序" class="headerlink" title="3.1.1.3 js改变线性顺序"></a>3.1.1.3 js改变线性顺序</h6><p><strong>js是单线程的</strong></p><p>所以我们看看</p><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果： 2 3 1</span></code></pre><p>js是单线程的，单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</p><h6 id="3-1-2-setInterval"><a href="#3-1-2-setInterval" class="headerlink" title="3.1.2 setInterval()"></a>3.1.2 <code>setInterval()</code></h6><ul><li><code>功能</code><ul><li>可<code>按照指定的周期(以毫秒计)来调用函数或计算表达式</code></li><li><code>code 必需</code>，要<code>调用的函数或要执行的代码串</code></li><li><code>millisec 必需</code>，周期性执行或调用 code 之间的<code>时间间隔</code>，以毫秒计</li><li>setInterval() 方法会不停地调用函数，<code>直到 clearInterval() 被调用或窗口被关闭</code></li><li>由 <code>setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数</code></li></ul></li><li><strong>语法</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"调用的函数"</span><span class="token punctuation">,</span>间隔的毫秒数<span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mydiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> mydiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'mydiv'</span><span class="token punctuation">)</span>        mydiv<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> </code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    count<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-2-清除定时器方法"><a href="#3-2-清除定时器方法" class="headerlink" title="3.2 清除定时器方法"></a>3.2 清除定时器方法</h4><h6 id="3-2-1-clearTimeout"><a href="#3-2-1-clearTimeout" class="headerlink" title="3.2.1 clearTimeout()"></a>3.2.1 <code>clearTimeout()</code></h6><ul><li><code>功能</code><ul><li>可<code>取消</code>由 setTimeout() 方法设置的 timeout</li><li>id_of_setTimeout 由 <code>setTimeout() 返回的 ID 值</code></li><li>该值标识要取消的延迟执行代码块</li></ul></li><li><strong>语法</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token function">clearTimeout</span><span class="token punctuation">(</span>id_of_setTimeout<span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">举例: 实现开始/暂停计数（如果没有点击“暂停计数”则一直计数，点击“暂停计数”后仍然可以再点击“开始计数”继续计数）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">//初始化定时器对象为空</span>    <span class="token keyword">function</span> <span class="token function">startRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断是否已存在定时器，防止定时器累加</span>            <span class="token comment" spellcheck="true">//创建定时器</span>            timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                num<span class="token operator">++</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'mydiv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> num            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">pauseRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//清除定时器，此时 timer 并没有为空</span>        timer <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mydiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>开始计数<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>startRecord()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>暂停计数<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pauseRecord()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h6 id="3-2-2-clearInterval"><a href="#3-2-2-clearInterval" class="headerlink" title="3.2.2 clearInterval()"></a>3.2.2 <code>clearInterval()</code></h6><ul><li><code>功能</code><ul><li>可<code>取消</code>由 setInterval() 设置的 timeout</li><li>id_of_setInterval <code>由 setInterval() 返回的 ID 值</code></li></ul></li><li><strong>语法</strong></li></ul><pre class=" language-html"><code class="language-html">clearInterval(id_of_setInterval)</code></pre><pre class=" language-html"><code class="language-html">举例: 实现停在获取系统的时间（获取了系统的时间，点击暂停后计时会停止）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clock<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>35<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span>javascript</span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token keyword">var</span> int <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"clock()"</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span>     <span class="token keyword">function</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"clock"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span>t     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int <span class="token punctuation">=</span> window.clearInterval(int)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>暂停<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>                  ```#### 3.3 定时器案例###### 3.3.1 随机漂浮的广告窗口```jssetInterval(function()<span class="token entity" title="&#123;">&amp;#123;</span>    var direction = [-1,1]    var x,y    var index = Math.round(Math.random()) // 0,1    x = Math.round(5*Math.random()) * direction[index] // 生成随机的水平偏移量    y = Math.round(5*Math.random()) * direction[index] // 生成随机的垂直偏移量    moveBy(x,y)<span class="token entity" title="&#125;">&amp;#125;</span>,2000) ```###### 3.3.2 自动轮播图```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> loopPics <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1.jpg'</span><span class="token punctuation">,</span><span class="token string">'2.jpg'</span><span class="token punctuation">,</span><span class="token string">'3.jpg'</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> myImg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'loopPic'</span><span class="token punctuation">)</span>        myImg<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'images/'</span> <span class="token operator">+</span> loopPics<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loopPic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> ```###### 3.3.2 手动轮播图```jsvar lis = document.getElementsByTagName('li')for(var i = 0; i &lt; lis.length; i++) <span class="token entity" title="&#123;">&amp;#123;</span>    lis[i].onclick = function()<span class="token entity" title="&#123;">&amp;#123;</span>        var myImg = document.getElementById('loopPic')        var currentIndex = this.innerHTML // 获取点击标签内部的内容        myImg.src = 'images/' + loopPic[currentIndex - 1]    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span> ```## 4. Window 对象事件#### 4.1 常用的事件| 名称     | 说明                       || -------- | -------------------------- || onload   | 一个页面或一幅图像完成加载 || onresize | 窗口尺寸大小发生变化时触发 || onscroll | 一个页面或一幅图像完成加载 || onunload | 一个页面或一幅图像完成加载 |###### 4.1.1 window.onload 事件- window.onload表示`页面标签全部加载````html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token number">1</span><span class="token punctuation">.</span> 不加 window<span class="token punctuation">.</span>onload 会报错       代码是从头加载到尾，还没有加载到 body 中的元素，所以获取不到<span class="token punctuation">,</span>会报错        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>          btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我被点击了！'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">==</span>    <span class="token number">2</span><span class="token punctuation">.</span> window<span class="token punctuation">.</span>onload 表示页面标签全部加载       window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>             btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我被点击了！'</span><span class="token punctuation">)</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">==</span>    <span class="token number">3</span><span class="token punctuation">.</span> 注意避免重复定义 onload 事件，以免覆盖       window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'start!'</span><span class="token punctuation">)</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点我<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> ```#### 4.2 文档加载过程###### 4.2.1 存在问题- 浏览器在加载一个页面时，是按照`自上向下`的顺序加载的- 如果将`script`标签写到`head`内部，在代码执行时，页面还没有加载，页面中的`DOM`对象也没有加载- 导致在`js`中无法获取到页面中的`DOM`对象```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"点我也没用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>结果：报错 ```###### 4.2.2 解决方案- `onload`事件  - `onload`事件会在`整个页面加载完成之后才触发`- 为 `window`绑定一个`onload`事件  - 该事件对应的响应函数将会在页面加载完成之后执    - 这样可以确保我们的代码执行时所有的`DOM`对象已经加载完毕了```jswindow.onload = function()<span class="token entity" title="&#123;">&amp;#123;</span>    ...<span class="token entity" title="&#125;">&amp;#125;</span> ```- 把`script`标签放在`body`尾部```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> ```- 建议: `两者综合`#### 4.3 window 事件练习```js- 实现以下的页面效果    - 当浏览器窗口宽度在低于800px时，页面背景是红色    - 当浏览器窗口宽度在800-1024px时，页面背景是蓝色    - 当浏览器窗口宽度在1024-1280px时，页面背景是绿色    - 当浏览器窗口宽度大于1280px时，页面背景是黄色//适合做滚动监听的页面特效window.onscroll = function()<span class="token entity" title="&#123;">&amp;#123;</span>    console.log('页面开始滚动了')<span class="token entity" title="&#125;">&amp;#125;</span>//响应式设计的原理window.onresize = function()<span class="token entity" title="&#123;">&amp;#123;</span> // 监听浏览器窗口变化    console.log('当前页面的宽度：' + innerWidth)    if(innerWidth &lt; 800)<span class="token entity" title="&#123;">&amp;#123;</span>        document.body.style.backgroundColor = '#ff0'    <span class="token entity" title="&#125;">&amp;#125;</span>else if(innerWidth &lt; 1024)<span class="token entity" title="&#123;">&amp;#123;</span>        document.body.style.backgroundColor = '#f0f'    <span class="token entity" title="&#125;">&amp;#125;</span>else if(innerWidth &lt; 1280)<span class="token entity" title="&#123;">&amp;#123;</span>        document.body.style.backgroundColor = '#0ff'    <span class="token entity" title="&#125;">&amp;#125;</span>else<span class="token entity" title="&#123;">&amp;#123;</span>        document.body.style.backgroundColor = '#0f0'    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>```## 实例[BOM实例](https://www.runoob.com/js/js-ex-browser.html)## reference:https://www.shuzhiduo.com/A/WpdKA9AqJV/</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js class</title>
      <link href="2020/11/27/js-class/"/>
      <url>2020/11/27/js-class/</url>
      
        <content type="html"><![CDATA[<h1 id="class基础"><a href="#class基础" class="headerlink" title="class基础"></a>class基础</h1><h2 id="class基本定义"><a href="#class基本定义" class="headerlink" title="class基本定义"></a>class基本定义</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里全部放属性</span>  <span class="token function">method_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法之间不放逗号</span>  <span class="token function">method_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">method_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class=" language-js"><code class="language-js"> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> year<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">static</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"静态方法，不用实例化直接可以调用"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Car<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Ford"</span><span class="token punctuation">,</span> <span class="token number">2014</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span><span class="token string">"My car is "</span> <span class="token operator">+</span> myCar<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" years old."</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>A JavaScript class is <strong>not</strong> an object.</p><p>It is a <strong>template</strong> for JavaScript objects.</p></blockquote><h2 id="class创建对象"><a href="#class创建对象" class="headerlink" title="class创建对象"></a>class创建对象</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> myCar1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Ford"</span><span class="token punctuation">,</span> <span class="token number">2014</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> myCar2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Audi"</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="class继承-extends"><a href="#class继承-extends" class="headerlink" title="class继承 - extends"></a>class继承 - extends</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>carname <span class="token operator">=</span> brand<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">present</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'I have a '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>carname<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Model</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用parent的constructor - 没有不行</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> mod<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">present</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">', it is a '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">present</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//super.present() 这样会调用父类方法</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我会覆盖父类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"Ford"</span><span class="token punctuation">,</span> <span class="token string">"Mustang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> myCar<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Getters-and-Setters"><a href="#Getters-and-Setters" class="headerlink" title="Getters and Setters"></a>Getters and Setters</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>carname <span class="token operator">=</span> brand<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">get</span> <span class="token function">cnam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>carname<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">set</span> <span class="token function">cnam</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>carname <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Ford"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> myCar<span class="token punctuation">.</span>cnam<span class="token punctuation">;</span></code></pre><h2 id="static-function"><a href="#static-function" class="headerlink" title="static function"></a>static function</h2><p>You cannot call a <code>static</code> method on an object, only on an object class.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"Hello!!"</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Ford"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// You can calll 'hello()' on the Car Class:</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> Car<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// But NOT on a Car Object:</span><span class="token comment" spellcheck="true">// document.getElementById("demo").innerHTML = myCar.hello();</span><span class="token comment" spellcheck="true">// this will raise an error.</span></code></pre><p>改为：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token function">hello</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> x<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Ford"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> Car<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>myCar<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js Node</title>
      <link href="2020/11/27/js-Node/"/>
      <url>2020/11/27/js-Node/</url>
      
        <content type="html"><![CDATA[<h2 id="DOM-节点基本理解"><a href="#DOM-节点基本理解" class="headerlink" title="DOM 节点基本理解"></a>DOM 节点基本理解</h2><ul><li>整个文档是文档节点</li><li>每个 HTML 元素是元素节点</li><li>HTML 元素内的文本是文本节点</li><li>每个 HTML 属性是属性节点</li><li>所有注释是注释节点</li></ul><p><img src="/2020/11/27/js-Node/1606445185786.png"></p><h2 id="node根节点"><a href="#node根节点" class="headerlink" title="node根节点"></a>node根节点</h2><ul><li>document.body - 文档的 body</li><li>document.documentElement - 完整文档</li></ul><h2 id="node基本节点"><a href="#node基本节点" class="headerlink" title="node基本节点"></a>node基本节点</h2><ul><li><p><strong>nodeName</strong> ：<strong>节点名</strong> （只读）。对于元素类型，则是元素的标签名(均为大写)，如”SPAN”、”DIV”；对于其他类型会有不同的值，下面每个类型会分别指出。</p></li><li><p><strong>nodeValue</strong> ：<strong>节点值</strong>。对于元素类型为<code>null</code>；对于其他类型会有不同的值，下面每个类型会分别指出。</p></li><li><p><strong>hasChildNodes</strong>() ：布尔值，<strong>是否含有子节点</strong>。</p></li><li><p><strong>childNodes</strong> ：<strong>NodeList 对象的集合</strong>，是一个<strong>类数组</strong>，实际是基于 DOM 结构动态查询的结果。</p></li><li><p>firstChild ：等效于 childNodes[0] ；</p></li><li><p>lastChild ：等效于 childNodes[childNodes.length - 1] 。</p></li><li><p><strong>parentNode</strong> ：指向<strong>父节点</strong>。</p></li><li><p>previousSibling ：前一个同胞节点；</p></li><li><p>nextSibling ：后一个同胞节点。</p></li><li><p>ownerDocument ：指向节点所在的整个文档节点。</p></li><li><p>nodeType ：常量值，一共有 12 种，如 “Node.ELEMENT_NODE” 或 数字 1 ，下面每个类型会分别给出对象的值。。（只读）</p></li></ul><h2 id="node方法"><a href="#node方法" class="headerlink" title="node方法"></a>node方法</h2><h3 id="创建节点、追加节点"><a href="#创建节点、追加节点" class="headerlink" title="创建节点、追加节点"></a>创建节点、追加节点</h3><ul><li>createElement（标签名）创建一个元素节点（具体的一个元素）。</li><li>appendChild（节点）追加一个节点。</li><li>createTextNode（节点文本内容）创建一个文本节点</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个div元素，因为是document对象的方法。</span><span class="token keyword">var</span> oDivText <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个文本节点内容是“666”，因为是document对象的方法。</span>oDiv<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oDivText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父级.appendChild(子节点);在div元素中添加“666”</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oDiv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父级.appendChild(子节点);;document.body是指向&lt;body>元素</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>createNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父级.appendChild(子节点);;document.documentElement是指向&lt;html>元素</span></code></pre><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><ul><li><strong>appendChild(newNode)</strong> 也是一种插入节点的方式，向 childNodes 集合的<strong>末尾添加一个新节点</strong>,还可以添加已经存在的元素，会将其元素从原来的位置移到新的位置。</li><li>insertBefore（a,b）是参照节点，意思是a节点会插入b节点的前面（可为<code>null</code>后添加新节点），并返回新节点</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是另一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> para <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"这是新文本。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>para<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>para<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        </code></pre><h3 id="删除、移除节点"><a href="#删除、移除节点" class="headerlink" title="删除、移除节点"></a>删除、移除节点</h3><ul><li>removeChild(node) 删除一个节点，用于移除删除一个指定参数（节点），并返回的被移除的节点，被移除的节点仍在文档中，只是文档中已没有其位置了。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h3><ul><li>replaceChild(newNode, node) ，用于替换节点，接受两个参数，第一参数是要插入的节点，第二个是要被替换的节点。返回的是被替换的节点。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> para <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"这是新文本。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>para<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parent<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>para<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h3><ul><li><p>childNodes 包含文本节点和元素节点的子节点。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oList<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//oList是做的ul的对象。</span>      <span class="token comment" spellcheck="true">//nodeType是节点的类型，利用nodeType来判断节点类型，再去控制子节点</span>      <span class="token comment" spellcheck="true">//nodeType==1 是元素节点</span>      <span class="token comment" spellcheck="true">//nodeType==3 是文本节点</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>oList<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找到oList内的元素节点</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oList<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在控制器日志中显示找到的元素节点</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>利用parentNode children 分别获取子节点父节点</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> oList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//oList是做的ul的对象</span>      <span class="token keyword">var</span> oChild<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//oChild是做的ul中的一个li的对象</span>      <span class="token comment" spellcheck="true">//通过子节点查找父节点//parentNode：获取父节点</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oChild<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在控制器日志中显示父节点</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oList<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在控制器日志中显示oList子节点</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//子节点的个数</span></code></pre></li><li><p>firstChild ; firstElementChild查找第一个子节点。此存在浏览器兼容问题：firstChild是IE兼容，firstElementChild是非IE兼容。</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//查找第一个子节点的封装函数</span>        <span class="token keyword">function</span> <span class="token function">firstChild</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果该条件是true则在该浏览器（IE或非IE）中兼容</span>                <span class="token keyword">return</span> ele<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ele<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">firstChild</span><span class="token punctuation">(</span>oList<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将获得的节点的背景变成红色</span></code></pre><ul><li>lastChild ; lastElementChild查找最后一个子节点。此存在浏览器兼容问题：lastChild 是IE兼容，lastElementChild是非IE兼容。</li></ul><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">//查找最后一个子节点的封装函数        </span><span class="token keyword">function</span> <span class="token function">lastChild</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果该条件是true则在该浏览器（IE或非IE）中兼容                </span>        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>lastChild<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">lastChild</span><span class="token punctuation">(</span>oList<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将获得的节点的背景变成红色</span></code></pre><ul><li>nextSibling ; nextElementSibling查找下一个兄弟节点。也是存在兼容性问题。</li></ul><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">//查找下一个兄弟节点的封装函数        </span><span class="token keyword">function</span> <span class="token function">nextSibling</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">nextSibling</span><span class="token punctuation">(</span>oMid<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span></code></pre><ul><li>previousSibling ; previousElementSibling查找上一个兄弟节点。也是存在兼容性问题。</li></ul><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">//查找上一个兄弟节点的封装函数        </span><span class="token keyword">function</span> <span class="token function">previousSibling</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">previousSibling</span><span class="token punctuation">(</span>oMid<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span></code></pre><h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><ul><li><strong>clone(isDeepClone?)</strong> ：<strong>克隆当前节点</strong>，可以接收一个参数：是否深克隆，深克隆表示包含其所有子节点，否则只复制节点本身。</li></ul><h3 id="移除空的文本节点"><a href="#移除空的文本节点" class="headerlink" title="移除空的文本节点"></a>移除空的文本节点</h3><ul><li>normalize() ：移除空的文本节点，并连接相邻的文本节点。</li></ul><p>Reference：</p><p><a href="https://juejin.cn/post/6844903807327928333">https://juejin.cn/post/6844903807327928333</a> – 详细内容</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js OOP</title>
      <link href="2020/11/26/js-OOP/"/>
      <url>2020/11/26/js-OOP/</url>
      
        <content type="html"><![CDATA[<h1 id="对象基础"><a href="#对象基础" class="headerlink" title="对象基础"></a>对象基础</h1><p>object ：propert + method</p><p><img src="/2020/11/26/js-OOP/1607080521610.png" alt="关系图"></p><h2 id="构造函数constructor"><a href="#构造函数constructor" class="headerlink" title="构造函数constructor"></a>构造函数constructor</h2><p>特点：</p><ul><li>函数体内部使用了<code>this</code>关键字，代表了所要生成的对象实例。</li><li>生成对象的时候，必须使用<code>new</code>命令</li><li>constructor是原型对象上的一个属性，默认指向这个原型的构造函数</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 比如一个构造函数：</span><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 声明一个函数后，默认就生成下面这条语句。</span>Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo <span class="token comment" spellcheck="true">// true</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Zaxlct'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'Software Engineer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Mick'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Doctor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true </span></code></pre><h2 id="new命令"><a href="#new命令" class="headerlink" title="new命令"></a>new命令</h2><ol><li>创建一个空对象，作为将要返回的对象实例。</li><li>将这个空对象的原型，指向构造函数的<code>prototype</code>属性。</li><li>将这个空对象赋值给函数内部的<code>this</code>关键字。</li><li>开始执行构造函数内部的代码。</li></ol><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="/2020/11/26/js-OOP/1607331349791.png"></p><h3 id="代码例子"><a href="#代码例子" class="headerlink" title="代码例子"></a>代码例子</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn<span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外部定义函数，根位置确定</span><span class="token keyword">var</span> Vehicle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">function</span><span class="token operator">=</span>fn<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//this.function =function()&amp;#123;&amp;#125;不要这样创建，多个函数暂用内存</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span>price <span class="token comment" spellcheck="true">// 1000</span><span class="token comment" spellcheck="true">////////////////////////////////////////////</span><span class="token keyword">var</span> fn<span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> Cat <span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">function</span><span class="token operator">=</span>fn<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'大毛'</span><span class="token punctuation">,</span> <span class="token string">'白色'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// '大毛'</span>cat1<span class="token punctuation">.</span>color <span class="token comment" spellcheck="true">// '白色'</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Vehicle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="构造函数中创建函数注意"><a href="#构造函数中创建函数注意" class="headerlink" title="构造函数中创建函数注意"></a>构造函数中创建函数注意</h2><h3 id="单个函数"><a href="#单个函数" class="headerlink" title="单个函数"></a>单个函数</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn<span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外部定义函数，根位置确定</span><span class="token keyword">var</span> Vehicle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">function</span><span class="token operator">=</span>fn<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//this.function =function()&amp;#123;&amp;#125;不要这样创建，多个函数暂用内存</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span>price <span class="token comment" spellcheck="true">// 1000</span></code></pre><p>函数的方程不会因为多个对象的创建，而不断的创建。</p><h3 id="那遇到多个-重名）函数，不同对象创建调用怎么办？"><a href="#那遇到多个-重名）函数，不同对象创建调用怎么办？" class="headerlink" title="那遇到多个(重名）函数，不同对象创建调用怎么办？"></a>那遇到多个(重名）函数，不同对象创建调用怎么办？</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//多个函数，防止取名撞，归类到一个对象</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"fn"</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token string">"fn1"</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> Vehicle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1000;obj.fn</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">function</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多个重名函数，创建多个obj，从而调用</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"fn"</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token string">"fn1"</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"fn"</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token string">"fn1"</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> Vehicle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">function</span><span class="token operator">=</span>obj1<span class="token punctuation">.</span>fn<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">function</span><span class="token operator">=</span>obj2<span class="token punctuation">.</span>fn<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h1 id="对象继承-详细另外一篇"><a href="#对象继承-详细另外一篇" class="headerlink" title="对象继承(详细另外一篇)"></a>对象继承(详细另外一篇)</h1><h2 id="基本继承"><a href="#基本继承" class="headerlink" title="基本继承"></a>基本继承</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> Cat <span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'大毛'</span><span class="token punctuation">,</span> <span class="token string">'白色'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// '大毛'</span>cat1<span class="token punctuation">.</span>color <span class="token comment" spellcheck="true">// '白色'</span></code></pre><p>同一个构造函数的多个实例之间，无法共享属性，从而造成对系统资源的浪费。</p><h2 id="多个继承"><a href="#多个继承" class="headerlink" title="多个继承"></a>多个继承</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//parent</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say<span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I am saying ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>walk<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I am walking..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//child</span><span class="token keyword">function</span> <span class="token function">Female</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Female<span class="token punctuation">.</span>prototype <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Female<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sing<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I am singing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span>  obj<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Female</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">male</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>male<span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>male<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span>play<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I am playing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Female</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="prototype-属性-函数的原型对象"><a href="#prototype-属性-函数的原型对象" class="headerlink" title="prototype 属性- 函数的原型对象"></a>prototype 属性- 函数的原型对象</h1><blockquote><p>每个函数都有prototype属性，这个属性是一个指针，指向一个对象，记住只有函数才有,并且通过bind()绑定的也没有。</p><p>对于函数的prototype，在函数定义之前，prototype 就已经创建了</p></blockquote><p><img src="/2020/11/26/js-OOP/1607323876459.png"><br>一个最基本的例子 new constrcut()</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token string">"deen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过new创建了一个对象</span>    <span class="token comment" spellcheck="true">//new是一种语法糖，new person等价于</span>    <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> _newObj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            constructor <span class="token punctuation">:</span> person<span class="token punctuation">,</span>            __proto__ <span class="token punctuation">:</span> person<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        _newObj<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> _newObj<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//已经存在</span><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//已经存在</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">;</span><span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'大毛'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'二毛'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span>color <span class="token comment" spellcheck="true">// 'white'</span>cat2<span class="token punctuation">.</span>color <span class="token comment" spellcheck="true">// 'white'</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>go <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'run'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> cat3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'三毛'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>cat2<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>cat3<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'run'</span></code></pre><h1 id="proto-对象-amp-函数属性"><a href="#proto-对象-amp-函数属性" class="headerlink" title="__proto__ - 对象&amp;函数属性"></a><code>__</code>proto<code>__</code> - 对象&amp;函数属性</h1><blockquote><p>JS 在创建实例对象（不论是普通对象还是函数对象）的时候，都有一个叫做<strong>proto</strong> 的内置属性，用于指向创建它的构造函数的原型对象（ prototype）。</p><p>所有的对象都有一个属性：<code>__proto__</code>，称之为隐式原型，用来将对象与该对象的原型相连</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Zaxlct'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'Software Engineer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Person<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>person1<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>person1<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Person<span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>abc <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>bcd <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果是多少</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>abc<span class="token punctuation">,</span> obj2<span class="token punctuation">.</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//123 undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>bcd<span class="token punctuation">,</span> obj2<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>bcd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//456  456</span></code></pre><blockquote><p>__proto__不建议使用，可以用Object.getPrototypeOf()和Object.setPrototypeOf()代替；</p></blockquote><h2 id="确定对象之间是否存在原型关系"><a href="#确定对象之间是否存在原型关系" class="headerlink" title="确定对象之间是否存在原型关系"></a>确定对象之间是否存在原型关系</h2><ol><li>instanceof,这个操作符只能处理对象(person1)和函数(带.prototype引用的Person)之间的关系</li><li>isPrototypeOf，如果[[prototype]]指向调用此方法的对象，那么这个方法就会返回true</li><li>Object.getPrototypeOf这个方法返回[[Prototype]]的值,可以获取到一个对象的原型</li></ol><pre class=" language-js"><code class="language-js">person1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span> <span class="token comment" spellcheck="true">// true</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span> <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// true</span></code></pre><h2 id="proto-的指向"><a href="#proto-的指向" class="headerlink" title="__proto__ 的指向"></a><code>__</code>proto<code>__</code> 的指向</h2><p><img src="/2020/11/26/js-OOP/1607330943411.png"></p><h1 id="proto-属性-与-prototype-属性-的区别"><a href="#proto-属性-与-prototype-属性-的区别" class="headerlink" title="proto 属性 与 prototype 属性 的区别"></a><strong>proto</strong> 属性 与 prototype 属性 的区别</h1><p><img src="/2020/11/26/js-OOP/1607083961666.png"></p><p>例子中</p><p><img src="/2020/11/26/js-OOP/1607350277074.png"></p><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><h2 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h2><p><img src="/2020/11/26/js-OOP/1607093427072.png"></p><p><img src="/2020/11/26/js-OOP/1607093455510.png"></p><blockquote><p>原型链的形成是真正是靠<strong>proto</strong> 而非 prototype。</p><p>作用：用于实现继承，原型之间的继承，对象之间的继承<br>        注意：JS内部继承的实现就是靠原型链，没有原型链就没有继承</p></blockquote><pre class=" language-js"><code class="language-js">person1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object.prototype.__proto__ === null，保证原型链能够正常结束。</span>Person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Function<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>Object<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Function<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span></code></pre><p>所有函数对象的 proto 都指向 Function.prototype，它是一个空函数（Empty function）</p><h2 id="原型链的例子"><a href="#原型链的例子" class="headerlink" title="原型链的例子"></a>原型链的例子</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Number<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>Number<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Function<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>Funtion<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><p> <img src="/2020/11/26/js-OOP/1607085964568.png"></p><p><img src="/2020/11/26/js-OOP/1607093788627.png"></p><blockquote><p>特殊点：</p><ol><li>Function的__proto__指向自身的prototype</li><li>Object的prototype的__proto__指向null</li></ol></blockquote><h2 id="原型链中实例属性（obj）和原型属性-constructor"><a href="#原型链中实例属性（obj）和原型属性-constructor" class="headerlink" title="原型链中实例属性（obj）和原型属性(constructor)"></a>原型链中实例属性（obj）和原型属性(constructor)</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 原型属性</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> ‘Jiang’<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 实例属性</span>person1<span class="token punctuation">.</span>name <span class="token operator">=</span> ‘J’console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// J</span></code></pre><p>当我们读取一个属性的时候，如果在实例属性上找到了，就读取它，不会管原型属性上是否还有相同的属性，这其实就是<strong>属性屏蔽</strong>。即当实例属性和原型属性拥有相同名字的时候，实例属性会屏蔽原型属性，记住只是屏蔽，不会修改，原型属性那个值还在</p><h2 id="原型prototype"><a href="#原型prototype" class="headerlink" title="原型prototype"></a>原型prototype</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span>  <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span> prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//f1 &amp;#123;&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span>  f1<span class="token punctuation">.</span> prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span>  Function<span class="token punctuation">.</span> prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span>  Object<span class="token punctuation">.</span> prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span>  Function<span class="token punctuation">.</span> prototype<span class="token punctuation">.</span> prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span></code></pre><h2 id="原型链的深层例子"><a href="#原型链的深层例子" class="headerlink" title="原型链的深层例子"></a>原型链的深层例子</h2><p><img src="/2020/11/26/js-OOP/1607098087945.png"></p><blockquote><p>所有的对象最深层的prototype都是object</p></blockquote><p>图例：</p><p><img src="/2020/11/26/js-OOP/1607332056648.png"></p><h1 id="原型链的应用"><a href="#原型链的应用" class="headerlink" title="原型链的应用"></a>原型链的应用</h1><h2 id="基础方法"><a href="#基础方法" class="headerlink" title="基础方法"></a>基础方法</h2><p>W3C不推荐直接使用系统成员<strong>proto</strong></p><h3 id="Object-getPrototypeOf-对象"><a href="#Object-getPrototypeOf-对象" class="headerlink" title="Object.getPrototypeOf(对象)"></a><strong>Object.getPrototypeOf(对象)</strong></h3><p>​            获取对象的隐式原型</p><p><code>Object.getPrototypeOf</code>方法返回参数对象的原型。这是获取原型对象的标准方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> F <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">===</span> F<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// true</span></code></pre><p>上面代码中，实例对象<code>f</code>的原型是<code>F.prototype</code>。</p><p>下面是几种特殊对象的原型。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 空对象的原型是 Object.prototype</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// Object.prototype 的原型是 null</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 函数的原型是 Function.prototype</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">===</span> Function<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="Object-setPrototypeOf-对象"><a href="#Object-setPrototypeOf-对象" class="headerlink" title="Object.setPrototypeOf(对象)"></a>Object.setPrototypeOf(对象)</h3><p><code>Object.setPrototypeOf</code>方法为参数对象设置原型，返回该参数对象。它接受两个参数，第一个是现有对象，第二个是原型对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> b <span class="token comment" spellcheck="true">// true</span>a<span class="token punctuation">.</span>x <span class="token comment" spellcheck="true">// 1</span></code></pre><p>上面代码中，<code>Object.setPrototypeOf</code>方法将对象<code>a</code>的原型，设置为对象<code>b</code>，因此<code>a</code>可以共享<code>b</code>的属性。</p><p><code>new</code>命令可以使用<code>Object.setPrototypeOf</code>方法模拟。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> F <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">var</span> f <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> F<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>F<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码中，<code>new</code>命令新建实例对象，其实可以分成两步。第一步，将一个空对象的原型设为构造函数的<code>prototype</code>属性（上例是<code>F.prototype</code>）；第二步，将构造函数内部的<code>this</code>绑定这个空对象，然后执行构造函数，使得定义在<code>this</code>上面的方法和属性（上例是<code>this.foo</code>），都转移到这个空对象上。</p><h3 id="Object-prototype-isPrototypeOf-对象"><a href="#Object-prototype-isPrototypeOf-对象" class="headerlink" title="Object.prototype.isPrototypeOf(对象)"></a><strong>Object.prototype.isPrototypeOf(对象)</strong></h3><p>判断当前对象(this)是否在指定对象的原型链上</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//换种写法</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true </span><span class="token comment" spellcheck="true">//例子2</span><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> o2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>o2<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>o3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>o1<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>o3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>因此o的隐式原型是Object.<strong>proto</strong>,正好它也在obj的原型链上，所以是true,具体可以看上图</p><h3 id="对象-instanceof-函数"><a href="#对象-instanceof-函数" class="headerlink" title="对象 instanceof 函数"></a><strong>对象 instanceof 函数</strong></h3><p>判断函数的原型是否在对象的原型链上</p><h3 id="Object-create-对象"><a href="#Object-create-对象" class="headerlink" title="Object.create(对象)"></a><strong>Object.create(对象)</strong></h3><p>生成实例对象的常用方法是，使用<code>new</code>命令让构造函数返回一个实例。但是很多时候，只能拿到一个实例对象，它可能根本不是由构建函数生成的，那么能不能从一个实例对象，生成另一个实例对象呢？</p><p>JavaScript 提供了<code>Object.create()</code>方法，用来满足这种需求。该方法接受一个对象作为参数，然后以它为原型，返回一个实例对象。该实例完全继承原型对象的属性。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原型对象</span><span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  print<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实例对象</span><span class="token keyword">var</span> B <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">===</span> A <span class="token comment" spellcheck="true">// true</span>B<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// hello</span>B<span class="token punctuation">.</span>print <span class="token operator">===</span> A<span class="token punctuation">.</span>print <span class="token comment" spellcheck="true">// true</span></code></pre><p>上面代码中，<code>Object.create()</code>方法以<code>A</code>对象为原型，生成了<code>B</code>对象。<code>B</code>继承了<code>A</code>的所有属性和方法。</p><p>下面三种方式生成的新对象是等价的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Object.create()</code>方法生成的新对象，动态继承了原型。在原型上添加或修改任何方法，会立刻反映在新对象之上。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例子1</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> p<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">// 2</span> <span class="token comment" spellcheck="true">//例子2</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span>constructor <span class="token operator">===</span> A <span class="token comment" spellcheck="true">// true</span>b <span class="token keyword">instanceof</span> <span class="token class-name">A</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="new与Object-create-区别"><a href="#new与Object-create-区别" class="headerlink" title="new与Object.create()区别"></a>new与Object.create()区别</h3><ul><li>new创建一个对象，执行构造函数。</li><li>Object.create相当于创建一个对象，但是不执行构造函数。</li></ul><h3 id="Object-prototype-proto"><a href="#Object-prototype-proto" class="headerlink" title="Object.prototype.proto"></a>Object.prototype.<strong>proto</strong></h3><p>实例对象的<code>__proto__</code>属性（前后各两个下划线），返回该对象的原型。该属性可读写。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> p<span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> p <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">//例子2</span><span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> B <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">'李四'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  print<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>A<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> proto<span class="token punctuation">;</span>B<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> proto<span class="token punctuation">;</span>A<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 张三</span>B<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 李四</span>A<span class="token punctuation">.</span>print <span class="token operator">===</span> B<span class="token punctuation">.</span>print <span class="token comment" spellcheck="true">// true</span>A<span class="token punctuation">.</span>print <span class="token operator">===</span> proto<span class="token punctuation">.</span>print <span class="token comment" spellcheck="true">// true</span>B<span class="token punctuation">.</span>print <span class="token operator">===</span> proto<span class="token punctuation">.</span>print <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames()"></a>Object.getOwnPropertyNames()</h3><p><code>Object.getOwnPropertyNames</code>方法返回一个数组，成员是参数对象本身的所有属性的键名，不包含继承的属性键名。</p><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>Date<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ["parse", "arguments", "UTC", "caller", "name", "prototype", "now", "length"]</span></code></pre><p>上面代码中，<code>Object.getOwnPropertyNames</code>方法返回<code>Date</code>所有自身的属性名。</p><p>对象本身的属性之中，有的是可以遍历的（enumerable），有的是不可以遍历的。<code>Object.getOwnPropertyNames</code>方法返回所有键名，不管是否可以遍历。只获取那些可以遍历的属性，使用<code>Object.keys</code>方法。</p><h3 id="Object-prototype-hasOwnProperty-属性名"><a href="#Object-prototype-hasOwnProperty-属性名" class="headerlink" title="Object.prototype.hasOwnProperty(属性名)"></a><strong>Object.prototype.hasOwnProperty(属性名)</strong></h3><p>判断一个对象<strong>自身</strong>是否拥有某个属性,在循环遍历的时候经常使用</p><p>对象实例的<code>hasOwnProperty</code>方法返回一个布尔值，用于判断某个属性定义在对象自身，还是定义在原型链上。</p><pre class=" language-js"><code class="language-js">Date<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'length'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>Date<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p>上面代码表明，<code>Date.length</code>（构造函数<code>Date</code>可以接受多少个参数）是<code>Date</code>自身的属性，<code>Date.toString</code>是继承的属性。</p><p>另外，<code>hasOwnProperty</code>方法是 JavaScript 之中唯一一个处理对象属性时，不会遍历原型链的方法。</p><h3 id="获取对象的所有可枚举的属性的名字"><a href="#获取对象的所有可枚举的属性的名字" class="headerlink" title="获取对象的所有可枚举的属性的名字"></a>获取对象的所有可枚举的属性的名字</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["name"]</span><span class="token keyword">var</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["age"]</span></code></pre><h3 id="获取原型对象方法的比较"><a href="#获取原型对象方法的比较" class="headerlink" title="获取原型对象方法的比较"></a>获取原型对象方法的比较</h3><p>获取实例对象<code>obj</code>的原型对象，有三种方法。</p><ul><li><code>obj.__proto__</code>（不稳）</li><li><code>obj.constructor.prototype</code>（不稳）</li><li><code>Object.getPrototypeOf(obj)</code>（推荐）</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> P <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> C <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>C<span class="token punctuation">.</span>prototype <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype <span class="token operator">===</span> p <span class="token comment" spellcheck="true">// false</span></code></pre><p>上面代码中，构造函数<code>C</code>的原型对象被改成了<code>p</code>，但是实例对象的<code>c.constructor.prototype</code>却没有指向<code>p</code>。所以，在改变原型对象时，一般要同时设置<code>constructor</code>属性。</p><pre class=" language-js"><code class="language-js">C<span class="token punctuation">.</span>prototype <span class="token operator">=</span> p<span class="token punctuation">;</span>C<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> C<span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype <span class="token operator">===</span> p <span class="token comment" spellcheck="true">// true</span></code></pre><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><strong>类数组转换为真数组</strong></p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>类数组<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个方法与[].slice.call(类数组)的区别：后者的[]是重新创建了一个数组从而得到slice方法，但是这是不必要的</span></code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://blog.csdn.net/qq_44197554/article/details/105438252">https://blog.csdn.net/qq_44197554/article/details/105438252</a></li><li>Dr. Axel Rauschmayer, <a href="http://www.2ality.com/2011/07/js-properties.html">JavaScript properties: inheritance and enumerability</a></li><li><a href="https://wangdoc.com/javascript/oop/prototype.html#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%BC%BA%E7%82%B9">https://wangdoc.com/javascript/oop/prototype.html#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%BC%BA%E7%82%B9</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;chksm=80d66757b7a1ee41cd8bc2154baf7e8a15304d25bd289dda29061ebe1678eebaad4232557ec3&amp;idx=1&amp;mid=2665520916&amp;scene=21&amp;sn=76f110bb713ac67d0a678af0b088501e#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg%3D%3D&amp;chksm=80d66757b7a1ee41cd8bc2154baf7e8a15304d25bd289dda29061ebe1678eebaad4232557ec3&amp;idx=1&amp;mid=2665520916&amp;scene=21&amp;sn=76f110bb713ac67d0a678af0b088501e#wechat_redirect</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js DOM</title>
      <link href="2020/11/26/js-DOM/"/>
      <url>2020/11/26/js-DOM/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="Dom-Node-NodeList-NodeCollection基本讲解"><a href="#Dom-Node-NodeList-NodeCollection基本讲解" class="headerlink" title="Dom Node NodeList  NodeCollection基本讲解"></a>Dom Node NodeList  NodeCollection基本讲解</h2><h3 id="dom-amp-node"><a href="#dom-amp-node" class="headerlink" title="dom&amp;node"></a>dom&amp;node</h3><ul><li>（文档对象模型）Document Object Model</li><li>注意 DOM最小组成单位叫做节点 Node</li></ul><blockquote><p>常见的Node有<code>element</code>，<code>text</code>，<code>attribute</code>，<code>comment</code>，<code>document</code>等（所以要注意<code>节点</code>和<code>元素</code>的区别，<code>元素</code>属于<code>节点</code>的一种）。</p></blockquote><h4 id="Node关系"><a href="#Node关系" class="headerlink" title="Node关系"></a>Node关系</h4><p><img src="/2020/11/26/js-DOM/1606898831606.png"></p><h4 id="Node类型"><a href="#Node类型" class="headerlink" title="Node类型"></a>Node类型</h4><table><thead><tr><th align="left">节点</th><th align="left">类型</th><th align="left">nodeName</th><th>nodeType</th><th>含义</th><th></th></tr></thead><tbody><tr><td align="left"><strong>Document</strong></td><td align="left">Node.DOCUMENT_NODE</td><td align="left">#document</td><td>9</td><td>文档节点</td><td>整个文档(window.document)</td></tr><tr><td align="left"><strong>Element</strong></td><td align="left">ELEMENT_NODE</td><td align="left">大写的 HTML 元素名</td><td>1</td><td>元素节点</td><td>HTML元素(比如<body>、等)</body></td></tr><tr><td align="left"><strong>Attribute</strong></td><td align="left">ATTRIBUTE_NODE</td><td align="left">等同于 Attr.name</td><td>2</td><td>属性节点</td><td>HTML元素的属性(比如 class=”right”)</td></tr><tr><td align="left"><strong>Text</strong></td><td align="left">TEXT_NODE</td><td align="left">#text</td><td>3</td><td>文本节点</td><td>HTML 文档中出现的文本</td></tr><tr><td align="left"><strong>DocumentType</strong></td><td align="left">DOCUMENT_TYPE_NODE</td><td align="left">等同于 DocumentType.name</td><td>10</td><td>文档类型节点</td><td>文档的类型(比如<!DOCTYPE html>)</td></tr><tr><td align="left"><strong>DocumentFragment</strong></td><td align="left">DOCUMENT_FRAGMENT_NODE</td><td align="left">#document-fragment</td><td>11</td><td>文档碎片节点</td><td>文档的片段</td></tr></tbody></table><p>验证例子</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span>nodeName <span class="token comment" spellcheck="true">// "#document"</span>document<span class="token punctuation">.</span>nodeType <span class="token comment" spellcheck="true">// 9</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// true</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nodeType <span class="token operator">===</span> Node<span class="token punctuation">.</span>ELEMENT_NODE <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="nodeList"><a href="#nodeList" class="headerlink" title="nodeList"></a>nodeList</h3><p>NodeList 对象是一个节点的集合，一般由<code>Node.childNodes</code>、<code>document.getElementsByName</code>和<code>document.querySelectorAll</code>返回的。</p><blockquote><p>不过需要注意，<code>Node.childNodes</code>、<code>document.getElementsByName</code>返回的<code>NodeList</code>的结果是实时的（此时跟HTMLCollection比较类似），而<code>document.querySelectorAll</code>返回的结果是固定的，这一点比较特殊。</p><p>NodeList 接口提供 length 属性和数字索引，因此可以像数组那样，使用数字索引取出每个节点，但是它本身并不是数组，不能使用 pop 或 push 之类数组特有的方法。当然可以转成数组。</p><p>NodeList 部署了 Iterator 接口，因此还可以用 for…of 进行遍历。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> childNodes <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果假设结果是“2”</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时的输出是“3”</span></code></pre><h3 id="HTMLCollection"><a href="#HTMLCollection" class="headerlink" title="HTMLCollection"></a>HTMLCollection</h3><p>HTMLCollection是一个特殊的NodeList，表示包含了若干元素（元素顺序为文档流中的顺序）的通用集合，它是实时更新的，当其所包含的元素发生改变时，它会自动更新。另外，它是一个伪数组，如果想像数组一样操作它们需要像<code>Array.prototype.slice.call(nodeList, 2)</code>这样调用。</p><blockquote><p>  所以实际上针对不同的元素 有不同调用方法属性。 分为node HTML元素 document element text</p></blockquote><p>getElementsByTagName() 方法返回 <em>HTMLCollection</em> 对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取集合中的第二个p元素</span></code></pre><p>length 属性定义了 HTMLCollection 中元素的数量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myCollection <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> myCollection<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//另一个实际利用</span><span class="token keyword">var</span> myCollection <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myCollection<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    myCollection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>HTMLCollection 并非数组！</p></blockquote><h3 id="HTMLCollection-与-NodeList-的区别"><a href="#HTMLCollection-与-NodeList-的区别" class="headerlink" title="HTMLCollection 与 NodeList 的区别"></a>HTMLCollection 与 NodeList 的区别</h3><ul><li>HTMLCollection是 HTML 元素的集合。</li><li>NodeList 是文档节点的集合。</li><li>NodeList 和 HTML 集合几乎完全相同。</li><li>HTMLCollection 和 NodeList 对象都是类数组的对象列表（集合）。</li><li>它们都有定义列表（集合）中项目数的 length 属性。</li><li>它们都可以通过索引 (0, 1, 2, 3, 4, …) 像数组那样访问每个项目。</li><li>访问 HTMLCollection 项目，可以通过它们的名称、id 或索引号。</li><li>访问 NodeList 项目，只能通过它们的索引号。</li><li>只有 NodeList 对象能包含属性节点和文本节点。</li><li>节点列表不是数组！</li><li>节点数组看起来像数组，但并不是。</li><li>您能够遍历节点列表并像数组那样引用其节点。</li><li>不过，您无法对节点列表使用数组方法，比如 valueOf()、push()、pop() 或 join()。</li></ul><p><a href="https://www.jianshu.com/p/f6ff5ebe45fd">HTMLCollection vs. NodeList</a></p><h2 id="节点查找API"><a href="#节点查找API" class="headerlink" title="节点查找API"></a>节点查找API</h2><blockquote><p>document.getElementById ：根据ID查找元素，大小写敏感，如果有多个结果，只返回第一个；</p><p>document.getElementsByClassName ：根据类名查找元素，多个类名用空格分隔，返回一个 HTMLCollection 。注意兼容性为IE9+（含）。另外，不仅仅是document，其它元素也支持 getElementsByClassName 方法；</p><p>document.getElementsByTagName ：根据标签查找元素， * 表示查询所有标签，返回一个 HTMLCollection </p><p>document.getElementsByName ：根据元素的name属性查找，返回一个 NodeList 。</p><p><strong>document.querySelector ：返回单个Node，IE8+(含），如果匹配到多个结果，只返回第一个。</strong>       </p><p><strong>document.querySelector(“#app”)      //获取到id名为app的首个元素</strong></p><p><strong>document.querySelector(“.app”)      //获取到class名为app的首个元素</strong></p><p><strong>document.querySelectorAll ：返回一个 NodeList ，IE8+(含）。</strong></p><p>document.forms ：获取当前页面所有form，返回一个 HTMLCollection ；</p></blockquote><p><img src="/2020/11/26/js-DOM/1606972235841.png"></p><h3 id="深入理解如何使用querySelector"><a href="#深入理解如何使用querySelector" class="headerlink" title="深入理解如何使用querySelector"></a>深入理解如何使用querySelector</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>opo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">//querySelector</span><span class="token keyword">let</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#opo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//CSS语法查找节点</span><span class="token keyword">let</span> c1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div span .p b input[name=age]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//他可以像css一样去选择</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//querySelectorAll</span><span class="token keyword">let</span> d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'#opo span p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跟getElementsByTagName很相似，获取当前选择的所有标签</span>d<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//也可以循环&amp;#125;)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> </code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inside<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lonely<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回页面中所有div元素组成的节点列表（NodeList类型的对象）</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div.lonely"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回一个单独的div元素。</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#my-id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//会查找#my-id下的图片子代元素（注意是子代而不是后代    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//这下面两个是一样的意思嘛？</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"#my-id div div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实际上只有一个</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#my-id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"div div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实际上三个 div.lonely，div.outer，div.inner</span><span class="token comment" spellcheck="true">//第一个是查询一个被#my-div下div包裹的div元素</span><span class="token comment" spellcheck="true">//另一个是查询一个被div包裹的div元素，而这个div是#my-id的子代元素</span></code></pre><p><strong>4、Element.insertAdjacentElement()</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- afterbegin --></span>  foo  <span class="token comment" spellcheck="true">&lt;!-- beforeend --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- afterend --></span></code></pre><p>用法和上面类似，</p><pre class=" language-js"><code class="language-js">targetElement<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>5、removeChild</strong></p><p>removeChild用于删除指定的子节点并返回子节点，语法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> deletedChild <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p>deletedChild指向被删除节点的引用，它仍然存在于内存中，可以对其进行下一步操作。另外，如果被删除的节点不是其子节点，则将会报错。一般删除节点都是这么删的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span> node<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><p><strong>6、replaceChild</strong></p><p>replaceChild用于将一个节点替换另一个节点，语法：</p><pre class=" language-js"><code class="language-js">parent<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>newChild<span class="token punctuation">,</span> oldChild<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h2 id="节点关系API"><a href="#节点关系API" class="headerlink" title="节点关系API"></a>节点关系API</h2><p><strong>1、父关系API</strong></p><blockquote><p>parentNode ：每个节点都有一个parentNode属性，它表示元素的父节点。Element的父节点可能是Element，Document或DocumentFragment；</p><p>parentElement ：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element元素，如果不是，则返回null；</p></blockquote><p><strong>2、子关系API</strong></p><blockquote><p>children ：返回一个实时的 HTMLCollection ，子节点都是Element，IE9以下浏览器不支持；</p><p>childNodes ：返回一个实时的 NodeList ，表示元素的子节点列表，注意子节点可能包含文本节点、注释节点等；</p><p>firstChild ：返回第一个子节点，不存在返回null，与之相对应的还有一个 firstElementChild ；</p><p>lastChild ：返回最后一个子节点，不存在返回null，与之相对应的还有一个 lastElementChild ；</p><p>childElementCount ：返回子元素节点的个数，相当于children.length</p></blockquote><p><strong>3、兄弟关系型API</strong></p><blockquote><p>previousSibling ：节点的前一个节点，如果不存在则返回null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。</p><p>nextSibling ：节点的后一个节点，如果不存在则返回null。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。</p><p>previousElementSibling ：返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。</p><p>nextElementSibling ：返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。</p></blockquote><p><strong>4、包含关系查询</strong></p><blockquote><p>hasChildNodes()： 在包含一个或多个子节点时返回true，比查询childNodes列表的length属性更简单</p><p>contains() ：接受一个节点作为参数，返回一个布尔值，表示参数节点是否为当前节点的后代节点。参数为后代节点即可，不一定是第一层子节点　</p></blockquote><h2 id="元素属性型API"><a href="#元素属性型API" class="headerlink" title="元素属性型API"></a>元素属性型API</h2><p><strong>1、setAttribute 给元素设置属性：</strong></p><pre><code>element.setAttribute(name, value);  </code></pre><p>其中name是特性名，value是特性值。如果元素不包含该特性，则会创建该特性并赋值。</p><p><strong>2、getAttribute</strong></p><p>getAttribute返回指定的特性名相应的特性值，如果不存在，则返回null：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> value <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><strong>3、hasAttribute</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// do something</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>4、dataset</strong></p><p>获取html data-开头的属性，用法如下：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"user"</span> data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"1234567890"</span> data<span class="token operator">-</span>user<span class="token operator">=</span><span class="token string">"johndoe"</span> data<span class="token operator">-</span>date<span class="token operator">-</span><span class="token keyword">of</span><span class="token operator">-</span>birth<span class="token operator">></span>John Doe<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// el.id == 'user'</span><span class="token comment" spellcheck="true">// el.dataset.id === '1234567890'</span><span class="token comment" spellcheck="true">// el.dataset.user === 'johndoe'</span><span class="token comment" spellcheck="true">// el.dataset.dateOfBirth === ''</span>el<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>dateOfBirth <span class="token operator">=</span> <span class="token string">'1960-10-03'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set the DOB.</span><span class="token comment" spellcheck="true">// 'someDataAttr' in el.dataset === false</span>el<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>someDataAttr <span class="token operator">=</span> <span class="token string">'mydata'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'someDataAttr' in el.dataset === true</span></code></pre><h2 id="样式相关API"><a href="#样式相关API" class="headerlink" title="样式相关API"></a>样式相关API</h2><p><strong>1、直接修改元素的样式</strong></p><pre class=" language-js"><code class="language-js">elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>  elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'font-size'</span><span class="token punctuation">,</span> <span class="token string">'16px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">removeProperty</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p><strong>2、动态添加样式规则</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  style<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'body&amp;#123;color:red&amp;#125; #top:hover&amp;#123;background-color: red;color: white;&amp;#125;'</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p><strong>3、classList获取样式class</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// div is an object reference to a &lt;div> element with class="foo bar"</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"anotherclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// if visible is set remove it, otherwise add it</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">"visible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// add/remove visible, depending on test conditional, i less than 10</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">"visible"</span><span class="token punctuation">,</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// add or remove multiple classes</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"baz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"baz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// add or remove multiple classes using spread syntax</span><span class="token keyword">let</span> cls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span> div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">...</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// replace class "foo" with class "bar"</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>4、window.getComputedStyle</strong></p><p>通过 element.sytle.xxx 只能获取到内联样式，借助 window.getComputedStyle 可以获取应用到元素上的所有样式，IE8或更低版本不支持此方法。</p><pre><code>var style = window.getComputedStyle(element[, pseudoElt]);  </code></pre><h2 id="获取相关高度API"><a href="#获取相关高度API" class="headerlink" title="获取相关高度API"></a>获取相关高度API</h2><h3 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect"></a>getBoundingClientRect</h3><p>getBoundingClientRect 用来返回元素的大小以及相对于浏览器可视窗口的位置，用法如下：</p><pre><code>var clientRect = element.getBoundingClientRect();  </code></pre><p>clientRect是一个 DOMRect 对象，包含width、height、left、top、right、bottom，它是相对于窗口顶部而不是文档顶部，滚动页面时它们的值是会发生变化的。</p><h2 id="DOM交互事件"><a href="#DOM交互事件" class="headerlink" title="DOM交互事件"></a>DOM交互事件</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events">基本事件总结表</a></p><p><strong>当id中string中有数字，需要自己增加； 直接number++；（不用转换）</strong></p><p><strong>但是如果用number+=1/ number=number+1； 这样要praseInt（number）</strong></p><h2 id="DOM-事件监听程序"><a href="#DOM-事件监听程序" class="headerlink" title="DOM 事件监听程序"></a>DOM 事件监听程序</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">,</span> useCapture<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第一个参数是事件的类型（比如 “click” 或 “mousedown”）。</p><p><strong>(注意：事件名称前不加on; 使用内联onclick属性似乎只能传递自身而不能传递事件对象; 事件监听可以在一种事件上绑定多个方法)</strong></p><p>第二个参数是当事件发生时我们需要调用的函数。</p><p>第三个参数是布尔值，指定使用事件冒泡还是事件捕获。此参数是可选的。</p><p><strong>注意：</strong>请勿对事件使用 “on” 前缀；请使用 “click” 代替 “onclick”。</p><h3 id="添加单个或者多个监听"><a href="#添加单个或者多个监听" class="headerlink" title="添加单个或者多个监听"></a>添加单个或者多个监听</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//单个元素单个事件</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//单个元素</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> myFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> mySecondFunction<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//单个元素多个不同事件</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseover"</span><span class="token punctuation">,</span> myFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> mySecondFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseout"</span><span class="token punctuation">,</span> myThirdFunction<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//自定义</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> sometext<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//有参数</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="删除事件监听"><a href="#删除事件监听" class="headerlink" title="删除事件监听"></a>删除事件监听</h3><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> myFunction<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseover"</span><span class="token punctuation">,</span> myFunction<span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseover"</span><span class="token punctuation">,</span> myFunction<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"Moused over!&lt;br>"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="解除绑定不能写全函数"><a href="#解除绑定不能写全函数" class="headerlink" title="解除绑定不能写全函数"></a>解除绑定不能写全函数</h4><p>解除绑定事件的时候一定要用函数的句柄，把整个函数写上是无法解除绑定的。</p><p>错误写法：</p><pre class=" language-js"><code class="language-js">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>正确写法：btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>eventTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>eventOne<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>事件对象自动传递给回调函数 element.onclick = function(e){}; // e就是事件对象</p><p><strong>注意： 注意listener的对象， this 是指拥有listener的对象，但是event.target是当时的event</strong></p><h3 id="e的常见属性："><a href="#e的常见属性：" class="headerlink" title="e的常见属性："></a>e的常见属性：</h3><ul><li>e.target; //获取触发此事件的元素（不一定是绑定元素）（e.target.style.backgroundColor=””）</li><li>e.currentTarget //获取触发此事件的元素（一定是绑定元素）</li><li>e.offsetX ||e.offsetY ; //获取鼠标基于target元素内部的偏移x和y</li><li>e.clientX ||e.clientY ; //获取鼠标基于浏览器视窗的偏移x和y</li><li>e.keyCode ||e.which; //返回键盘上的字符的代码</li><li>事件回调中的this：指向事件的触发元素</li><li>—-如果事件处理函数的绑定在元素生成之前，则此元素不能绑定事件处理函数，需重新设置</li></ul><h3 id="target、this、currentTarget区别"><a href="#target、this、currentTarget区别" class="headerlink" title="target、this、currentTarget区别"></a>target、this、currentTarget区别</h3><blockquote><ul><li>先诉重点理论：</li><li>target:<strong>触发</strong>事件的某个具体对象，只会出现在事件流的目标阶段（谁触发谁命中，所以肯定是目标阶段）</li><li>currentTarget:<strong>绑定</strong>事件的对象，<strong>恒等于this</strong>，可能出现在事件流的任意一个阶段中</li><li>通常情况下terget和currentTarget是一致的，我们只要使用terget即可，但有一种情况必须区分这三者的关系，那就是在父子嵌套的关系中，父元素绑定了事件，单击了子元素（根据事件流，在不阻止事件流的前提下他会传递至父元素，导致父元素的事件处理函数执行），这时候currentTarget指向的是父元素，因为他是<strong>绑定事件的对象</strong>，而target指向了子元素，因为他是<strong>触发事件的那个具体对象</strong></li></ul></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">one<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//one - 函数对应的区域</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//three  - 多层套叠的时候，选中直接触发的区域</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//one</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="捕获-阻止捕获、冒泡-阻止冒泡"><a href="#捕获-阻止捕获、冒泡-阻止冒泡" class="headerlink" title="捕获/阻止捕获、冒泡/阻止冒泡"></a>捕获/阻止捕获、冒泡/阻止冒泡</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>DOM事件流</strong></p><p>这就要经过事件流，整个事件流分三个阶段：</p><ul><li>第一阶段是 捕获，事件从上（window）往下的过程；</li><li>第二阶段是 目标阶段，如点击某个目标元素，事件通过捕获到达目标元素，就是目标阶段；</li><li>第三个阶段是 冒泡，从目标元素再上传到window对象，就是冒泡的过程。</li></ul><p><img src="/2020/11/26/js-DOM/1606715897933.png"></p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token boolean">true</span><span class="token punctuation">:</span>时间捕捉 外入内<span class="token boolean">false</span><span class="token punctuation">:</span>事件冒泡 内到外 （默认）</code></pre><h3 id="事件冒泡例子（内到外）"><a href="#事件冒泡例子（内到外）" class="headerlink" title="事件冒泡例子（内到外）"></a>事件冒泡例子（内到外）</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>bubble<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        button&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #third&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>thin solid red<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #second&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>thin solid red<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #first&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>thin solid red<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>third<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>事件冒泡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><pre class=" language-js"><code class="language-js">        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="事件捕获例子（外到内）"><a href="#事件捕获例子（外到内）" class="headerlink" title="事件捕获例子（外到内）"></a>事件捕获例子（外到内）</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>bubble<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        button&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #third&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>thin solid red<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #second&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>thin solid red<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #first&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>thin solid red<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>third<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>事件冒泡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>stopPropagation()方法只能阻止事件的冒泡，而不能阻止事件捕获。</strong></p></blockquote><h3 id="阻止事件捕获"><a href="#阻止事件捕获" class="headerlink" title="阻止事件捕获"></a>阻止事件捕获</h3><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            event<span class="token punctuation">.</span><span class="token function">stopImmediatePropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="stopImmediatePropagation-和-stopPropagation-的区别"><a href="#stopImmediatePropagation-和-stopPropagation-的区别" class="headerlink" title="stopImmediatePropagation() 和 stopPropagation()的区别"></a>stopImmediatePropagation() 和 stopPropagation()的区别</h3><p>　　<strong>后者只会阻止冒泡或者是捕获。 但是前者除此之外还会阻止该元素的其他事件发生，但是后者就不会阻止其他事件的发生</strong></p><h2 id="js进行css操作"><a href="#js进行css操作" class="headerlink" title="js进行css操作"></a>js进行css操作</h2><h3 id="改变-HTML-样式"><a href="#改变-HTML-样式" class="headerlink" title="改变 HTML 样式"></a>改变 HTML 样式</h3><p>语法</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">style</span></code></pre><h3 id="1-直接设置style属性"><a href="#1-直接设置style属性" class="headerlink" title="1.直接设置style属性"></a>1.直接设置style属性</h3><pre class=" language-js"><code class="language-js"> element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'100px'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span> </code></pre><h3 id="2-直接设置属性"><a href="#2-直接设置属性" class="headerlink" title="2.直接设置属性"></a>2.直接设置属性</h3><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'100px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-使用setAttribute设置style属性"><a href="#3-使用setAttribute设置style属性" class="headerlink" title="3.使用setAttribute设置style属性"></a>3.使用setAttribute设置style属性</h3><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token string">'height: 100px !important'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-使用setProperty设置属性，通过第三个参数设置important"><a href="#4-使用setProperty设置属性，通过第三个参数设置important" class="headerlink" title="4.使用setProperty设置属性，通过第三个参数设置important"></a>4.使用setProperty设置属性，通过第三个参数设置important</h3><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'300px'</span><span class="token punctuation">,</span> <span class="token string">'important'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-设置cssText"><a href="#5-设置cssText" class="headerlink" title="5.设置cssText"></a>5.设置cssText</h3><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">'height: 100px !important'</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'height: 100px !important'</span><span class="token punctuation">;</span></code></pre><h3 id="6-改变class"><a href="#6-改变class" class="headerlink" title="6. 改变class"></a>6. 改变class</h3><p>比如JQ的更改class相关方法</p><p>因JS获取不到css的伪元素，所以可以通过改变伪元素父级的class来动态更改伪元素的样式</p><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span>className <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'blue fb'</span><span class="token punctuation">;</span></code></pre><h3 id="7-创建引入新的css样式文件"><a href="#7-创建引入新的css样式文件" class="headerlink" title="7. 创建引入新的css样式文件"></a>7. 创建引入新的css样式文件</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addNewStyle</span><span class="token punctuation">(</span>newStyle<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> styleElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'styles_js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>styleElement<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                styleElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                styleElement<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/css'</span><span class="token punctuation">;</span>                styleElement<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'styles_js'</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>styleElement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            styleElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>newStyle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">addNewStyle</span><span class="token punctuation">(</span><span class="token string">'.box &amp;#123;height: 100px !important;&amp;#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="8-使用addRule、insertRule"><a href="#8-使用addRule、insertRule" class="headerlink" title="8. 使用addRule、insertRule"></a>8. 使用addRule、insertRule</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在原有样式操作</span>        document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">,</span> <span class="token string">'height: 100px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insertRule</span><span class="token punctuation">(</span><span class="token string">'.box &amp;#123;height: 100px&amp;#125;'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 或者插入新样式时操作</span>        <span class="token keyword">var</span> styleEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            styleSheet <span class="token operator">=</span> styleEl<span class="token punctuation">.</span>sheet<span class="token punctuation">;</span>        styleSheet<span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">,</span> <span class="token string">'height: 100px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        styleSheet<span class="token punctuation">.</span><span class="token function">insertRule</span><span class="token punctuation">(</span><span class="token string">'.box &amp;#123;height: 100px&amp;#125;'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>styleEl<span class="token punctuation">)</span><span class="token punctuation">;</span>        </code></pre><h2 id="js-node操作"><a href="#js-node操作" class="headerlink" title="js node操作"></a>js node操作</h2><ul><li><strong>appenChild()</strong> - 接受一个节点对象作为参数，将其作为最后一个子节点，插入当前节点</li><li><strong>removeChild()</strong> - 接受一个子节点作为参数，用于从当前节点移除该节点</li><li><strong>replaceChild(new, old)</strong> - 将一个新的节点，替换当前节点的某一个子节点。它接受两个参数，第一个参数是用来替换的新节点，第二个参数将要被替换走的子节点</li><li><strong>hasChildNodes()</strong> - 返回一个布尔值，表示当前节点是否有子节点</li><li><strong>cloneNode()</strong> - 克隆一个节点。它接受一个布尔值作为参数，表示是否同时克隆子节点，默认是 false，即不克隆子节点</li><li><strong>insertBefore(new, old)</strong> - 将某个节点插入当前节点的指定位置。它接受两个参数，第一个参数是所要插入的节点，第二个参数是当前节点的一个子节点，新的节点将插在这个节点的前面</li><li><strong>contains()</strong> - 接受一个节点作为参数，返回一个布尔值，表示参数节点是否为当前节点的后代节点</li><li><strong>isEqualNode()</strong> - 返回一个布尔值，用于检查两个节点是否相等。所谓相等的节点，指的是两个节点的类型相同、属性相同、子节点相同</li></ul><h2 id="html-元素"><a href="#html-元素" class="headerlink" title="html 元素"></a>html 元素</h2><p>dataset属性，tabindex属性（遍历优先级），页面位置</p><h2 id="document"><a href="#document" class="headerlink" title="document"></a>document</h2><p><strong>document</strong> 节点是文档的根节点，有不同的办法可以获取，且都部署了 Document 接口:</p><ul><li>对于正常的网页，直接使用 document 或 window.document</li><li>对于 iframe 载入的网页，使用 iframe 节点的 contentDocument 属性</li><li>对 Ajax 操作返回的文档，使用 XMLHttpRequest 对象的 responseXML 属性</li><li>对于某个节点包含的文档，使用该节点的 ownerDocument 属性</li></ul><p>Document 属性</p><ul><li><strong>doctype</strong> - 包含了当前文档类型信息，对于 HTML5 文档，该节点就代表<!DOCTYPE html></li><li><strong>documentElement</strong> - 表示当前文档的根节点，即 html</li><li><strong>body</strong> - 返回当前文档的 body 节点</li><li><strong>head</strong> - 返回当前文档的 head 节点</li><li><strong>domain</strong> - 返回当前文档的域名</li><li><strong>lastModified</strong> - 返回当前文档最后修改的时间戳，格式为字符串</li><li><strong>location</strong> - 返回一个只读对象，提供了当前文档的 URL 信息，具体<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location">查看 MDN-location</a></li><li><strong>title</strong> - 返回当前文档的标题</li><li><strong>readyState</strong> - 表示页面的加载状态，可以在 <strong>readystatechange</strong> 中追踪页面的变化状态，可<a href="https://tate-young.github.io/2018/02/11/html-page-lifecycle.html">点击查看页面生命周期一节</a></li><li><strong>cookie</strong> - 返回当前网页的 cookie，可<a href="https://tate-young.github.io/2018/03/02/cookie.html">点击查看 cookie 一节</a></li></ul><p>以下属性返回文档内部特定元素的动态集合(HTMLCollection)，可配合 namedItem 使用:</p><ul><li><strong>anchors</strong> - 返回网页中所有指定了 name 属性的 a 节点元素</li><li><strong>forms</strong> - 返回页面中所有表单，即 form 标签</li><li><strong>images</strong> - 返回页面所有图片元素，即 img 标签</li><li><strong>links</strong> - 返回当前文档所有的链接元素，即具有 href 属性的元素，如 a 标签</li><li><strong>scripts</strong> - 返回当前文档的所有脚本，即 script 标签</li><li><strong>styleSheets</strong> - 返回一个类似数组的对象，包含了当前网页的所有样式表。该属性提供了样式表操作的接口</li></ul><h3 id="Document-方法"><a href="#Document-方法" class="headerlink" title="Document 方法"></a>Document 方法</h3><ul><li><strong>write()</strong> - open 方法新建一个文档；write 方法写入内容；close 方法关闭文档</li><li><strong>querySelector()</strong> - 返回第一个匹配指定的 CSS 选择器的元素节点</li><li><strong>querySelectorAll()</strong> - 返回所有匹配指定的 CSS 选择器的节点，返回的是 NodeList 类型的对象，静态集合</li><li><strong>getElementById()</strong> - 返回匹配指定 ID 属性的元素节点</li><li><strong>getElementsByClassName()</strong> - 返回一个类似数组的对象(HTMLCollection)，包括了所有 class 名字符合指定条件的元素，动态集合</li><li><strong>getElementsByTagName()</strong> - 返回一个类似数组的对象(HTMLCollection)，包括了所有指定标签的元素，动态集合</li><li><strong>getElementsByName()</strong> - 用于选择拥有 name 属性的 HTML 元素，返回的是 NodeList 类型的对象，静态集合</li></ul><p>以下方法用于生成<strong>元素节点</strong>:</p><ul><li><strong>createElement()</strong> - 生成 HTML 元素节点</li><li><strong>createTextNode()</strong> - 生成文本节点，参数为所要生成的文本节点的内容</li><li><strong>createAttribute()</strong> - 生成一个新的属性对象节点</li><li><strong>createEvent()</strong> - 生成一个事件对象，参数是事件类型，比如 UIEvents、MouseEvents、MutationEvents、HTMLEvents。IE 为 **createEventObject()**，不接受参数，返回通用 event 对象</li><li><strong>adoptNode()</strong> - 将某个节点，从其原来所在的文档移除，插入当前文档，并返回插入后的新节点</li><li><strong>importNode()</strong> - 用于创造一个外部节点的拷贝，然后插入当前文档。它的第一个参数是外部节点，第二个参数是一个布尔值，表示对外部节点是深拷贝还是浅拷贝，默认为 false 浅拷贝</li></ul><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><p><strong>Element</strong> 对象对应网页的 HTML 标签元素，元素节点的 nodeType 属性都是 1。</p><h3 id="Element-属性"><a href="#Element-属性" class="headerlink" title="Element 属性"></a>Element 属性</h3><ul><li><p><strong>id</strong> - 返回指定元素的 id 标识</p></li><li><p><strong>attributes</strong> - 返回一个类似数组的对象 NamedNodeMap，成员是当前元素节点的所有属性节点，动态集合</p></li><li><p><strong>tagName</strong> - 返回指定元素的大写的标签名，与 nodeName 属性的值相等</p></li><li><p><strong>innerHTML</strong> - 返回该元素包含的 HTML 代码，该属性可读写，常用来设置某个节点的内容</p></li><li><p><strong>outerHTML</strong> - 返回一个字符串，内容为指定元素的所有 HTML 代码，包括它自身和包含的所有子元素</p></li><li><p><strong>style</strong> - 用来操作 CSS 样式，如 element.style.backgroundColor 等</p></li><li><p><strong>className</strong> - 用来读取和设置当前元素的 class 属性。它的值是一个字符串，每个 class 之间用空格分割</p></li><li><p>classList</p></li></ul><p>  - 返回一个类似数组的对象 DOMTokenList，当前元素节点的每个 class 就是这个对象的一个成员</p><ul><li><strong>add()</strong> - 增加一个 class</li><li><strong>remove()</strong> - 移除一个 class</li><li><strong>contains()</strong> - 检查当前元素是否包含某个 class</li><li><strong>toggle()</strong> - 将某个 class 移入或移出当前元素，可以接受第二个布尔值参数，true 则添加该属性</li><li><strong>item()</strong> - 返回指定索引位置的 class</li><li><strong>toString()</strong> - 将 class 的列表转为字符</li></ul><p>获取 Element 节点相关的属性</p><ul><li><strong>children</strong> - 返回一个动态的 HTMLCollection 集合，由当前节点的所有 Element 子节点组成</li><li><strong>childElementCount</strong> - 返回当前节点的所有 Element 子节点的数目</li><li><strong>firstElementChild</strong> - 返回当前节点的第一个 Element 子节点，否则为 null；<strong>lastElementChild</strong> 返回最后一个子 Element 节点</li><li><strong>nextElementSibling</strong> - 返回指定元素的后一个同级元素，否则为 null；<strong>previousElementSibling</strong> 为前一个同级元素</li></ul><p>Element 位置信息</p><ul><li><strong>clientHeight</strong> - 返回元素节点的可见高度，包括 padding、但不包括水平滚动条、 border 和 margin 的高度；对应为 clientWidth</li><li><strong>clientLeft</strong> - 返回元素节点左 border 的宽度，单位为像素，包括垂直滚动条的宽度，不包括左侧的 margin 和 padding；</li><li><strong>clientTop</strong> - 返回网页元素顶部 border 的宽度，不包括顶部的 margin 和 padding</li><li><strong>scrollHeight</strong> - 返回指定元素的总高度，包括由于溢出而无法展示在网页的不可见部分，包括 padding，但不包括 border 和 margin；对应为 scrollWidth</li><li><strong>scrollLeft</strong> - 设置或返回水平滚动条向右侧滚动的像素数量。它的值等于元素的最左边与其可见的最左侧之间的距离</li><li><strong>scrollTop</strong> - 设置或返回垂直滚动条向下滚动的像素数量。它的值等于元素的顶部与其可见的最高位置之间的距离</li></ul><h3 id="Element-方法"><a href="#Element-方法" class="headerlink" title="Element 方法"></a>Element 方法</h3><ul><li><strong>hasAttribute()</strong> - 返回一个布尔值，表示当前元素节点是否包含指定的 HTML 属性</li><li><strong>getAttribute()</strong> - 返回当前元素节点的指定属性</li><li><strong>removeAttribute()</strong> - 从当前元素节点移除属性</li><li><strong>setAttribute()</strong> - 为当前元素节点新增属性，或编辑已存在的属性</li><li><strong>querySelector()</strong> - 同 Document 方法，包括 querySelectorAll()、getElementBy…()</li><li><strong>closest()</strong> - 返回当前元素节点的最接近的父元素(或者当前节点本身)</li><li><strong>matches()</strong> - 返回一个布尔值，表示当前元素是否匹配给定的 CSS 选择器</li><li><strong>remove()</strong> - 用于将当前元素节点从 DOM 树删除</li><li><strong>scrollIntoView()</strong> - 滚动当前元素，进入浏览器的可见区域，可以接受一个布尔值作为参数。默认为 true，表示元素的顶部与当前区域的可见部分的顶部对齐(前提是当前区域可滚动)；false 则为两者尾部对齐。</li></ul><h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><p>Text 节点代表 Element 节点和 Attribute 节点的文本内容，可以使用 Document 节点的 createTextNode 方法创造一个 Text 节点。通过 firstChild、nextSibling 等获取 Text 节点。</p><h3 id="Text-属性"><a href="#Text-属性" class="headerlink" title="Text 属性"></a>Text 属性</h3><ul><li><strong>data</strong> - 等同于 nodeValue 属性，用来设置或读取 Text 节点的内容</li><li><strong>wholeText</strong> - 将当前 Text 节点与毗邻的 Text 节点，作为一个整体返回。大多数情况下，wholeText 属性的返回值，与 data 属性和 textContent 属性相同</li><li><strong>length</strong> - 回当前 Text 节点的文本长度</li></ul><h3 id="Text-方法"><a href="#Text-方法" class="headerlink" title="Text 方法"></a>Text 方法</h3><ul><li><strong>appendData()</strong> - 在 Text 节点尾部追加字符串</li><li><strong>deleteData()</strong> - 删除 Text 节点内部的子字符串，第一个参数为子字符串位置，第二个参数为子字符串长度</li><li><strong>insertData()</strong> - 在 Text 节点插入字符串，第一个参数为插入位置，第二个参数为插入的子字符串</li><li><strong>replaceData()</strong> - 用于替换文本，第一个参数为替换开始位置，第二个参数为需要被替换掉的长度，第三个参数为新加入的字符串</li><li><strong>subStringData()</strong> - 用于获取子字符串，第一个参数为子字符串在 Text 节点中的开始位置，第二个参数为子字符串长度</li><li><strong>remove</strong> - 移除当前 Text 节点</li></ul><h3 id="返回当前节点的内容，几种方法的比较"><a href="#返回当前节点的内容，几种方法的比较" class="headerlink" title="返回当前节点的内容，几种方法的比较"></a>返回当前节点的内容，几种方法的比较</h3><ul><li><strong>nodeValue</strong> - 一般只用在 Text 类型节点，其他大部分节点一律返回 null</li><li><strong>textContent</strong> - 返回当前节点和它的所有后代节点的文本内容，会获取 display:none 的节点的文本，且不会理会 html 格式，直接输出不换行的文本</li><li><strong>innerText</strong> - 返回当前节点和它的所有后代节点的文本内容，会忽略 display:none 的节点的文本</li><li><strong>innerHTML</strong> - 返回该元素包含的 HTML 代码，该属性可读写，常用来设置某个节点的内容</li></ul><pre class=" language-HTML"><code class="language-HTML"><article>  <div id="div-01">Here is div-01    <div id="div-02">Here is div-02      <div id="div-03" style="display: none;">Here is div-03</div>    </div>  </div></article>var article = document.getElementsByTagName('article')[0];article.innerText;// "Here is div-01// Here is div-02"article.textContent;// "//   Here is div-01//     Here is div-02//       Here is div-03// "article.innerHTML;// "//   <div id="div-01">Here is div-01//     <div id="div-02">Here is div-02//       <div id="div-03" style="display: none;">Here is div-03</div>//     </div>//   </div>// "</code></pre><h1 id="DOM实例"><a href="#DOM实例" class="headerlink" title="DOM实例"></a>DOM实例</h1><h2 id="例子集合"><a href="#例子集合" class="headerlink" title="例子集合"></a><a href="https://www.runoob.com/js/js-ex-dom.html">例子集合</a></h2><h2 id="查找集合"><a href="#查找集合" class="headerlink" title="查找集合"></a><a href="https://juejin.cn/post/6844903888886185998#heading-17">查找集合</a></h2><h2 id="多个监听事件覆盖"><a href="#多个监听事件覆盖" class="headerlink" title="多个监听事件覆盖"></a>多个监听事件覆盖</h2><p>当同一个对象使用.onclick的写法触发多个方法的时候，后一个方法会把前一个方法覆盖掉，也就是说，在对象的onclick事件发生时，只会执行最后绑定的方法。而用事件监听则不会有覆盖的现象，每个绑定的事件都会被执行。如下：</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"yuanEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"第一个事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"第二个事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"第三个事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>最后只输出：第三个事件，因为后一个方法都把前一个方法覆盖掉了。<br>原生态的事件绑定函数addEventListener：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> eventOne <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"第一个监听事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">eventTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"第二个监听事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"yuanEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//addEventListener：绑定函数</span> btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>eventOne<span class="token punctuation">)</span><span class="token punctuation">;</span> btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>eventTwo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出：第一个监听事件 和 第二个监听事件</p><h2 id="一次性事件绑定-执行中松绑"><a href="#一次性事件绑定-执行中松绑" class="headerlink" title="一次性事件绑定(执行中松绑)"></a>一次性事件绑定(执行中松绑)</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// create a one-time event</span><span class="token keyword">function</span> <span class="token function">onetime</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// create event</span>    node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// remove event</span>        e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">,</span> arguments<span class="token punctuation">.</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// call handler</span>        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">removeEvenListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="批量绑定事件-js"><a href="#批量绑定事件-js" class="headerlink" title="批量绑定事件 js"></a>批量绑定事件 js</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> list_obj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//var list_obj = document.getElementsByTagName('li'); </span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> list_obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          list_obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  </code></pre><p><strong>易错点</strong>  </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> list_obj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> list_obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          list_obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当onclick事件发生的时候，会向上找到i对象的值。这个时候，由于已经循环完毕（编译），所以i的值是5</span><span class="token comment" spellcheck="true">//所以注意闭包</span></code></pre><p><strong>解决办法</strong></p><ol><li>let是块作用域，而var是函数或者全局作用域</li><li>利用闭包</li></ol><pre class=" language-js"><code class="language-js">list_obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//return function()&amp;#123; alert(i);&amp;#125;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> </code></pre><h2 id="控制网页前进和后退（历史页面）"><a href="#控制网页前进和后退（历史页面）" class="headerlink" title="控制网页前进和后退（历史页面）"></a>控制网页前进和后退（历史页面）</h2><p>这个前进后退按钮是需要在特定环境下才有效果的，即你需要从另一个页面进入到这个页面后，点击这个后退按钮才有后退的效果，否则是没有的。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>后退<span class="token punctuation">"</span></span> <span class="token attr-name">οnclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:history.go(-1);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>前进<span class="token punctuation">"</span></span> <span class="token attr-name">οnclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:history.go(1);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="无刷新更改URL"><a href="#无刷新更改URL" class="headerlink" title="无刷新更改URL"></a>无刷新更改URL</h2><p>data是你要存放的数据，可以使用history.state获取，title是标题，为空则不改变，url是新url</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span>json<span class="token punctuation">,</span>title<span class="token punctuation">:</span>string<span class="token punctuation">,</span>url<span class="token punctuation">:</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会存储在url历史中</span>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span>json<span class="token punctuation">,</span>title<span class="token punctuation">:</span>string<span class="token punctuation">,</span>url<span class="token punctuation">:</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不会存储。。。</span></code></pre><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><p>用来控制页面跳转</p><pre class=" language-html"><code class="language-html">location.replace("xx"); //跳转location.href = 'xxxx'; //同上location.reload(); //刷新页面</code></pre><h2 id="定时器-requestAnimationFrame"><a href="#定时器-requestAnimationFrame" class="headerlink" title="定时器 - requestAnimationFrame"></a>定时器 - requestAnimationFrame</h2><p><code>requestAnimationFrame</code>是由浏览器专门为动画提供的API，在运行时浏览器会自动优化方法的调用</p><p><code>setInterval</code>在执行完一次代码之后，经过了那个固定的时间间隔，它还会<strong>自动重复</strong>执行代码，而<code>setTimeout</code><strong>只执行一次</strong>那段代码。(问题就是不精确)</p><p>requestAnimationFrame采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使用动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>callback<span class="token operator">/</span><span class="token keyword">function</span><span class="token punctuation">,</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//每隔ms毫秒执行一次函数（回调函数只写函数名）</span><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token operator">/</span><span class="token keyword">function</span><span class="token punctuation">,</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在ms毫秒后执行一次函数</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清理掉setInterval定时器</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//让setTimeout定时器失效</span><span class="token comment" spellcheck="true">//对比：</span><span class="token comment" spellcheck="true">//设置timer</span>window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>callBack<span class="token operator">/</span><span class="token keyword">function</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//专门为动画设置的定时器（效果比setInterval流畅，每秒执行60次，大部分浏览器中，每秒执行次数和显示器刷新率一致）</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取消</span><span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以直接使用返回值取消</span><span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://www.cnblogs.com/xiaohuochai/p/5777757.html"><strong>实际例子</strong></a></p><h2 id="滚动动态加载内容"><a href="#滚动动态加载内容" class="headerlink" title="滚动动态加载内容"></a>滚动动态加载内容</h2><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 页面滚动事件（一般加给window）</span>    <span class="token comment" spellcheck="true">// 页面被卷起来的高度距离顶部或底部的距离</span>    <span class="token keyword">var</span> juan <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取页面被卷起来的高度，documentElement相当于html标签</span>    <span class="token keyword">var</span> total <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取页面总高度</span>    <span class="token keyword">var</span> visul <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取可见区的高度（即浏览器显示出来的高度）</span>    <span class="token keyword">var</span> bot <span class="token operator">=</span> total <span class="token operator">-</span> juan <span class="token operator">-</span> visul<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// bot就是可见区下面的高度（这是我们需要的）</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 当bot小于某值时，加载新元素</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><a href="https://www.cnblogs.com/xiaohuochai/p/5294409.html">详细讲解1</a></p><p><a href="https://www.cnblogs.com/xiaohuochai/p/5831640.html">详细讲解2</a></p><h2 id="右键点击事件"><a href="#右键点击事件" class="headerlink" title="右键点击事件"></a>右键点击事件</h2><p>oncontextmenu</p><h2 id="表单绑定事件的触发"><a href="#表单绑定事件的触发" class="headerlink" title="表单绑定事件的触发"></a>表单绑定事件的触发</h2><ul><li>onkeydown // 按下按键时立即触发，该事件一般绑定在document/window上，因为即使被绑定的表单没有获得焦点，该事件也会执行</li><li>onkeypress // 按下按键时立即触发，只有被绑定的元素获得焦点了，才会执行事件（适用于动态search）</li><li>onchange // 表单值改变时执行，按下按键时不是立即触发，而是等到输入完毕时才会触发（输入完毕指的是按下回车或表单失去焦点）</li><li>oninput // 表单值改变时立即触发</li></ul><h2 id="动画事件"><a href="#动画事件" class="headerlink" title="动画事件"></a>动画事件</h2><ul><li>animationend 该事件在 CSS 动画结束播放时触发</li><li>animationiteration 该事件在 CSS 动画重复播放时触发</li><li>animationstart 该事件在 CSS 动画开始播放时触发</li><li>transitionend 该事件在 CSS 完成过渡后触发</li></ul><h2 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h2><p>建立onclick事件方法，加入var ev=window.event; ev.preventDefault();</p><p>阻止a标签的默认事件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h1 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h1><p><a href="https://www.cnblogs.com/xiaohuochai/p/5777757.html">https://www.cnblogs.com/xiaohuochai/p/5777757.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js object</title>
      <link href="2020/11/26/js-object/"/>
      <url>2020/11/26/js-object/</url>
      
        <content type="html"><![CDATA[<h1 id="对象基本操作"><a href="#对象基本操作" class="headerlink" title="对象基本操作"></a>对象基本操作</h1><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><h3 id="基本生成办法（直接生成obj）"><a href="#基本生成办法（直接生成obj）" class="headerlink" title="基本生成办法（直接生成obj）"></a>基本生成办法（直接生成obj）</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  foo<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span>  <span class="token string">'h w'</span><span class="token punctuation">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">,</span>  <span class="token string">'p+q'</span><span class="token punctuation">:</span> <span class="token string">'Hello World'</span>，  m<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>  <span class="token number">3.2</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>  <span class="token number">1e2</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token number">1e-2</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token number">234</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token number">0xFF</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Object &amp;#123;</span><span class="token comment" spellcheck="true">//   1: "a",</span><span class="token comment" spellcheck="true">//   3.2: "b",</span><span class="token comment" spellcheck="true">//   100: true,</span><span class="token comment" spellcheck="true">//   0.01: true,</span><span class="token comment" spellcheck="true">//   0.234: true,</span><span class="token comment" spellcheck="true">//   255: true</span><span class="token comment" spellcheck="true">// &amp;#125;</span>obj<span class="token punctuation">[</span><span class="token string">'100'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// true</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> age<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">"dfghjkl"</span><span class="token punctuation">;</span><span class="token keyword">var</span> sex<span class="token operator">=</span><span class="token string">"male"</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> age<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="constructor（用构造函数-new生成对象）"><a href="#constructor（用构造函数-new生成对象）" class="headerlink" title="constructor（用构造函数+new生成对象）"></a>constructor（用构造函数+new生成对象）</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//构造函数</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> age<span class="token punctuation">,</span> eye<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> first<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> last<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>eyeColor <span class="token operator">=</span> eye<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>changeName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化</span><span class="token keyword">var</span> myFather <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> myMother <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Sally"</span><span class="token punctuation">,</span> <span class="token string">"Rally"</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Only change code below this line</span>Dog<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  numLegs<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  eat<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"nom nom nom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  describe<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"My name is "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  foo<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  bar<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>foo  <span class="token comment" spellcheck="true">// 1</span>obj<span class="token punctuation">[</span>foo<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 2</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token number">0.7</span><span class="token punctuation">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">,</span>  <span class="token number">123</span><span class="token punctuation">:</span> <span class="token string">'this is 123'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token string">'0.7'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// "Hello World"</span>obj<span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// "Hello World"</span>obj<span class="token number">.123</span> <span class="token comment" spellcheck="true">// 报错</span>obj<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// "this is 123"</span></code></pre><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token string">'bar'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></code></pre><h2 id="查看obj内属性，验证obj是否有某属性"><a href="#查看obj内属性，验证obj是否有某属性" class="headerlink" title="查看obj内属性，验证obj是否有某属性"></a>查看obj内属性，验证obj是否有某属性</h2><p><code>Object.keys</code>方法和<code>Object.getOwnPropertyNames</code>方法都用来遍历对象的属性。</p><p><code>Object.hasOwnProperty(Property)</code>确定是否含有对应属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  key1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  key2<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ['key1', 'key2']</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ['key1', 'key2']</span>Object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token function">Boolean</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key1<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="验证obj的原型链"><a href="#验证obj的原型链" class="headerlink" title="验证obj的原型链"></a>验证obj的原型链</h2><p><strong>instanceof</strong> <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链</p><pre class=" language-js"><code class="language-js">object <span class="token keyword">instanceof</span> <span class="token class-name">constructor</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> make<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> auto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'Honda'</span><span class="token punctuation">,</span> <span class="token string">'Accord'</span><span class="token punctuation">,</span> <span class="token number">1998</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>auto <span class="token keyword">instanceof</span> <span class="token class-name">Car</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>auto <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: true</span></code></pre><h2 id="删除obj属性"><a href="#删除obj属性" class="headerlink" title="删除obj属性"></a>删除obj属性</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> p<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["p"]</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">// true</span>obj<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">// undefined</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// []</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>p12 <span class="token comment" spellcheck="true">// true</span><span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  value<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">// 123</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">// false</span></code></pre><blockquote><p>删除一个不存在的属性，<code>delete</code>不报错，而且返回<code>true</code></p><p><code>delete</code>命令会返回<code>false</code>，那就是该属性存在，且不得删除。</p><p><code>delete</code>命令只能删除对象本身的属性，无法删除继承的属性</p></blockquote><h2 id="增加属性和方法"><a href="#增加属性和方法" class="headerlink" title="增加属性和方法"></a>增加属性和方法</h2><h3 id="增加constructor的办法"><a href="#增加constructor的办法" class="headerlink" title="增加constructor的办法"></a>增加constructor的办法</h3><p> prototype 属性允许您为对象构造器添加新属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> age<span class="token punctuation">,</span> eyecolor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eyeColor <span class="token operator">=</span> eyecolor<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>nationality <span class="token operator">=</span> <span class="token string">"English"</span><span class="token punctuation">;</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> age<span class="token punctuation">,</span> eye<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> first<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> last<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>eyeColor <span class="token operator">=</span> eye<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> myFriend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Bill"</span><span class="token punctuation">,</span> <span class="token string">"Gates"</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span><span class="token string">"My friend is "</span> <span class="token operator">+</span> myFriend<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="增加单个的object的办法"><a href="#增加单个的object的办法" class="headerlink" title="增加单个的object的办法"></a>增加单个的object的办法</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Constructor function for Person objects</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> age<span class="token punctuation">,</span> eye<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> first<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> last<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>eyeColor <span class="token operator">=</span> eye<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create 2 Person objects</span><span class="token keyword">var</span> myFather <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Add a name method to first object</span>myFather<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="属性是否存在-in运算符"><a href="#属性是否存在-in运算符" class="headerlink" title="属性是否存在 in运算符"></a>属性是否存在 in运算符</h2><p>属性 in obj</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> p<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">'p'</span> <span class="token keyword">in</span> obj <span class="token comment" spellcheck="true">// true</span><span class="token string">'toString'</span> <span class="token keyword">in</span> obj <span class="token comment" spellcheck="true">// true</span></code></pre><p><code>in</code>运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的。就像上面代码中，对象<code>obj</code>本身并没有<code>toString</code>属性，但是<code>in</code>运算符会返回<code>true</code>，因为这个属性是继承的。</p><p>这时，可以使用对象的<code>hasOwnProperty</code>方法判断一下，是否为对象自身的属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'toString'</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="属性的遍历：for…in-循环"><a href="#属性的遍历：for…in-循环" class="headerlink" title="属性的遍历：for…in 循环"></a>属性的遍历：for…in 循环</h2><ul><li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li><li>它不仅遍历对象自身的属性，还遍历继承的属性。</li><li><strong>注意： 不能用 for … of</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'键名：'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'键值：'</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 键名： a</span><span class="token comment" spellcheck="true">// 键值： 1</span><span class="token comment" spellcheck="true">// 键名： b</span><span class="token comment" spellcheck="true">// 键值： 2</span><span class="token comment" spellcheck="true">// 键名： c</span><span class="token comment" spellcheck="true">// 键值： 3</span></code></pre><h2 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h2><p>格式如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">with</span> <span class="token punctuation">(</span>对象<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  语句<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 例一</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  p1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  p2<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  p1 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  p2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span>obj<span class="token punctuation">.</span>p1 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>p2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 例二</span><span class="token keyword">with</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>links<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>links<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>links<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>links<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><code>with</code>区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  p1 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  p2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>p1 <span class="token comment" spellcheck="true">// undefined</span>p1 <span class="token comment" spellcheck="true">// 4</span></code></pre><h2 id="额外的object静态方法"><a href="#额外的object静态方法" class="headerlink" title="额外的object静态方法"></a>额外的object<a href="https://wangdoc.com/javascript/stdlib/attributes.html">静态方法</a></h2><p>（1）对象属性模型的相关方法</p><ul><li><code>Object.getOwnPropertyDescriptor()</code>：获取某个属性的描述对象。</li><li><code>Object.defineProperty()</code>：通过描述对象，定义某个属性。</li><li><code>Object.defineProperties()</code>：通过描述对象，定义多个属性。</li></ul><p>（ 2）控制对象状态的方法</p><ul><li><code>Object.preventExtensions()</code>：防止对象扩展。</li><li><code>Object.isExtensible()</code>：判断对象是否可扩展。</li><li><code>Object.seal()</code>：禁止对象配置。</li><li><code>Object.isSealed()</code>：判断一个对象是否可配置。</li><li><code>Object.freeze()</code>：冻结一个对象。</li><li><code>Object.isFrozen()</code>：判断一个对象是否被冻结。</li></ul><p><strong>（3）原型链相关方法</strong></p><ul><li><code>Object.create()</code>：该方法可以指定原型对象和属性，返回一个新的对象。</li><li><code>Object.getPrototypeOf()</code>：获取对象的<code>Prototype</code>对象。</li></ul><h2 id="实例对象方法-Object-prototype"><a href="#实例对象方法-Object-prototype" class="headerlink" title="实例对象方法 - Object.prototype"></a>实例对象方法 - Object.prototype</h2><ul><li><code>Object.prototype.valueOf()</code>：返回当前对象对应的值。</li><li><code>Object.prototype.toString()</code>：返回当前对象对应的字符串形式。</li><li><code>Object.prototype.toLocaleString()</code>：返回当前对象对应的本地字符串形式。</li><li><code>Object.prototype.hasOwnProperty()</code>：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。</li><li><code>Object.prototype.isPrototypeOf()</code>：判断当前对象是否为另一个对象的原型。</li><li><code>Object.prototype.propertyIsEnumerable()</code>：判断某个属性是否可枚举。</li></ul><p>Reference:</p><ol><li><a href="https://wangdoc.com/javascript/types/object.html#%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95">https://wangdoc.com/javascript/types/object.html#%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95</a></li><li><a href="https://wangdoc.com/javascript/stdlib/object.html#object-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">https://wangdoc.com/javascript/stdlib/object.html#object-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0</a></li></ol><h1 id="练习例子"><a href="#练习例子" class="headerlink" title="练习例子"></a>练习例子</h1><h2 id="从超类型继承行为"><a href="#从超类型继承行为" class="headerlink" title="从超类型继承行为"></a>从超类型继承行为</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"nom nom nom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有缺点所以不用</span><span class="token keyword">let</span> animal <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Object.create(obj)</code>创建一个新对象，并将其设置<code>obj</code>为新对象的<code>prototype</code>。回想一下，<code>prototype</code>就像创建对象的“配方”一样。通过将<code>prototype</code>of设置<code>animal</code>为<code>Animal&#39;s</code> <code>prototype</code>，您可以有效地给该<code>animal</code>实例与的任何其他实例相同的“配方” <code>Animal</code>。</p><pre class=" language-js"><code class="language-js">animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints "nom nom nom"</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span></code></pre><h2 id="将子代的原型设置为父代的实例-（2层继承的函数）"><a href="#将子代的原型设置为父代的实例-（2层继承的函数）" class="headerlink" title="将子代的原型设置为父代的实例 （2层继承的函数）"></a>将子代的原型设置为父代的实例 （2层继承的函数）</h2><h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Animal<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  constructor<span class="token punctuation">:</span> Animal<span class="token punctuation">,</span>  eat<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"nom nom nom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Only change code below this line</span>Dog<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> beagle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"nom nom nom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Bird<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个要最前面 注意是create！！！</span>Bird<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Bird<span class="token punctuation">;</span>Bird<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fly <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm flying!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>duck<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints "nom nom nom"</span>duck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints "I'm flying!</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>firstAndLast<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Only change code below this line</span>  <span class="token comment" spellcheck="true">// Complete the method below and implement the others similarly</span>  <span class="token keyword">var</span> firstName<span class="token operator">=</span>firstAndLast<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> lastName<span class="token operator">=</span>firstAndLast<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> fullName<span class="token operator">=</span>firstAndLast<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>setFullName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nameStr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr<span class="token operator">=</span>nameStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     fullName<span class="token operator">=</span>nameStr<span class="token punctuation">;</span>    firstName<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    lastName<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>setFirstName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nameStr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     firstName<span class="token operator">=</span>nameStr<span class="token punctuation">;</span>     fullName<span class="token operator">=</span>firstName<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>lastName<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>setLastName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nameStr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     lastName<span class="token operator">=</span>nameStr<span class="token punctuation">;</span>     fullName<span class="token operator">=</span>firstName<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>lastName<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getFullName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstName<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fullName<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getFirstName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> firstName<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>getLastName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> lastName<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> bob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Bob Ross'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bob<span class="token punctuation">.</span><span class="token function">setFullName</span><span class="token punctuation">(</span><span class="token string">"Haskell Curry"</span><span class="token punctuation">)</span>bob<span class="token punctuation">.</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bob<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="重写继承下来的方法"><a href="#重写继承下来的方法" class="headerlink" title="重写继承下来的方法"></a>重写继承下来的方法</h2><pre class=" language-js"><code class="language-js">ChildObject<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ParentObject<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继承</span></code></pre><pre class=" language-js"><code class="language-js">ChildObject<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>methodName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变                                          </span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"nom nom nom"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Inherit all methods from Animal</span>Bird<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Bird.eat() overrides Animal.eat()</span>Bird<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"peck peck peck"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>JavaScript在<code>duck’s</code> <code>prototype</code>链上查找方法的方式：</p><ol><li>duck=&gt;在这里定义了eat（）吗？没有。</li><li>bird=&gt;在这里定义了eat（）吗？=&gt;是的。执行它并停止搜索。</li><li>还定义了Animal =&gt; eat（），但是JavaScript在达到此级别之前停止搜索。</li><li>Object =&gt; JavaScript在达到此级别之前已停止搜索。</li></ol><h2 id="重置继承的构造方法属性"><a href="#重置继承的构造方法属性" class="headerlink" title="重置继承的构造方法属性"></a>重置继承的构造方法属性</h2><p>当一个对象<code>prototype</code>从另一个对象继承其对象时，它还将继承超类型的构造函数属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Bird<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>duck<span class="token punctuation">.</span>constructor <span class="token comment" spellcheck="true">// function Animal()&amp;#123;...&amp;#125;</span></code></pre><p>但是<code>duck</code>和的所有实例<code>Bird</code>都应表明它们是由<code>Bird</code>和不是构造的<code>Animal</code>。为此，您可以手动将<code>Bird&#39;s</code>构造函数属性设置为该<code>Bird</code>对象：</p><pre class=" language-js"><code class="language-js">Bird<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Bird<span class="token punctuation">;</span>duck<span class="token punctuation">.</span>constructor <span class="token comment" spellcheck="true">// function Bird()&amp;#123;...&amp;#125;</span></code></pre><p>修改代码，<code>duck.constructor</code>然后<code>beagle.constructor</code>返回它们各自的构造函数。</p><h2 id="使用Mixin在不相关的对象之间添加通用行为"><a href="#使用Mixin在不相关的对象之间添加通用行为" class="headerlink" title="使用Mixin在不相关的对象之间添加通用行为"></a>使用Mixin在不相关的对象之间添加通用行为</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> bird <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">"Donald"</span><span class="token punctuation">,</span>  numLegs<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> boat <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">"Warrior"</span><span class="token punctuation">,</span>  type<span class="token punctuation">:</span> <span class="token string">"race-boat"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此处创建办法</span><span class="token keyword">let</span> glideMixin  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>glide <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Flying, wooosh!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">glideMixin</span><span class="token punctuation">(</span>bird<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints "Flying, wooosh!"</span><span class="token function">glideMixin</span><span class="token punctuation">(</span>boat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints "Flying, wooosh!"</span></code></pre><h2 id="创建模块-利用立马执行函数"><a href="#创建模块-利用立马执行函数" class="headerlink" title="创建模块-利用立马执行函数"></a>创建模块-利用立马执行函数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> motionModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    glideMixin<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>glide <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Gliding on the water"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    flyMixin<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>fly <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Flying, wooosh!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// The two parentheses cause the function to be immediately invoked</span><span class="token comment" spellcheck="true">//////////////////////////////////////////////////////////</span>motionModule<span class="token punctuation">.</span><span class="token function">glideMixin</span><span class="token punctuation">(</span>duck<span class="token punctuation">)</span><span class="token punctuation">;</span>duck<span class="token punctuation">.</span><span class="token function">glide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="查看obj-array中-每个obj是否都存有有效的属性（-NaN-undefined-）"><a href="#查看obj-array中-每个obj是否都存有有效的属性（-NaN-undefined-）" class="headerlink" title="查看obj array中 每个obj是否都存有有效的属性（ NaN undefined ）"></a>查看obj array中 每个obj是否都存有有效的属性（ NaN undefined ）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">truthCheck</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> pre<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Is everyone being true?</span>  <span class="token keyword">return</span> collection<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>obj <span class="token operator">=</span><span class="token operator">></span> obj<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">truthCheck</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"single"</span><span class="token punctuation">:</span> <span class="token string">"double"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"single"</span><span class="token punctuation">:</span> <span class="token number">NaN</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"single"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">truthCheck</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> pre<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> collection<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="obj复制并且更改属性"><a href="#obj复制并且更改属性" class="headerlink" title="obj复制并且更改属性"></a>obj复制并且更改属性</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span>obj1<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;#123;a:1,b:2,c:[1,2,3]&amp;#125;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span>obj1<span class="token punctuation">,</span>location<span class="token punctuation">:</span><span class="token string">'china'</span><span class="token punctuation">,</span>a<span class="token punctuation">:</span><span class="token number">200</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加属性+更新a属性 </span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js arrowFunction 箭头函数</title>
      <link href="2020/11/26/js-arrowFunction/"/>
      <url>2020/11/26/js-arrowFunction/</url>
      
        <content type="html"><![CDATA[<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><h2 id="1-代码块只有一条语句时，不使用大括号"><a href="#1-代码块只有一条语句时，不使用大括号" class="headerlink" title="1. 代码块只有一条语句时，不使用大括号"></a>1. 代码块只有一条语句时，不使用大括号</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num1 <span class="token operator">+</span> num2 </code></pre><ul><li>同样的写法</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>等同于</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>简化判断</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//自行判断，满足条件返回true，不满足条件返回false</span><span class="token keyword">const</span> isAdult <span class="token operator">=</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> age<span class="token operator">>=</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">const</span> canDrink <span class="token operator">=</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> age<span class="token operator">>=</span><span class="token number">21</span><span class="token punctuation">;</span><span class="token function">isAdult</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token function">canDrink</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><h2 id="2-如果有多条语句，使用大括号，同时使用return-否则没有返回值"><a href="#2-如果有多条语句，使用大括号，同时使用return-否则没有返回值" class="headerlink" title="2. 如果有多条语句，使用大括号，同时使用return(否则没有返回值)"></a>2. 如果有多条语句，使用大括号，同时使用return(否则没有返回值)</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="3-使用箭头函数返回对象"><a href="#3-使用箭头函数返回对象" class="headerlink" title="3. 使用箭头函数返回对象"></a>3. 使用箭头函数返回对象</h2><p>必须在对象外面加上括号，否则就只是个代码块，从而就不会返回对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><ul><li>等同于</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'a'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="4-箭头函数和普通函数明显的区别"><a href="#4-箭头函数和普通函数明显的区别" class="headerlink" title="4.箭头函数和普通函数明显的区别"></a>4.箭头函数和普通函数明显的区别</h2><p>箭头函数内部的<code>this</code>是词法作用域，由上下文确定。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    birth<span class="token punctuation">:</span> <span class="token number">1990</span><span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1990</span>        <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this指向window或undefined</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为这里call</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    birth<span class="token punctuation">:</span> <span class="token number">1990</span><span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里是obj</span>        <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this指向obj对象，跟上面的一样</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 26，箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj1</span></code></pre><blockquote><p>不能用arguments，但是可以用参数以及参数解构</p></blockquote><h2 id="5-创建立即执行函数表达式"><a href="#5-创建立即执行函数表达式" class="headerlink" title="5.创建立即执行函数表达式"></a>5.创建立即执行函数表达式</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    getName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'Nicholas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas"</span><span class="token comment" spellcheck="true">// 实际上相当于：</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    getName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token string">'Nicholas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas"</span></code></pre><h2 id="6-不能与new一起用"><a href="#6-不能与new一起用" class="headerlink" title="6.不能与new一起用"></a>6.不能与new一起用</h2><p>箭头函数缺少正常函数所以拥有的 <code>prototype</code> 属性，它的设计初衷是“即用即弃”，所有不能用它定义新的类型。如果尝试通过 <code>new</code> 关键字调用箭头函数，会报错，就像这样：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> MyType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误，不可以通过 new 关键字抵用箭头函数</span></code></pre><h2 id="7-什么时候不要用箭头函数"><a href="#7-什么时候不要用箭头函数" class="headerlink" title="7.什么时候不要用箭头函数"></a>7.什么时候不要用箭头函数</h2><ul><li>不能作为构造函数，不可以实例化</li></ul><p><a href="https://segmentfault.com/a/1190000007074846">详细解释</a></p><p>Reference：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 模块化编程</title>
      <link href="2020/11/26/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
      <url>2020/11/26/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="JS模块写法"><a href="#JS模块写法" class="headerlink" title="JS模块写法"></a>JS模块写法</h1><h2 id="一般写法"><a href="#一般写法" class="headerlink" title="一般写法"></a>一般写法</h2><pre class=" language-js"><code class="language-js">　<span class="token keyword">function</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token comment" spellcheck="true">//...</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token keyword">function</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token comment" spellcheck="true">//...</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>缺点：”污染”了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系。</p><h2 id="对象写法"><a href="#对象写法" class="headerlink" title="对象写法"></a>对象写法</h2><pre class=" language-js"><code class="language-js">　　<span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　_count <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>　　　　m1 <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token comment" spellcheck="true">//...</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>　　　　m2 <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token comment" spellcheck="true">//...</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>缺点：写法会暴露所有模块成员，内部状态可以被外部改写（对象私有属性会被改）</p><h2 id="立即执行函数写法-Immediately-Invoked-Function-Expression，IIFE（不算做严谨闭包）"><a href="#立即执行函数写法-Immediately-Invoked-Function-Expression，IIFE（不算做严谨闭包）" class="headerlink" title="立即执行函数写法-Immediately-Invoked Function Expression，IIFE（不算做严谨闭包）"></a>立即执行函数写法-Immediately-Invoked Function Expression，IIFE（不算做严谨闭包）</h2><p>达到不暴露私有成员的目的</p><p>是为了形成块级作用域，不污染全局。常用的写法有：</p><ul><li>(function(形参){函数体})(实参)</li><li>(function(形参){函数体}(实参))</li><li>!function(形参){函数体}(实参)</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* code */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* code */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>甚至像下面这样写，也是可以的。</p><pre class=" language-js"><code class="language-js"><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* code */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">~</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* code */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* code */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* code */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">　　<span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> _count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> m1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token comment" spellcheck="true">//...</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> m2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token comment" spellcheck="true">//...</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　<span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　m1 <span class="token punctuation">:</span> m1<span class="token punctuation">,</span>　　　　　　m2 <span class="token punctuation">:</span> m2　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>module1<span class="token punctuation">.</span>_count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span></code></pre><h2 id="放大模式"><a href="#放大模式" class="headerlink" title="放大模式"></a>放大模式</h2><pre class=" language-js"><code class="language-js">　　<span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　mod<span class="token punctuation">.</span>m3 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token comment" spellcheck="true">//...</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　<span class="token keyword">return</span> mod<span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>module1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="宽放大模式（Loose-augmentation）"><a href="#宽放大模式（Loose-augmentation）" class="headerlink" title="宽放大模式（Loose augmentation）"></a>宽放大模式（Loose augmentation）</h2><pre class=" language-js"><code class="language-js">　<span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token comment" spellcheck="true">//...</span>　　　　<span class="token keyword">return</span> mod<span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>module1 <span class="token operator">||</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>与”放大模式”相比，＂宽放大模式＂就是”立即执行函数”的参数可以是空对象。</p><h2 id="输入全局变量"><a href="#输入全局变量" class="headerlink" title="输入全局变量"></a>输入全局变量</h2><p>独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。</p><p>为了在模块内部调用全局变量，必须显式地将其他变量输入模块。</p><pre class=" language-js"><code class="language-js">　　<span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">,</span> YAHOO<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token comment" spellcheck="true">//...</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">,</span> YAHOO<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步(或者同步)任务中，只要使用了回调函<br>数，实际上就是在使用闭包!<br>定时器闭包案例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">wait</span><span class="token punctuation">(</span> <span class="token string">"Hello, closure!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>事件监听闭包案例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">setupBot</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> selector<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">activator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Activating: "</span> <span class="token operator">+</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">setupBot</span><span class="token punctuation">(</span> <span class="token string">"Closure Bot 1"</span><span class="token punctuation">,</span> <span class="token string">"#bot_1"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setupBot</span><span class="token punctuation">(</span> <span class="token string">"Closure Bot 2"</span><span class="token punctuation">,</span> <span class="token string">"#bot_2"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的案例中，有个相同的特点：先定义函数，后执行函数时能够调用到函数中的私有变量或者实参。这便是闭包的特点吧</p><h2 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Un-curried function</span><span class="token keyword">function</span> <span class="token function">unCurried</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Curried function</span><span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Alternative using ES6</span><span class="token keyword">const</span> curried <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> y <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token function">curried</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Returns 3</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Only change code below this line</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Only change code above this line</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="自测"><a href="#自测" class="headerlink" title="自测"></a>自测</h1><ul><li>下面代码会输出什么？</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>答案：5个6</p><ul><li>如何处理能够输出1-5</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 闭包方式</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> index <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> index<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6 方式</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js IIFE 立即执行函数</title>
      <link href="2020/11/26/js-IIFE/"/>
      <url>2020/11/26/js-IIFE/</url>
      
        <content type="html"><![CDATA[<h1 id="IIFE-Imdiately-Invoked-Function-Expression"><a href="#IIFE-Imdiately-Invoked-Function-Expression" class="headerlink" title="IIFE - Imdiately Invoked Function Expression"></a>IIFE - Imdiately Invoked Function Expression</h1><p>一般用于构造私有变量，避免全局空间污染</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js closure</title>
      <link href="2020/11/26/js-closure/"/>
      <url>2020/11/26/js-closure/</url>
      
        <content type="html"><![CDATA[<h1 id="JS变量声明"><a href="#JS变量声明" class="headerlink" title="JS变量声明"></a>JS变量声明</h1><p>JS中变量申明分显式申明和隐式申明。 </p><ul><li>vari=100;//显式申明 </li><li>i=100;//隐式申明 </li></ul><h1 id="JS作用域-与变量（scope）"><a href="#JS作用域-与变量（scope）" class="headerlink" title="JS作用域 与变量（scope）"></a>JS作用域 与变量（scope）</h1><ul><li><strong>全局变量 - global</strong>：在函数外部定义的变量，可以在函数内部使用</li><li><strong>局部变量 - local</strong> ：在函数内部定义的变量，只能在函数内部使用<ul><li>其中，在函数内部定义的变量，如果不写var，也是全局变量。在外部使用前，需先执行这个函数（不推荐）</li></ul></li><li>如果全局变量与局部变量有冲突，使用局部变量。（作用域近的）</li><li><strong>块级作用域</strong> Function scope/Block scope: 函数内部 或者 { } 内部<ul><li>for while if ，块级作用域可通过新增命令 let 和 const 声明，所声明的变量在指定块的作用域外无法被访问。</li><li>基本上可以用 let 来代替 var 进行变量声明，只有块级变量，没有块级函数</li></ul></li><li><strong>作用域链</strong>会先从自身开始查找作用域内的变量，有就执行，没有就往上一层作用域链查找，直到顶端为止，如果顶端还是没有就抛出异常。</li><li><strong>自由变量</strong> :  当前作用域没有定义的变量</li></ul><p>Javascript函数内部可以直接读取全局变量。</p><p><img src="/2020/11/26/js-closure/1606362501029.png" alt="基本作用域例子"></p><p>最后输出的结果为 2, 4, 12</p><ul><li>泡泡 1 是全局作用域，有标识符 foo；</li><li>泡泡 2 是作用域 foo，有标识符 a,bar,b；</li><li>泡泡 3 是作用域 bar，仅有标识符 c。</li></ul><h1 id="外部读取局部变量"><a href="#外部读取局部变量" class="headerlink" title="外部读取局部变量"></a>外部读取局部变量</h1><ol><li>在函数的内部，再定义一个函数</li><li>将内部函数值返回</li></ol><pre class=" language-js"><code class="language-js">　<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>　　　　<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">　　　　　　alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 999</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Javascript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>　　　　<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">　　　　　　alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　　　<span class="token keyword">return</span> f2<span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token keyword">var</span> result<span class="token operator">=</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">　　result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 999</span></code></pre><h1 id="函数作用域查找"><a href="#函数作用域查找" class="headerlink" title="函数作用域查找"></a>函数作用域查找</h1><h2 id="1、定义说明"><a href="#1、定义说明" class="headerlink" title="1、定义说明"></a>1、定义说明</h2><p>1）函数当前作用域查找不到，可以访问外层函数作用域的活动对象（参数、局部变量、定义在外层函数体里的函数）<br>2）外层的外层函数。。。一直到全局</p><h2 id="2、原理"><a href="#2、原理" class="headerlink" title="2、原理"></a>2、原理</h2><p>执行环境、作用域链、作用域、活动对象<br>1）调用内层函数，会创建一个执行环境，执行环境会关联一个作用域链<br>2）调用内层函数时，所有的外层函数都已经调用完毕或者外层函数调用中，所有只要把所用外层函数作用域（包括最外层全局）的活动对象，关联到当前内层函数的作用域链上。<br>3）最后创建内层函数作用域的活动对象，并且关联到作用域链的最前端。</p><p>活动对象注释：<br>函数参数，函数体里面定义的局部变量，函数体里面定义的函数</p><h2 id="3、例子"><a href="#3、例子" class="headerlink" title="3、例子"></a>3、例子</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">'全局变量'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">'外层局部变量'</span><span class="token punctuation">;</span>　　<span class="token keyword">function</span> <span class="token function">funcInner1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'外层函数的其他函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token keyword">function</span> <span class="token function">funcInner2</span><span class="token punctuation">(</span>argInner2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> str3 <span class="token operator">=</span> <span class="token string">'内层函数变量'</span><span class="token punctuation">;</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>argInner2<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">　　　　funcInner1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token keyword">return</span> funcInner2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">'外层函数参数'</span><span class="token punctuation">)</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token string">'内层函数参数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*执行结果：内层函数变量内层函数参数外层函数参数外层局部变量外层函数的其他函数全局变量*/</span></code></pre><h1 id="自测"><a href="#自测" class="headerlink" title="自测"></a>自测</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">　　alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> 　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 999 </span><span class="token comment" spellcheck="true">//外部函数之间的作用域是分开的</span><span class="token keyword">function</span> <span class="token function">loo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    vargoo<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">moo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">moo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>goo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">loo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//UncaughtReferrenceError:goo is not defined</span><span class="token comment" spellcheck="true">//注意下面的区别</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　<span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">　　alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//999</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> salary<span class="token operator">=</span><span class="token string">"653.582"</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"original salary"</span><span class="token operator">+</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// undefined</span>    <span class="token keyword">var</span> salary<span class="token operator">=</span><span class="token string">"789"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果这里没有，那么上面不是undefined；但是内部有的 先看内部</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token string">'Hello CSS-Tricks Reader!'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'Hello CSS-Tricks Reader!'</span>  <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is inside"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个全局函数</span>   <span class="token keyword">let</span> f<span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//块级变量</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Error, hello is not defined</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"this is inside"</span></code></pre><p>另一方面，在函数外部自然无法读取函数内的局部变量。</p><pre class=" language-js"><code class="language-js">　<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　<span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">　　alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error</span></code></pre><p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。<strong>如果不用的话，你实际上声明了一个全局变量！</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">　　f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">　　alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 999</span></code></pre><p>关于自由变量取值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10，而不是20</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">show</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>在 fn 函数中，取自由变量 x 的值时，要到哪个作用域中取？——<strong>要到创建这个函数的那个域”。—其实这就是所谓的”静态作用域”</strong></p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//30</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bar<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//bar()</span></code></pre><blockquote><p>fn()返回的是 bar 函数，赋值给 x。执行 x()，即执行 bar 函数代码。取 b 的值时，直接在 fn 作用域取出。取 a 的值时，试图在 fn 作用域取，但是取不到，只能转向创建 fn 的那个作用域中去查找，结果找到了,所以最后的结果是 30</p></blockquote><h1 id="闭包实际概念"><a href="#闭包实际概念" class="headerlink" title="闭包实际概念"></a>闭包实际概念</h1><p>一个函数和对其周围状态（<strong>lexical environment，词法环境</strong>）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是<strong>闭包</strong>（<strong>closure</strong>）。</p><blockquote><p>闭包就是能够读取其他函数内部变量的函数。</p><p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。</p><p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p></blockquote><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以<strong>读取函数内部的变量</strong>，另一个就是<strong>让这些变量的值始终保持在内存中</strong>。使用闭包十分容易造成浏览器的内存泄露，严重情况下会是浏览器挂死</p><h2 id="基本例子"><a href="#基本例子" class="headerlink" title="基本例子"></a>基本例子</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    num<span class="token operator">++</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//100</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//100</span><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> n <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//常驻变量 不会被销毁</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> a1<span class="token operator">=</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">var</span> a2<span class="token operator">=</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1 n=2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2 n=3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1 n=2</span></code></pre><p>a1、a2中的变量n是独立的，存储在各自的作用域里，互不干涉</p><h2 id="匿名函数-IIFE-immediately-Invoked-Function-Expression"><a href="#匿名函数-IIFE-immediately-Invoked-Function-Expression" class="headerlink" title="匿名函数 - IIFE - immediately Invoked Function Expression"></a>匿名函数 - IIFE - immediately Invoked Function Expression</h2><p>匿名函数最大的用途是创建闭包（这是JavaScript语言的特性之一），并且还可以构建命名空间，以减少全局变量的使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> oEvent <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> addEvent <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*代码的实现省略了*/</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>     <span class="token keyword">function</span> <span class="token function">removeEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     oEvent<span class="token punctuation">.</span>addEvent <span class="token operator">=</span> addEvent<span class="token punctuation">;</span>     oEvent<span class="token punctuation">.</span>removeEvent <span class="token operator">=</span> removeEvent<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在这段代码中函数addEvent和removeEvent都是局部变量，但我们可以通过全局变量oEvent使用它，这就大大减少了全局变量的使用，增强了网页的安全性。</p><pre class=" language-js"><code class="language-js">oEvent<span class="token punctuation">.</span><span class="token function">addEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">'click'</span> <span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> rainman <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x <span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** * 也可以写成下面的形式，因为第一个括号只是帮助我们阅读，但是不推荐使用下面这种书写格式。 * var rainman = function(x , y)&amp;#123; * return x + y; * &amp;#125;(2 , 3);**/</span></code></pre><h2 id="闭包中的匿名函数"><a href="#闭包中的匿名函数" class="headerlink" title="闭包中的匿名函数"></a>闭包中的匿名函数</h2><p>下面的情况是很熟悉的</p><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果使用闭包能改变吗？</p><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span></code></pre><p>实际上闭包是不能的，一定注意先循环后面函数被call时候，函数才被运行，实际解决办法</p><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> y<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只有这样下层return才能知道i是多少</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> y<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实际上面的写法 按照匿名函数，最好的写法是：</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is y : "</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> y<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="实际应用中经典例子"><a href="#实际应用中经典例子" class="headerlink" title="实际应用中经典例子"></a>实际应用中经典例子</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * &lt;body> * &lt;ul> * &lt;li>one&lt;/li> * &lt;li>two&lt;/li> * &lt;li>three&lt;/li> * &lt;li>one&lt;/li> * &lt;/ul> */</span><span class="token keyword">var</span> lists <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> len <span class="token operator">=</span> lists<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     lists<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>onmouseover <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>当mouseover事件调用监听函数时，首先在匿名函数（ function(){ alert(i); }）内部查找是否定义了 i，结果是没有定义；因此它会向上查找，查找结果是已经定义了，并且i的值是4（循环后的i值）；所以，最终每次弹出的都是4。</p><p>解决方法一：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> lists <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> len <span class="token operator">=</span> lists<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 lists<span class="token punctuation">[</span> index <span class="token punctuation">]</span><span class="token punctuation">.</span>onmouseover <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                         <span class="token function">alert</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这是一种自执行函数的格式，前一个括号是匿名函数，解析器执行后返回一个函数对象然后调用后面一个括号(i)，所以后面一个括号就是函数参数&amp;#125;</span></code></pre><p>解决办法二：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">eventListener</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     list<span class="token punctuation">.</span>onmouseover <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token function">alert</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">var</span> lists <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> len <span class="token operator">=</span> lists<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">eventListener</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="自测-1"><a href="#自测-1" class="headerlink" title="自测"></a>自测</h1><p>注意构造函数中的this，主要看是哪个obj调用这个function</p><p><img src="/2020/11/26/js-closure/1607174318636.png"></p><pre class=" language-js"><code class="language-js">　　<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"The Window"</span><span class="token punctuation">;</span>　　<span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　name <span class="token punctuation">:</span> <span class="token string">"My Object"</span><span class="token punctuation">,</span>　　　　getNameFunc <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　　　<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>　　　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">　　alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">　<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"The Window"</span><span class="token punctuation">;</span>　　<span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　name <span class="token punctuation">:</span> <span class="token string">"My Object"</span><span class="token punctuation">,</span>　　　　getNameFunc <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　　　　　　　　<span class="token keyword">return</span> that<span class="token punctuation">.</span>name<span class="token punctuation">;</span>　　　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">　　alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Reference：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures</a></p><p><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html">http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js this keyword</title>
      <link href="2020/11/25/js-this-keyword/"/>
      <url>2020/11/25/js-this-keyword/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-this-关键字"><a href="#JavaScript-this-关键字" class="headerlink" title="JavaScript this 关键字"></a>JavaScript this 关键字</h1><p>面向对象语言中 this 表示当前对象的一个引用, 它会随着执行环境的改变而改变。</p><blockquote><p><code>this</code>绑定的四种情况：</p><ol><li>new 绑定。<code>new</code>实例化</li><li>显示绑定。<code>call</code>、<code>apply</code>、<code>bind</code>手动更改指向</li><li>隐式绑定。由上下文对象调用，如 <code>obj.fn()</code>，<code>this</code> 指向 <code>obj</code></li><li>默认绑定。默认绑定全局对象（没有被上下文对象调用，也是全局对象），在严格模式下会绑定到<code>undefined</code>。</li></ol><p>优先级new绑定最高，最后到默认绑定。 </p></blockquote><h2 id="在obj-function中，this-表示该方法所属的对象"><a href="#在obj-function中，this-表示该方法所属的对象" class="headerlink" title="在obj function中，this 表示该方法所属的对象"></a>在obj function中，this 表示该方法所属的对象</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>m <span class="token operator">=</span> test<span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 </span></code></pre><h2 id="variable-定义使用，this-表示全局对象"><a href="#variable-定义使用，this-表示全局对象" class="headerlink" title="variable 定义使用，this 表示全局对象"></a>variable 定义使用，this 表示全局对象</h2><p>window 就是该全局对象为 [<strong>object Window</strong>]</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> x<span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="普通函数中，this-表示全局对象。"><a href="#普通函数中，this-表示全局对象。" class="headerlink" title="普通函数中，this 表示全局对象。"></a>普通函数中，this 表示全局对象。</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sayMyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"JavaScript"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Window</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">sayMyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">sayMyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//箭头函数</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windows"</span><span class="token punctuation">;</span><span class="token keyword">var</span> arrowFun<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">arrowFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：windows</span><span class="token comment" spellcheck="true">// 原因：箭头函数this指向取决于它定义时的父级作用域</span></code></pre><p><strong>思考下面的函数作用域</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">y</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">y</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ReferenceError: a is not defined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>函数<code>x</code>是在函数<code>f</code>的外部声明的，所以它的作用域绑定外层，内部变量<code>a</code>不会到函数<code>f</code>体内取值，所以输出<code>1</code>，而不是<code>2</code>。</p><p>总之，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> bar<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>函数体内部声明的函数，作用域绑定函数体内部。</p><h2 id="构造函数中，this指向constructor"><a href="#构造函数中，this指向constructor" class="headerlink" title="构造函数中，this指向constructor"></a>构造函数中，this指向constructor</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windows"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"constructor"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fun1 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：constructor</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fun2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：constructor</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：constructor</span>p<span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：constructor</span><span class="token comment" spellcheck="true">// 构造函数里的普通方法this指向构造函数new后的实例</span><span class="token comment" spellcheck="true">// 箭头函数的this是父级作用域，父级是Person，Person是函数有自己的作用域且内部this指向自己</span><span class="token comment" spellcheck="true">// 所以箭头函数的this就是指向person的</span></code></pre><h2 id="prototype函数中定义的this-（箭头-一般函数）"><a href="#prototype函数中定义的this-（箭头-一般函数）" class="headerlink" title="prototype函数中定义的this （箭头/一般函数）"></a>prototype函数中定义的this （箭头/一般函数）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windows"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"constructor"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fun1 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：constructor</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fun2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：constructor</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fun3 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fun4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：constructor</span>p<span class="token punctuation">.</span><span class="token function">fun4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：windows</span><span class="token comment" spellcheck="true">// 原因：fun3()挂在到原型上的普通方法的this指向构造函数new的实例</span><span class="token comment" spellcheck="true">// 原因：fun4()挂在到原型上的箭头函数this取决于上下文的作用域，</span><span class="token comment" spellcheck="true">// fun4()是在全局下挂载到Person的原型上的，所以this指向window</span></code></pre><h2 id="严格模式下，this-是未定义的-undefined-。"><a href="#严格模式下，this-是未定义的-undefined-。" class="headerlink" title="严格模式下，this 是未定义的(undefined)。"></a>严格模式下，this 是未定义的(undefined)。</h2><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="this直向上级对象（一层对象）"><a href="#this直向上级对象（一层对象）" class="headerlink" title="this直向上级对象（一层对象）"></a>this直向上级对象（一层对象）</h2><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name<span class="token punctuation">:</span> <span class="token string">"JavaScript"</span><span class="token punctuation">,</span>        getBookName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getBookName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this指的是book 所以： JavaScript</span><span class="token comment" spellcheck="true">//但是对于箭头函数</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windows"</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">"objFun"</span><span class="token punctuation">,</span>    arrawFun<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：windows</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">arrawFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：windows</span><span class="token comment" spellcheck="true">// 原因：箭头函数的this取决于父级作用域，父级是对象没有自己独立的作用域而是位于全局，所以向上延申，找到了window</span></code></pre><h2 id="event中，this-表示接收事件的元素。"><a href="#event中，this-表示接收事件的元素。" class="headerlink" title="event中，this 表示接收事件的元素。"></a>event中，this 表示接收事件的元素。</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>this.style.display<span class="token punctuation">=</span><span class="token punctuation">'</span>none<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我后我就消失了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h2 id="难点-多个对象嵌套"><a href="#难点-多个对象嵌套" class="headerlink" title="难点*  多个对象嵌套"></a>难点*  多个对象嵌套</h2><h3 id="对象内嵌对象，外层对象调用函数，函数的this只指向上级对象"><a href="#对象内嵌对象，外层对象调用函数，函数的this只指向上级对象" class="headerlink" title="对象内嵌对象，外层对象调用函数，函数的this只指向上级对象"></a>对象内嵌对象，外层对象调用函数，函数的this只指向上级对象</h3><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span> <span class="token string">"JavaScript"</span><span class="token punctuation">,</span>             getBookName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            computerBook<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                name<span class="token punctuation">:</span> <span class="token string">"Node.js"</span><span class="token punctuation">,</span>                getBookName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>computerBook<span class="token punctuation">.</span><span class="token function">getBookName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Node.js</span><span class="token comment" spellcheck="true">//this 指向的就是 computerBook这个对象 普通函数的this谁调用就指向谁</span>        <span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span> <span class="token string">"JavaScript"</span><span class="token punctuation">,</span>            getBookName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            computerBook<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//name: "Node.js",</span>                getBookName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>computerBook<span class="token punctuation">.</span><span class="token function">getBookName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undifined</span><span class="token comment" spellcheck="true">//this 指向的就是 computerBook这个对象</span><span class="token comment" spellcheck="true">//此时this指向是什么？</span>        <span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span> <span class="token string">"JavaScript"</span><span class="token punctuation">,</span>            getBookName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            computerBook<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                name<span class="token punctuation">:</span> <span class="token string">"Node.js"</span><span class="token punctuation">,</span>                getBookName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(book.computerBook.getBookName());</span>        <span class="token keyword">var</span> temp <span class="token operator">=</span> book<span class="token punctuation">.</span>computerBook<span class="token punctuation">.</span>getBookName<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span><span class="token comment" spellcheck="true">//this只有在运行的时候，才能被确定，temp在执行这个函数的时候，默认是在全局环境下执行的。所以是Window</span></code></pre><h4 id="箭头函数下"><a href="#箭头函数下" class="headerlink" title="箭头函数下"></a>箭头函数下</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span> <span class="token string">"JavaScript"</span><span class="token punctuation">,</span>             computerBook<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//name: "Node.js",</span>            getBookName<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：windows</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>computerBook<span class="token punctuation">.</span><span class="token function">getBookName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果：windows</span><span class="token comment" spellcheck="true">// 原因；箭头函数的this取决于父级作用域，父级是对象没有自己独立的作用域</span><span class="token comment" spellcheck="true">// 所以向上延申一层，但还是对象，所以再向上延申一层，就找到了window</span></code></pre><h4 id="延伸一下，看下跨对象取值"><a href="#延伸一下，看下跨对象取值" class="headerlink" title="延伸一下，看下跨对象取值"></a>延伸一下，看下跨对象取值</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span> <span class="token string">"JavaScript"</span><span class="token punctuation">,</span>             <span class="token string">"say"</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            computerBook<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                name<span class="token punctuation">:</span> <span class="token string">"Node.js"</span><span class="token punctuation">,</span>                <span class="token string">"sing"</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//this 指向对象本身， 但是如果我想要从computerbook 取得book的name属性怎么办？</span></code></pre><p>解决办法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span> <span class="token string">"JavaScript"</span><span class="token punctuation">,</span>             <span class="token string">"say"</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处命名随便</span>            computerBook<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                name<span class="token punctuation">:</span> <span class="token string">"Node.js"</span><span class="token punctuation">,</span>                <span class="token string">"sing"</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再次调用</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="链式使用中的this（连贯调用）"><a href="#链式使用中的this（连贯调用）" class="headerlink" title="链式使用中的this（连贯调用）"></a>链式使用中的this（连贯调用）</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">;</span>    <span class="token string">"son"</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>        <span class="token string">"say"</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>son<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//此时this指向的是obj </span></code></pre><h3 id="函数嵌套中的this"><a href="#函数嵌套中的this" class="headerlink" title="函数嵌套中的this"></a>函数嵌套中的this</h3><p>函数嵌套，由于是普通函数调用，所有this都是指向window</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//window</span>    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//window</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为没有被上下文对象call 是Window call的</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对象里的方法返回普通方法 （优化就是 跨域取值）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windows"</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span>    fun<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：ƒ ()&amp;#123;console.log(this.name);&amp;#125;</span>obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：windows</span><span class="token comment" spellcheck="true">// 原因：obj.fun()执行后返回一个方法，所以再加一对“()”会执行</span><span class="token comment" spellcheck="true">// 执行的时候这个方法相当于被全局调用，所以this指向window。</span><span class="token comment" spellcheck="true">//但是对于箭头函数 就不一样了</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windows"</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span>    fun<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：() => &amp;#123;console.log(this.name);&amp;#125;</span>obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果：obj</span><span class="token comment" spellcheck="true">// 原因：箭头函数的this指向父级作用域，</span><span class="token comment" spellcheck="true">// 箭头函数的父级是function，function会形成独立的作用域</span><span class="token comment" spellcheck="true">// 而function作用域中的this指向obj，所以箭头函数的this就指向了obj</span></code></pre><h2 id="显示函数绑定，类似-call-和-apply-方法可以将-this-引用到任何对象。"><a href="#显示函数绑定，类似-call-和-apply-方法可以将-this-引用到任何对象。" class="headerlink" title="显示函数绑定，类似 call() 和 apply() 方法可以将 this 引用到任何对象。"></a>显示函数绑定，类似 call() 和 apply() 方法可以将 this 引用到任何对象。</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  fullName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  firstName<span class="token punctuation">:</span><span class="token string">"John"</span><span class="token punctuation">,</span>  lastName<span class="token punctuation">:</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span>fullName<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回 "John Doe"</span></code></pre><p><code>apply()</code>是函数的一个方法，作用是改变函数的调用对象。它的第一个参数就表示改变后的调用这个函数的对象。因此，这时<code>this</code>指的就是这第一个参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>m <span class="token operator">=</span> test<span class="token punctuation">;</span>obj<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span></code></pre><p><code>apply()</code>的参数为空时，默认调用全局对象。因此，这时的运行结果为<code>0</code>，证明<code>this</code>指的是全局对象。</p><p>如果把最后一行代码修改为</p><pre class=" language-javascript"><code class="language-javascript">obj<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span></code></pre><h2 id="改变-this-指向-this-apply-bind"><a href="#改变-this-指向-this-apply-bind" class="headerlink" title="改变 this 指向- this()  apply()  bind()"></a>改变 this 指向- this()  apply()  bind()</h2><h3 id="Function-prototype-call"><a href="#Function-prototype-call" class="headerlink" title="Function.prototype.call()"></a>Function.prototype.call()</h3><ul><li>使用方法, 就直接连接再函数名后面使用</li><li>语法:<br>-&gt; fn.call() / func.call(thisValue, arg1, arg2, …)<br>-&gt; obj.fn.call()</li><li>参数:<br>-&gt; 第一个参数, 就是函数内部的 this 指向<br>-&gt; 第二个参数开始, 依次给函数传递参数</li><li>特点:<br>-&gt; 会立即执行函数(不适合用作定时器处理函数或者事件处理函数)</li><li>作用:<br>-&gt; 伪数组借用数组方法</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> n<span class="token punctuation">:</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">:</span><span class="token function">functoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重要的结论： a()=a.call(window) 如果是有参数的a("Hello world")=a.call(window,"Hello world")</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 456</span><span class="token comment" spellcheck="true">//当被对象调用的时候，指向就是对象了哦</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span> obj<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>person<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span>  person<span class="token punctuation">.</span>hello<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span></code></pre><p>对于匿名函数</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//调用原生</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 覆盖掉继承的 hasOwnProperty 方法</span>obj<span class="token punctuation">.</span>hasOwnProperty <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'toString'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p><code>hasOwnProperty</code>是<code>obj</code>对象继承的方法，如果这个方法一旦被覆盖，就不会得到正确结果。<code>call</code>方法可以解决这个问题，它将<code>hasOwnProperty</code>方法的原始定义放到<code>obj</code>对象上执行，这样无论<code>obj</code>上有没有同名方法，都不会影响结果。</p><h3 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h3><ul><li>使用方法, 就直接连接再函数名后面使用</li><li>语法:<br>-&gt; fn.apply()<br>-&gt; obj.fn.apply()</li><li>参数: func.apply(thisValue, [arg1, arg2, …])<br>-&gt; 第一个参数, 就是函数内部的 this 指向<br>-&gt; 第二个参数: 是一个<strong>数组</strong>, 里面的每一项依次给函数传递参数</li><li>特点:<br>-&gt; 会立即执行函数</li><li>作用: 可以以数组的形式给某些功能函数传参<br>-&gt; Math.max()</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//跟for each的差别， 会有跳过</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// a</span><span class="token comment" spellcheck="true">// b</span>Array<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// a</span><span class="token comment" spellcheck="true">// undefined</span><span class="token comment" spellcheck="true">// b</span></code></pre><h3 id="Function-prototype-bind"><a href="#Function-prototype-bind" class="headerlink" title="Function.prototype.bind()"></a>Function.prototype.bind()</h3><ul><li>使用方法, 就直接连接再函数名后面使用</li><li>语法:<br>-&gt; fn.apply()<br>-&gt; obj.fn.apply()</li><li>参数:<br>-&gt; 第一个参数. 就是函数内部的 this 指向<br>-&gt; 从第二个参数开始, 依次给函数传递参数</li><li>特点:<br>-&gt; 不会立即调用函数<br>-&gt; 会返回一个新的函数, 一个已经被改变好 this 指向的函数</li><li>作用:<br>-&gt; 改变事件处理函数或者定时器处理函数的 this 指向</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  inc<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的this是windows</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> func <span class="token operator">=</span> counter<span class="token punctuation">.</span>inc<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新绑定为obj</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>counter<span class="token punctuation">.</span>count <span class="token comment" spellcheck="true">// 1</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"bennet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//UncaughtSyntaxError:Unexpectedtoken'.'</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> sayhello <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"bennet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// hello bennet lucy</span></code></pre><p>Reference：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html">http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html</a></li><li><a href="https://javascript.ruanyifeng.com/oop/this.html#toc3">https://javascript.ruanyifeng.com/oop/this.html#toc3</a></li><li><a href="https://blog.csdn.net/hellochenlu/article/details/52244276?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control">https://blog.csdn.net/hellochenlu/article/details/52244276?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control</a></li><li><a href="https://blog.csdn.net/kindergarten_sir/article/details/109909886?utm_medium=distribute.pc_relevant.none-task-blog-title-3&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/kindergarten_sir/article/details/109909886?utm_medium=distribute.pc_relevant.none-task-blog-title-3&amp;spm=1001.2101.3001.4242</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js copy object</title>
      <link href="2020/11/25/js-copy-object/"/>
      <url>2020/11/25/js-copy-object/</url>
      
        <content type="html"><![CDATA[<h1 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h1><h2 id="简单拷贝"><a href="#简单拷贝" class="headerlink" title="简单拷贝"></a>简单拷贝</h2><p>  新建一个空对象，使用for-in循环，将对象的所有属性复制到新建的空对象中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">simpleClone1</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!=</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cloneObj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cloneObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">simpleClone1</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><h2 id="使用…"><a href="#使用…" class="headerlink" title="使用…"></a>使用…</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span>obj1<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;#123;a:1,b:2,c:[1,2,3]&amp;#125;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span>obj1<span class="token punctuation">,</span>location<span class="token punctuation">:</span><span class="token string">'china'</span><span class="token punctuation">,</span>a<span class="token punctuation">:</span><span class="token number">200</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加属性+更新a属性 </span></code></pre><h2 id="使用属性描述符"><a href="#使用属性描述符" class="headerlink" title="使用属性描述符"></a>使用属性描述符</h2><p>  通过对象的原型，建立一个空的实例对象。通过forEach语句，获取到对象的所有属性的属性描述符，将其作为参数，设置到新建的空实例对象中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">simpleClone2</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> copy <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>propKey<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> desc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>orig<span class="token punctuation">,</span>propKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>copy<span class="token punctuation">,</span>propKey<span class="token punctuation">,</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> copy<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">simpleClone1</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><h2 id="使用jquery的extend-方法"><a href="#使用jquery的extend-方法" class="headerlink" title="使用jquery的extend()方法"></a>使用jquery的extend()方法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span>$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><h2 id="遍历复制"><a href="#遍历复制" class="headerlink" title="遍历复制"></a>遍历复制</h2><p>复制对象的属性时，对其进行判断，如果是数组或对象，则再次调用拷贝函数；否则，直接复制对象属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone1</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>cloneObj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!=</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cloneObj <span class="token operator">=</span> cloneObj <span class="token operator">||</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cloneObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>cloneObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cloneObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">deepClone1</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p>用JSON全局对象的parse和stringify方法来实现深复制算是一个简单讨巧的方法，它能正确处理的对象只有Number、String、Boolean、Array、扁平对象，即那些能够被json直接表示的数据结构</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">jsonClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">jsonClone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre><h2 id="使用jquery的extend-方法-1"><a href="#使用jquery的extend-方法-1" class="headerlink" title="使用jquery的extend()方法"></a>使用jquery的extend()方法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span>$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js form validation 表单验证</title>
      <link href="2020/11/25/js-form-validation/"/>
      <url>2020/11/25/js-form-validation/</url>
      
        <content type="html"><![CDATA[<h1 id="基本使用JS"><a href="#基本使用JS" class="headerlink" title="基本使用JS"></a>基本使用JS</h1><h2 id="添加交互事件"><a href="#添加交互事件" class="headerlink" title="添加交互事件"></a>添加交互事件</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>this.innerHTML<span class="token punctuation">=</span><span class="token punctuation">'</span>Ooops!<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击文本!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><h1 onclick="this.innerHTML='Ooops!'">点击文本!</h1><h2 id="操作DOM元素"><a href="#操作DOM元素" class="headerlink" title="操作DOM元素"></a>操作DOM元素</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例：向button元素分配onclick事件：</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">displayDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="操作css"><a href="#操作css" class="headerlink" title="操作css"></a>操作css</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法</span>dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>属性名 <span class="token operator">=</span> 属性值<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例如：</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span></code></pre><h1 id="验证表单"><a href="#验证表单" class="headerlink" title="验证表单"></a>验证表单</h1><h2 id="必填（或必选）"><a href="#必填（或必选）" class="headerlink" title="必填（或必选）"></a>必填（或必选）</h2><pre><code>&lt;script&gt;function validateForm()&#123;var x=document.forms[&quot;myForm&quot;][&quot;fname&quot;].value;if (x==null || x==&quot;&quot;)&#123;  alert(&quot;姓必须填写&quot;);  return false;  &#125;&#125;&lt;/script&gt; &lt;form name=&quot;myForm&quot; action=&quot;demo-form.php&quot; onsubmit=&quot;return validateForm()&quot; method=&quot;post&quot;&gt;姓: &lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;</code></pre><h2 id="Email验证"><a href="#Email验证" class="headerlink" title="Email验证"></a>Email验证</h2><p>检查输入的数据是否符合电子邮件地址的基本语法，只能做些基本检查：</p><p>输入的数据必须包含 @ 符号和点号(.)。同时，@ 不可以是邮件地址的首字符，并且 @ 之后需有至少一个点号</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myForm<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo-form.php<span class="token punctuation">"</span></span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return validateForm();<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Email: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>function validateForm()<span class="token entity" title="&#123;">&amp;#123;</span>  var x=document.forms["myForm"]["email"].value;  var atpos=x.indexOf("@");  var dotpos=x.lastIndexOf(".");  if (atpos&lt;1 || dotpos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>atpos+2</span> <span class="token attr-name">||</span> <span class="token attr-name">dotpos+2</span><span class="token punctuation">></span></span>=x.length)<span class="token entity" title="&#123;">&amp;#123;</span>    alert("不是一个有效的 e-mail 地址");    return false;  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js type identification 数据类型查找</title>
      <link href="2020/11/25/js-type/"/>
      <url>2020/11/25/js-type/</url>
      
        <content type="html"><![CDATA[<h1 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h1><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'string'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'string'</span></code></pre><h1 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h1><p>操作数是一个对象，右操作数是一个构造函数。如果左侧的对象是右侧构造函数的实例对象，则表达式返回true；否则返回false。</p><ul><li>可以识别内置对象类型、自定义类型及其父类型</li><li>不能识别标准类型，会返回false</li><li>不能识别undefined、null，会报错</li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token keyword">instanceof</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//Uncaught TypeError: Right-hand side of 'instanceof' is not an object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">instanceof</span> <span class="token class-name">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"jerry"</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>undefined <span class="token keyword">instanceof</span> <span class="token class-name">Undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">"jerry"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h1 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h1><ul><li><p>可以识别标准类型、内置对象类型及自定义类型</p></li><li><p>不能识别undefined、null，会报错，因为它俩没有构造函数</p></li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"jerry"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function String()&amp;#123;[native code]&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function Number()&amp;#123;[native code]&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function Boolean()&amp;#123;[native code]&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">"jerry"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function Object()&amp;#123;[native code]&amp;#125;</span></code></pre><h1 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h1><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"jerry"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object String]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Number]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Boolean]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Undefined]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Null]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">"jerry"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Object]</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js date</title>
      <link href="2020/11/25/js-date/"/>
      <url>2020/11/25/js-date/</url>
      
        <content type="html"><![CDATA[<h1 id="date基本"><a href="#date基本" class="headerlink" title="date基本"></a>date基本</h1><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>格林尼治标准时间(GMT) –伦敦</p><p>世界协调时间(UTC)又称世界统一时间</p><h2 id="闰年"><a href="#闰年" class="headerlink" title="闰年"></a>闰年</h2><p>诀是：四年一闰，百年不闰，四百年再闰</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">IsLeapYear</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> year <span class="token operator">==</span> <span class="token string">'number'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">'leap year'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">'common year'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'please input number'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">IsLeapYear</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'leap year'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">IsLeapYear</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'leap year'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">IsLeapYear</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'leap year'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">IsLeapYear</span><span class="token punctuation">(</span><span class="token number">1900</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'common year'</span></code></pre><h2 id="计算时分秒"><a href="#计算时分秒" class="headerlink" title="计算时分秒"></a>计算时分秒</h2><pre class=" language-js"><code class="language-js">date <span class="token operator">=</span> 100000s<span class="token function">day</span><span class="token punctuation">(</span>天<span class="token punctuation">)</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token operator">/</span><span class="token number">86400</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token function">hour</span><span class="token punctuation">(</span>小时<span class="token punctuation">)</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token operator">%</span><span class="token number">86400</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3600</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token function">minute</span><span class="token punctuation">(</span>分<span class="token punctuation">)</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token operator">%</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">46</span><span class="token function">second</span><span class="token punctuation">(</span>秒<span class="token punctuation">)</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">40</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100000</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">86400</span><span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">3600</span><span class="token operator">+</span> <span class="token number">46</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h1 id="Date-构造函数"><a href="#Date-构造函数" class="headerlink" title="Date()构造函数"></a>Date()构造函数</h1><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'7/12/2016'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Tue Jul 12 2016 00:00:00 GMT+0800 (中国标准时间)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2016-7-12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Tue Jul 12 2016 00:00:00 GMT+0800 (中国标准时间)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2016-07-12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Tue Jul 12 2016 08:00:00 GMT+0800 (中国标准时间)</span></code></pre><h1 id="date函数"><a href="#date函数" class="headerlink" title="date函数"></a>date函数</h1><h2 id="to类别"><a href="#to类别" class="headerlink" title="to类别"></a>to类别</h2><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>　　返回本地时区的日期字符串</p><h3 id="toUTCString"><a href="#toUTCString" class="headerlink" title="toUTCString()"></a>toUTCString()</h3><p>　　返回UTC时间的日期字符串</p><h3 id="toISOString"><a href="#toISOString" class="headerlink" title="toISOString()"></a>toISOString()</h3><p>　　返回Date对象的标准的日期时间字符串格式的字符串</p><h3 id="toDateString"><a href="#toDateString" class="headerlink" title="toDateString()"></a>toDateString()</h3><p>　　返回Date对象的日期部分的字符串</p><h3 id="toTimeString"><a href="#toTimeString" class="headerlink" title="toTimeString()"></a>toTimeString()</h3><p>　　返回Date对象的时间部分的字符串</p><h3 id="toJSON"><a href="#toJSON" class="headerlink" title="toJSON()"></a>toJSON()</h3><p>　　返回一个符合JSON格式的日期字符串，与toISOString方法的返回结果完全相同</p><h3 id="toLocaleString-NaN"><a href="#toLocaleString-NaN" class="headerlink" title="toLocaleString()"></a>toLocaleString()</h3><p>　　toString()方法的本地化转换</p><h3 id="toLocaleTimeString"><a href="#toLocaleTimeString" class="headerlink" title="toLocaleTimeString()"></a>toLocaleTimeString()</h3><p>　　toTimeString()方法的本地化转换</p><h3 id="toLocaleDateString"><a href="#toLocaleDateString" class="headerlink" title="toLocaleDateString()"></a>toLocaleDateString()</h3><p>　　toDateString()方法的本地化转换</p><h2 id="get类"><a href="#get类" class="headerlink" title="get类"></a>get类</h2><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h3><p>　　返回距离1970年1月1日0点的毫秒数</p><h3 id="getTimezoneOffset"><a href="#getTimezoneOffset" class="headerlink" title="getTimezoneOffset()"></a>getTimezoneOffset()</h3><p>　　返回当前时间与UTC的时区差异，以分钟表示(8*60=480分钟)，返回结果考虑到了夏令时因素</p><h3 id="get-UTC-FullYear"><a href="#get-UTC-FullYear" class="headerlink" title="get[UTC]FullYear()"></a>get[UTC]FullYear()</h3><p>　　返回年份(4位数)</p><h3 id="get-UTC-Month"><a href="#get-UTC-Month" class="headerlink" title="get[UTC]Month()"></a>get[UTC]Month()</h3><p>　　返回月份(0-11)</p><h3 id="get-UTC-Date"><a href="#get-UTC-Date" class="headerlink" title="get[UTC]Date()"></a>get[UTC]Date()</h3><p>　　返回第几天(1-31)</p><h3 id="get-UTC-Day"><a href="#get-UTC-Day" class="headerlink" title="get[UTC]Day()"></a>get[UTC]Day()</h3><p>　　返回星期几(0-6)</p><h3 id="get-UTC-Hours"><a href="#get-UTC-Hours" class="headerlink" title="get[UTC]Hours()"></a>get[UTC]Hours()</h3><p>　　返回小时值(0-23)</p><h3 id="get-UTC-Minutes"><a href="#get-UTC-Minutes" class="headerlink" title="get[UTC]Minutes()"></a>get[UTC]Minutes()</h3><p>　　返回分钟值(0-59)</p><h3 id="get-UTC-Seconds"><a href="#get-UTC-Seconds" class="headerlink" title="get[UTC]Seconds()"></a>get[UTC]Seconds()</h3><p>　　返回秒值(0-59)</p><h3 id="get-UTC-Milliseconds"><a href="#get-UTC-Milliseconds" class="headerlink" title="get[UTC]Milliseconds()"></a>get[UTC]Milliseconds()</h3><p>　　返回毫秒值(0-999)</p><p>　　[注意]通过标准日期时间格式字符串，且有前置0的形式的参数设置，设置的是UTC时间</p><h2 id="set类"><a href="#set类" class="headerlink" title="set类"></a>set类</h2><h3 id="setTime"><a href="#setTime" class="headerlink" title="setTime()"></a>setTime()</h3><p>使用毫秒的格式，设置一个Date对象的值</p><h3 id="set-UTC-Month"><a href="#set-UTC-Month" class="headerlink" title="set[UTC]Month()"></a>set[UTC]Month()</h3><p>设置月份(0-11)，以及可选的日期值</p><h3 id="set-UTC-Date"><a href="#set-UTC-Date" class="headerlink" title="set[UTC]Date()"></a>set[UTC]Date()</h3><p>设置第几天(1-31) </p><h3 id="set-UTC-Hours"><a href="#set-UTC-Hours" class="headerlink" title="set[UTC]Hours()"></a>set[UTC]Hours()</h3><p>设置小时值(0-23)，以及可选的分钟值、秒值及毫秒值</p><h3 id="set-UTC-Minutes"><a href="#set-UTC-Minutes" class="headerlink" title="set[UTC]Minutes()"></a>set[UTC]Minutes()</h3><p>设置分钟值(0-59)，以及可选的秒值及毫秒值</p><h3 id="set-UTC-Seconds"><a href="#set-UTC-Seconds" class="headerlink" title="set[UTC]Seconds()"></a>set[UTC]Seconds()</h3><p>设置秒值(0-59)，以及可选的毫秒值</p><h3 id="set-UTC-Milliseconds"><a href="#set-UTC-Milliseconds" class="headerlink" title="set[UTC]Milliseconds()"></a>set[UTC]Milliseconds()</h3><p>设置毫秒值(0-999)</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js error</title>
      <link href="2020/11/25/js-error/"/>
      <url>2020/11/25/js-error/</url>
      
        <content type="html"><![CDATA[<h1 id="error-参数"><a href="#error-参数" class="headerlink" title="error 参数"></a>error 参数</h1><ul><li>try语句可以测试代码块是否存在错误</li><li>catch语句使您可以处理错误</li><li>throw语句使您可以创建自定义错误 </li><li>finally语句使您可以在尝试捕获后执行代码，而不管结果如何</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> message<span class="token punctuation">,</span> x<span class="token punctuation">;</span>  message <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  message<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  x <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">"is empty"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">"is not a number"</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">"is too high"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">"is too low"</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"Error: "</span> <span class="token operator">+</span> err <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="error对象属性"><a href="#error对象属性" class="headerlink" title="error对象属性"></a>error对象属性</h1><table><thead><tr><th align="left">Property</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">设置返回error名字</td></tr><tr><td align="left">message</td><td align="left">设置返回error信息</td></tr></tbody></table><h1 id="Error类型"><a href="#Error类型" class="headerlink" title="Error类型"></a>Error类型</h1><ul><li>EvalError(eval函数错误)</li><li>RangeError(超出范围错误)</li><li>ReferenceError(引用不存在值错误)</li><li>SyntaxError(语法错误)</li><li>TypeError(类型错误)</li><li>URIError(URI错误)</li></ul><h1 id="error事件"><a href="#error事件" class="headerlink" title="error事件"></a>error事件</h1><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//DOM0级</span>window<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>url<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//DOM2级</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>url<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//控制台显示错误消息</span>window<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>url<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台不显示错误消息</span>window<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>url<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'smilex.gif'</span><span class="token punctuation">;</span>image<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js copy array</title>
      <link href="2020/11/25/js-copy-array/"/>
      <url>2020/11/25/js-copy-array/</url>
      
        <content type="html"><![CDATA[<h1 id="PUSH"><a href="#PUSH" class="headerlink" title="PUSH"></a>PUSH</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">copyArray</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><h1 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h1><p>使用该方法的缺点是数组中的项全部变成了字符串形式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">copyArray</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['1','2','3']</span>obj2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['1','2','3',4]</span></code></pre><h1 id="CONCAT"><a href="#CONCAT" class="headerlink" title="CONCAT"></a>CONCAT</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">copyArray</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><h1 id="SLICE"><a href="#SLICE" class="headerlink" title="SLICE"></a>SLICE</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">copyArray</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>obj2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><p>  以上方法实现的仅是数组的浅拷贝，如果要实现数组的深拷贝，需要使用递归方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> result <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">copyArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">copyArray</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3,4]</span>obj2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3,4,5]</span></code></pre><h1 id="…"><a href="#…" class="headerlink" title="…"></a>…</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newObj<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">...</span>obj1<span class="token punctuation">]</span><span class="token keyword">var</span> newObj1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'newElement'</span><span class="token punctuation">,</span><span class="token operator">...</span>obj1<span class="token punctuation">,</span><span class="token string">'newElement'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//此处与concat一样</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>newObj<span class="token punctuation">,</span>newObj1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1,2,3] [1,2,3] ['newElement',1,2,3,'newElement']</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js array</title>
      <link href="2020/11/25/js-array/"/>
      <url>2020/11/25/js-array/</url>
      
        <content type="html"><![CDATA[<h1 id="创建array"><a href="#创建array" class="headerlink" title="创建array"></a>创建array</h1><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> empty <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//没有元素的数组</span><span class="token keyword">var</span> primes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//有5个数值的数组</span><span class="token keyword">var</span> misc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//3个不同类型的元素</span></code></pre><h2 id="构建函数"><a href="#构建函数" class="headerlink" title="构建函数"></a>构建函数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Array本质是对象"><a href="#Array本质是对象" class="headerlink" title="Array本质是对象"></a>Array本质是对象</h1><pre class=" language-js"><code class="language-js">o<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//创建一个普通的对象</span>o<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"one"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用一个整数来索引它</span><span class="token comment" spellcheck="true">//数值键名被自动转成字符串</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 'a'</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 'a'</span></code></pre><h1 id="Array-基本的进出"><a href="#Array-基本的进出" class="headerlink" title="Array 基本的进出"></a>Array 基本的进出</h1><p>在数组最后增加一个元素,删除数组最后一个元素, 在数组头部增加一个元素,删除数组第一个元素</p><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>yourElement<span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>yourElement<span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2020/11/25/js-array/1606539463669.png"></p><h1 id="Array字符串化-toString"><a href="#Array字符串化-toString" class="headerlink" title="Array字符串化 - toString()"></a>Array字符串化 - toString()</h1><p>将数组字符串化。用逗号分割。相当于join(“,”);</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token keyword">var</span> n <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="稀疏数组-（不连续索引的数组）"><a href="#稀疏数组-（不连续索引的数组）" class="headerlink" title="稀疏数组 （不连续索引的数组）"></a>稀疏数组 （不连续索引的数组）</h1><h2 id="使用delete操作符"><a href="#使用delete操作符" class="headerlink" title="使用delete操作符"></a>使用delete操作符</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><h2 id="省略元素值"><a href="#省略元素值" class="headerlink" title="省略元素值"></a>省略元素值</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><h2 id="undefined元素"><a href="#undefined元素" class="headerlink" title="undefined元素"></a>undefined元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h1 id="数组乱序（shuffle）"><a href="#数组乱序（shuffle）" class="headerlink" title="数组乱序（shuffle）"></a>数组乱序（shuffle）</h1><p>sort()方法传入一个函数，此函数随机返回1或-1，达到随机排列数组元素的目的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[2,1,5,4,3]</span></code></pre><h1 id="数组max-min"><a href="#数组max-min" class="headerlink" title="数组max min"></a>数组max min</h1><p>Math.max.apply 来查找数组中的最高值：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myArrayMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Math.min.apply 来查找数组中的最低值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myArrayMin</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="数组排序办法"><a href="#数组排序办法" class="headerlink" title="数组排序办法"></a>数组排序办法</h1><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><p>reverse()方法用于反转数组的顺序，返回经过排序之后的数组；而原数组顺序也发生改变</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[5,3,4,2,1] [5,3,4,2,1]</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3,true,'str'] [3,true,'str']</span></code></pre><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><h3 id="默认排序"><a href="#默认排序" class="headerlink" title="默认排序"></a>默认排序</h3><p>　　默认情况下，sort()方法按字符串升序排列数组项，sort方法会调用每个数组项的toString()方法，然后比较得到的字符串排序，返回经过排序之后的数组，而原数组顺序也发生改变</p><blockquote><p>sort方法会调用每个数组项的<code>toString()</code>方法，得到字符串，然后再对得到的字符串进行排序。虽然数值15比3大，但在进行字符串比较时”15”则排在”3”前面。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5] [1,2,3,4,5]</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'3str'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[2, "2", 3, "3str"] [2, "2", 3, "3str"]</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1, 10, 5, 50] [1, 10, 5, 50]</span><span class="token comment" spellcheck="true">//强行要求</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span></code></pre><p>　　<strong>如果数组包含undefined元素，它们会被排到数组的尾部</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["2", 2, "3", 3, undefined] ["2", 2, "3", 3, undefined]</span></code></pre><h3 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h3><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p><strong>Array.sort(function(a,b));</strong></p><blockquote><p>方法函数function有两个参数a和b，通过比较两个值的大小，然后返回比较的结果，用于表明用何种方法进行排序。</p></blockquote><ul><li>**负值(a&lt;b)**：如果返回一个小于零的数，数组将按照升序排序。</li><li>**零(a=b)**： 如果返回一个等于零的数，即两个参数相等。</li><li>**正值(a&gt;b)**：如果返回一个大于零的数，数组将按照降序排序。</li></ul><p><strong>简单的来说就是：</strong></p><ul><li>若：<strong>return a-b;</strong> <strong>表示数组将按照升序排序。</strong></li><li>若：<strong>return a=b;</strong> <strong>表示数组不进行排序。</strong></li><li>若：<strong>return b-a;</strong> <strong>表示数组将按照降序排序。</strong></li></ul><p><strong>例1：Array数组均为数字或数字型字符串，则按指定的规则顺序：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//降序</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'87'</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token string">'81'</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出：21,27,64,81,87</span><span class="token comment" spellcheck="true">//升序</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'87'</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token string">'81'</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">xmx</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> b<span class="token operator">-</span>a<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>xmx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出：87,81,64,27,21</span></code></pre><h4 id="区分大小写的字母排序"><a href="#区分大小写的字母排序" class="headerlink" title="区分大小写的字母排序"></a>区分大小写的字母排序</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Z'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'V'</span><span class="token punctuation">,</span><span class="token string">'I'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> x <span class="token operator">></span> y <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>——————OUTPUT——————<span class="token punctuation">[</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span> <span class="token punctuation">]</span></code></pre><h4 id="对象属性条件排序"><a href="#对象属性条件排序" class="headerlink" title="对象属性条件排序"></a>对象属性条件排序</h4><p>当数组元素为多属性的对象时，我们可能需要根据不同的属性来具体排序，比如以下数组中，我们想按照年龄降序排列：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"code"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span>grade<span class="token punctuation">:</span><span class="token number">98</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"zevin"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>grade<span class="token punctuation">:</span><span class="token number">94</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"j"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">,</span>grade<span class="token punctuation">:</span><span class="token number">91</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age <span class="token operator">></span> b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>——————OUTPUT——————<span class="token punctuation">[</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'zevin'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token number">94</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'j'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token number">91</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'code'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token number">98</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre><h4 id="自定义根据对象属性"><a href="#自定义根据对象属性" class="headerlink" title="自定义根据对象属性"></a>自定义根据对象属性</h4><p>封装一个函数sort，接收两个形参：需要排序的数组arr以及排序依据的属性键名property。其中用闭包的写法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"code"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span>grade<span class="token punctuation">:</span><span class="token number">98</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"zevin"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>grade<span class="token punctuation">:</span><span class="token number">94</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"j"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">,</span>grade<span class="token punctuation">:</span><span class="token number">91</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>property<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> a<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token string">"grade"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>——————OUTPUT——————<span class="token punctuation">[</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'code'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token number">98</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'zevin'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token number">94</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'j'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token number">91</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre><h1 id="数组拼接concat-string也有"><a href="#数组拼接concat-string也有" class="headerlink" title="数组拼接concat()- string也有"></a>数组拼接concat()- string也有</h1><p>先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。所以concat()<strong>不影响原数组</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>numbers<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2] [1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>numbers<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2] [1,2,5,4,3,3,4,5,1,2]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> array3 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> newArray <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>concat<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [&amp;#123; a: 1 &amp;#125;, &amp;#123; b: 2 &amp;#125;]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1 </span></code></pre><h1 id="数组拼接用…"><a href="#数组拼接用…" class="headerlink" title="数组拼接用…"></a>数组拼接用…</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'newEle'</span><span class="token punctuation">,</span><span class="token operator">...</span>array1<span class="token punctuation">,</span><span class="token string">'newEle'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h1 id="创建子数组方法slice-string也有"><a href="#创建子数组方法slice-string也有" class="headerlink" title="创建子数组方法slice()- string也有"></a>创建子数组方法slice()- string也有</h1><p>slice(start,end)方法需要两个参数start和end，返回这个数组中从start位置到(但不包含)end位置的一个子数组；如果end为undefined或不存在，则返回从start位置到数组结尾的所有项，不影响原数组。</p><ul><li>　　如果start是负数，则start = max(length + start,0)</li><li>　　如果end是负数，则end = max(length + end,0)</li><li>　　start和end无法交换位置</li><li>　　如果没有参数，则返回原数组</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-3+5=2 -> [3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//max(5 + -8,0)=0 -> [1,2,3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-3+5=2 -> [1,2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-2+5=3;-1+5=4; -> [4</span></code></pre><p>slice()方法返回当前数组的一个浅拷贝</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>newNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2] [1,2]</span></code></pre><p>对于参数，实际转换成数字</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3,4,5]</span></code></pre><h1 id="数组删改特定位置内容方法-splice"><a href="#数组删改特定位置内容方法-splice" class="headerlink" title="数组删改特定位置内容方法  splice()"></a>数组删改特定位置内容方法  splice()</h1><p>用于删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，该方法<strong>会改变原数组</strong></p><p>splice()返回一个由删除元素组成的数组，或者如果没有删除元素就返回一个空数组</p><p>splice(start,end)的第一个参数start指定了插入或删除的起始位置。如果start是负数，则start = max(length + start,0)；如果start是NaN，则相当于start = 0</p><p>如果只提供一个元素，相当于将原数组在指定位置拆分成两个数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1,2,3,4] [5,6,7,8]</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-4+8=4; [1,2,3,4] [5,6,7,8]</span></code></pre><p>splice(start,end)中start/end是负数或NaN或undefined，则number=0，因此不删除元素</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [3,4,5,6,7,8] [1,2]</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1,2,3,4,5,6,7,8] []</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1] [2,3,4,5,6,7,8]</span></code></pre><h2 id="删除并添加（中间插入）"><a href="#删除并添加（中间插入）" class="headerlink" title="删除并添加（中间插入）"></a>删除并添加（中间插入）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,'a','b',3,4,5] []</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,[1,2],3,3,4,5] ['a','b']</span></code></pre><h1 id="数组位置方法"><a href="#数组位置方法" class="headerlink" title="数组位置方法"></a>数组位置方法</h1><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h2><p>ndexOf(search,start)，返回search首次出现的位置，如果没有找到则返回-1</p><p>search参数表示要搜索的项；使用严格相等运算符（===）进行比较</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//max(0,-1+7)=6; -1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//max(0,-5+7)=2; 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//max(0,-50+7)=0; 0</span></code></pre><p>对于对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'Nicholas'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'Nicholas'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> morePeople <span class="token operator">=</span> <span class="token punctuation">[</span>person<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1,因为person和people[0]虽然值相同，但是是两个引用</span><span class="token function">alert</span><span class="token punctuation">(</span>morePeople<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0，因为person和morepeople[0]是同一个引用</span><span class="token function">alert</span><span class="token punctuation">(</span>morePeople<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'Nicholas'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1,因为不是同一个引用</span></code></pre><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><p>lastIndexOf()从右向左查找</p><p>lastIndexOf(search,start)方法接收search和start两个参数，返回search第一次出现的位置，如果没有找到则返回-1</p><p>search参数表示要搜索的项；使用严格相等运算符（===）进行比较</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span></code></pre><p>函数会将start非数字值(undefined除外)转换为数。若忽略该参数或该参数为undefined或NaN时，start = 0</p><p>与字符串的lastIndexOf()方法不同，当search方法为负数时，search = max(0,length+search)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//max(0,-1+7)=6; 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//max(0,-50+7)=0; -1</span></code></pre><h1 id="数组归并方法"><a href="#数组归并方法" class="headerlink" title="数组归并方法"></a>数组归并方法</h1><h2 id="reduce-prev-cur-index-array-–求和-求积-求最大值-去重-obj中乘积求和"><a href="#reduce-prev-cur-index-array-–求和-求积-求最大值-去重-obj中乘积求和" class="headerlink" title="reduce(prev, cur, index, array) –求和 求积 求最大值 去重 obj中乘积求和"></a>reduce(prev, cur, index, array) –求和 求积 求最大值 去重 obj中乘积求和</h2><ul><li>初始变量，当前变量，索引，原数组对象</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组求和</span><span class="token keyword">var</span> product <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组求积</span><span class="token keyword">var</span> max <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span><span class="token operator">?</span>x<span class="token punctuation">:</span>y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求最大值</span><span class="token comment" spellcheck="true">//数组去重：</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">const</span> slimArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>prev<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prev  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求对象里的数乘积再求和：</span><span class="token keyword">const</span> fruitArr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> quantity<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> quantity<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> totalPrice <span class="token operator">=</span> fruitArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> prev <span class="token operator">+</span> current<span class="token punctuation">.</span>price <span class="token operator">*</span> current<span class="token punctuation">.</span>quantity<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>    <span class="token keyword">return</span> prev<span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1 2</span><span class="token comment" spellcheck="true">// 3 3</span><span class="token comment" spellcheck="true">// 6 4</span><span class="token comment" spellcheck="true">// 10 5</span><span class="token comment" spellcheck="true">//最后结果：15</span></code></pre><p>二维数组的扁平化</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 二维数组扁平化</span><span class="token keyword">var</span> flatten <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flatten<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5, 6]</span></code></pre><h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h2><p>它按照数组索引从高到低（从右到左）处理数组，而不是从低到高</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5 4</span><span class="token comment" spellcheck="true">//9 3</span><span class="token comment" spellcheck="true">//12 2</span><span class="token comment" spellcheck="true">//14 1</span><span class="token comment" spellcheck="true">//15</span></code></pre><h1 id="数组迭代方法"><a href="#数组迭代方法" class="headerlink" title="数组迭代方法"></a>数组迭代方法</h1><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>对数组的每一项运行给定函数，返回每次函数调用的结果组成的数组。array.map(currentValue, index, arr)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> multiplier <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  number<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  multiplerBy<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span>  <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> numbers<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>multiplerBy<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>multiplier<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[6, 12, 18, 24, 30]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> persons <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>firstname <span class="token punctuation">:</span> <span class="token string">"Malcom"</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">"Reynolds"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>firstname <span class="token punctuation">:</span> <span class="token string">"Kaylee"</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">"Frye"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>firstname <span class="token punctuation">:</span> <span class="token string">"Jayne"</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">"Cobb"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> fullname <span class="token operator">=</span> <span class="token punctuation">[</span>item<span class="token punctuation">.</span>firstname<span class="token punctuation">,</span>item<span class="token punctuation">.</span>lastname<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> fullname<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>getFullName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// The global variable</span><span class="token keyword">var</span> watchList <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"Title"</span><span class="token punctuation">:</span> <span class="token string">"Inception"</span><span class="token punctuation">,</span>    <span class="token string">"Year"</span><span class="token punctuation">:</span> <span class="token string">"2010"</span><span class="token punctuation">,</span>    <span class="token string">"Rated"</span><span class="token punctuation">:</span> <span class="token string">"PG-13"</span><span class="token punctuation">,</span>    <span class="token string">"Released"</span><span class="token punctuation">:</span> <span class="token string">"16 Jul 2010"</span><span class="token punctuation">,</span>    <span class="token string">"imdbRating"</span><span class="token punctuation">:</span> <span class="token string">"8.8"</span><span class="token punctuation">,</span>    <span class="token string">"imdbVotes"</span><span class="token punctuation">:</span> <span class="token string">"1,446,708"</span><span class="token punctuation">,</span>    <span class="token string">"imdbID"</span><span class="token punctuation">:</span> <span class="token string">"tt1375666"</span><span class="token punctuation">,</span>    <span class="token string">"Type"</span><span class="token punctuation">:</span> <span class="token string">"movie"</span><span class="token punctuation">,</span>    <span class="token string">"Response"</span><span class="token punctuation">:</span> <span class="token string">"True"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"Title"</span><span class="token punctuation">:</span> <span class="token string">"Interstellar"</span><span class="token punctuation">,</span>    <span class="token string">"Year"</span><span class="token punctuation">:</span> <span class="token string">"2014"</span><span class="token punctuation">,</span>    <span class="token string">"Rated"</span><span class="token punctuation">:</span> <span class="token string">"PG-13"</span><span class="token punctuation">,</span>    <span class="token string">"Released"</span><span class="token punctuation">:</span> <span class="token string">"07 Nov 2014"</span><span class="token punctuation">,</span>    <span class="token string">"imdbRating"</span><span class="token punctuation">:</span> <span class="token string">"8.6"</span><span class="token punctuation">,</span>    <span class="token string">"imdbVotes"</span><span class="token punctuation">:</span> <span class="token string">"910,366"</span><span class="token punctuation">,</span>    <span class="token string">"imdbID"</span><span class="token punctuation">:</span> <span class="token string">"tt0816692"</span><span class="token punctuation">,</span>    <span class="token string">"Type"</span><span class="token punctuation">:</span> <span class="token string">"movie"</span><span class="token punctuation">,</span>    <span class="token string">"Response"</span><span class="token punctuation">:</span> <span class="token string">"True"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"Title"</span><span class="token punctuation">:</span> <span class="token string">"The Dark Knight"</span><span class="token punctuation">,</span>    <span class="token string">"Year"</span><span class="token punctuation">:</span> <span class="token string">"2008"</span><span class="token punctuation">,</span>    <span class="token string">"Rated"</span><span class="token punctuation">:</span> <span class="token string">"PG-13"</span><span class="token punctuation">,</span>    <span class="token string">"Released"</span><span class="token punctuation">:</span> <span class="token string">"18 Jul 2008"</span><span class="token punctuation">,</span>    <span class="token string">"imdbRating"</span><span class="token punctuation">:</span> <span class="token string">"9.0"</span><span class="token punctuation">,</span>    <span class="token string">"imdbVotes"</span><span class="token punctuation">:</span> <span class="token string">"1,652,832"</span><span class="token punctuation">,</span>    <span class="token string">"imdbID"</span><span class="token punctuation">:</span> <span class="token string">"tt0468569"</span><span class="token punctuation">,</span>    <span class="token string">"Type"</span><span class="token punctuation">:</span> <span class="token string">"movie"</span><span class="token punctuation">,</span>    <span class="token string">"Response"</span><span class="token punctuation">:</span> <span class="token string">"True"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//筛选元素</span><span class="token keyword">var</span> ratings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ratings<span class="token operator">=</span>watchList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item  <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  title<span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"Title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rating<span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"imdbRating"</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ratings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> filteredList <span class="token operator">=</span> watchList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>movie <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      title<span class="token punctuation">:</span> movie<span class="token punctuation">.</span>Title<span class="token punctuation">,</span>      rating<span class="token punctuation">:</span> movie<span class="token punctuation">.</span>imdbRating    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>movie <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// return true it will keep the item</span>    <span class="token comment" spellcheck="true">// return false it will reject the item</span>    <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>movie<span class="token punctuation">.</span>rating<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">8.0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><p>本质上与for循环迭代数组一样。如果需要有返回值，一般使用map方法</p><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>elem <span class="token operator">*</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, 4, 9]</span></code></pre><h2 id="forEach（）和map（）区别"><a href="#forEach（）和map（）区别" class="headerlink" title="forEach（）和map（）区别"></a>forEach（）和map（）区别</h2><ul><li>forEach：用来遍历数组中的每一项，这个方法执行没有返回值，不影响原数组</li><li>map：支持return，相当与原数组克隆了一份，把克隆的每项改变了，也不影响原数组</li></ul><h2 id="filter-可以用于删除个别obj元素"><a href="#filter-可以用于删除个别obj元素" class="headerlink" title="filter() - 可以用于删除个别obj元素"></a>filter() - 可以用于删除个别obj元素</h2><p>对数组中的每一项运行给定函数，该函数会返回true的项组成的数组。该方法常用于查询符合条件的所有数组项 </p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>elem <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [4, 5]    </span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, "a"]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, 3, 5]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getRating</span><span class="token punctuation">(</span>watchList<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Only change code below this line</span>  <span class="token keyword">var</span> averageRating<span class="token operator">=</span>watchList    <span class="token comment" spellcheck="true">// Use filter to find films directed by Christopher Nolan</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>film <span class="token operator">=</span><span class="token operator">></span> film<span class="token punctuation">.</span>Director <span class="token operator">===</span> <span class="token string">"Christopher Nolan"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Use map to convert their ratings from strings to numbers</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>film <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Number</span><span class="token punctuation">(</span>film<span class="token punctuation">.</span>imdbRating<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Use reduce to add together their ratings</span>    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sumOfRatings<span class="token punctuation">,</span> rating<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> sumOfRatings <span class="token operator">+</span> rating<span class="token punctuation">)</span> <span class="token operator">/</span>  <span class="token comment" spellcheck="true">// Divide by the number of Nolan films to get the average rating</span>  watchList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>film <span class="token operator">=</span><span class="token operator">></span> film<span class="token punctuation">.</span>Director <span class="token operator">===</span> <span class="token string">"Christopher Nolan"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">return</span> averageRating<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h2><p>对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。并且当且仅当数值中的所有元素调用判定函数都返回false，它才返回false</p><pre class=" language-js"><code class="language-js">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> elem<span class="token operator">%</span><span class="token number">2</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isNaN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token keyword">const</span> isCheap <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>price <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token keyword">const</span> isExpensive <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>price <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><p>对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true；只要有一项返回false，则返回false</p><pre class=" language-js"><code class="language-js">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>elem <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> elem<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><h2 id="遍历array-for…-in…-amp-for-…-of-…"><a href="#遍历array-for…-in…-amp-for-…-of-…" class="headerlink" title="遍历array for… in… &amp; for … of …."></a>遍历array for… in… &amp; for … of ….</h2><p>for….in 是es5标准， 此方法遍历数组效率低，主要是用来循环遍历对象的属性</p><p>1)、 for……in  遍历数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/25/js-array/1606722436063.png"></p><p>2)、for…..in 遍历对象</p><p>循环遍历对象的属性，js中动态获取key，得到某对象中相对应的value = obj[key]</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span><span class="token number">3</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">'---'</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p> for…….of   方法    （es6支持）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="实例总结"><a href="#实例总结" class="headerlink" title="实例总结"></a>实例总结</h1><h1 id="单个array"><a href="#单个array" class="headerlink" title="单个array"></a>单个array</h1><blockquote><p>可以改变原数组的方法总共有7种：包括unshift()、shift()、push()、pop()这4种栈和队列方法，reverse()和sort()这2种数组排列方法，数组删改方法splice()</p></blockquote><h2 id="判断数组中是否存在某个元素"><a href="#判断数组中是否存在某个元素" class="headerlink" title="判断数组中是否存在某个元素"></a>判断数组中是否存在某个元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> includeNum4 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">const</span> includeNum7 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> includeNum4 <span class="token operator">=</span> <span class="token boolean">true</span>  includeNum7 <span class="token operator">=</span> <span class="token boolean">false</span>  </code></pre><h2 id="单个array除掉重复的元素"><a href="#单个array除掉重复的元素" class="headerlink" title="单个array除掉重复的元素"></a>单个array除掉重复的元素</h2><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>norepeat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'ab'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">norepeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//['a','ab']</span></code></pre><h2 id="创造本地copy-arry"><a href="#创造本地copy-arry" class="headerlink" title="创造本地copy-arry"></a>创造本地copy-arry</h2><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> a <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 创造本身的copy</span></code></pre><h2 id="特定位置后面增加一个元素"><a href="#特定位置后面增加一个元素" class="headerlink" title="特定位置后面增加一个元素"></a>特定位置后面增加一个元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'kevin'</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">,</span> 'rose’<span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span>’Lily’<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//请注意 参数是 (index+1)</span><span class="token comment" spellcheck="true">//当下arr的结果是 ['kevin’, ‘Lily' , 'jack', 'rose']</span></code></pre><h2 id="删除特定位置的元素"><a href="#删除特定位置的元素" class="headerlink" title="删除特定位置的元素"></a>删除特定位置的元素</h2><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//请注意 参数是 index</span></code></pre><h2 id="替换特定位置的元素"><a href="#替换特定位置的元素" class="headerlink" title="替换特定位置的元素"></a>替换特定位置的元素</h2><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'John'</span><span class="token punctuation">)</span></code></pre><h2 id="array中删除删掉偶数，只保留奇数"><a href="#array中删除删掉偶数，只保留奇数" class="headerlink" title="array中删除删掉偶数，只保留奇数"></a>array中删除删掉偶数，只保留奇数</h2><pre class=" language-js"><code class="language-js">　<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 　　　　　　　<span class="token keyword">var</span> r <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> 　　　　　　　<span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span> 　　　　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 　　　　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 5, 9, 15]</span></code></pre><h2 id="array中删除删掉-null-0-NaN-undefined-“”"><a href="#array中删除删掉-null-0-NaN-undefined-“”" class="headerlink" title="array中删除删掉 null, 0, NaN, undefined, “”"></a>array中删除删掉 null, 0, NaN, undefined, “”</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]</span></code></pre><h2 id="找到Array中第一个满足条件的元素"><a href="#找到Array中第一个满足条件的元素" class="headerlink" title="找到Array中第一个满足条件的元素"></a>找到Array中第一个满足条件的元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">const</span> bigNum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> bigNum <span class="token operator">=</span> <span class="token number">22</span></code></pre><h2 id="array中满足某一条件的index位置"><a href="#array中满足某一条件的index位置" class="headerlink" title="array中满足某一条件的index位置"></a>array中满足某一条件的index位置</h2><pre class=" language-js"><code class="language-js"><span class="token function">dropElements</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">dropElements</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找出满足条件的index</span> <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">:</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="单个array中含有多层array，flatten-array"><a href="#单个array中含有多层array，flatten-array" class="headerlink" title="单个array中含有多层array，flatten array"></a>单个array中含有多层array，flatten array</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">steamrollArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> flat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> flat<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">steamrollArray</span><span class="token punctuation">(</span>flat<span class="token punctuation">)</span> <span class="token punctuation">:</span> flat<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">steamrollArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1 2 3 4</span><span class="token comment" spellcheck="true">//原生array</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: [0, 1, 2, 3, 4]</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//但是对于depth有要求</span><span class="token comment" spellcheck="true">// expected output: [0, 1, 2, [3, 4]]</span><span class="token comment" spellcheck="true">//其实要有递归的思想</span><span class="token keyword">function</span> <span class="token function">arraySum</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>array <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sum <span class="token operator">+</span><span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span>            sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">arraySum</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">arraySum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span></code></pre><h1 id="两个array"><a href="#两个array" class="headerlink" title="两个array"></a>两个array</h1><h2 id="两个数组中的不同元素"><a href="#两个数组中的不同元素" class="headerlink" title="两个数组中的不同元素"></a>两个数组中的不同元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getArrDifference</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">===</span> arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">diff</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> arr3<span class="token operator">=</span>arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将arr1和arr2合并为arr3</span>      <span class="token keyword">function</span> <span class="token function">isContain</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//找出arr3中不存在于arr1和arr2中的元素</span>      <span class="token keyword">return</span> arr1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>arr2<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span>；   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      newArr <span class="token operator">=</span> arr3<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isContain<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">diffArray</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">diff</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">diff</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">diff</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//return index true/false</span></code></pre><h2 id="取出两个数组的相同元素"><a href="#取出两个数组的相同元素" class="headerlink" title="取出两个数组的相同元素"></a>取出两个数组的相同元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getArrEqual</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getArrEqual</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="array中找出-array1没有的"><a href="#array中找出-array1没有的" class="headerlink" title="array中找出 array1没有的"></a>array中找出 array1没有的</h2><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">!</span>arr1<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="两个array的遍历（多层array）"><a href="#两个array的遍历（多层array）" class="headerlink" title="两个array的遍历（多层array）"></a>两个array的遍历（多层array）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">whatIsInAName</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> source<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Only change code below this line </span>  <span class="token keyword">var</span> sourceKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> person <span class="token keyword">in</span> collection<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> haveAll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> sourceKeys<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>collection<span class="token punctuation">[</span>person<span class="token punctuation">]</span><span class="token punctuation">[</span>sourceKeys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> source<span class="token punctuation">[</span>sourceKeys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        haveAll <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>haveAll<span class="token punctuation">)</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>collection<span class="token punctuation">[</span>person<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Only change code above this line</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">whatIsInAName</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> first<span class="token punctuation">:</span> <span class="token string">"Romeo"</span><span class="token punctuation">,</span> last<span class="token punctuation">:</span> <span class="token string">"Montague"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> first<span class="token punctuation">:</span> <span class="token string">"Mercutio"</span><span class="token punctuation">,</span> last<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> first<span class="token punctuation">:</span> <span class="token string">"Tybalt"</span><span class="token punctuation">,</span> last<span class="token punctuation">:</span> <span class="token string">"Capulet"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> last<span class="token punctuation">:</span> <span class="token string">"Capulet"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="计算两个数组的交集、差集、并集、补集-（用filter-concat）"><a href="#计算两个数组的交集、差集、并集、补集-（用filter-concat）" class="headerlink" title="计算两个数组的交集、差集、并集、补集 （用filter concat）"></a>计算两个数组的交集、差集、并集、补集 （用filter concat）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//交集</span><span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//差集</span><span class="token keyword">var</span> d <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//补集</span><span class="token keyword">var</span> e <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//并集</span><span class="token keyword">var</span> f <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">////jquery</span><span class="token comment" spellcheck="true">// 交集</span><span class="token keyword">let</span> intersect <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 差集</span><span class="token keyword">let</span> minus <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 补集</span><span class="token keyword">let</span> complement  <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 并集</span><span class="token keyword">let</span> unionSet <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数组a："</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数组b："</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的交集："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的差集："</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的补集："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的并集："</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的交集："</span><span class="token punctuation">,</span> intersect<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的差集："</span><span class="token punctuation">,</span> minus<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的补集："</span><span class="token punctuation">,</span> complement<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的并集："</span><span class="token punctuation">,</span> unionSet<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="数组功能扩展"><a href="#数组功能扩展" class="headerlink" title="数组功能扩展"></a>数组功能扩展</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//数组功能扩展</span><span class="token comment" spellcheck="true">//数组迭代函数</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>each <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  fn <span class="token operator">=</span> fn <span class="token operator">||</span> Function<span class="token punctuation">.</span>K<span class="token punctuation">;</span>   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> res <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组是否包含指定元素</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>contains <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>suArr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> suArr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不重复元素构成的数组</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uniquelize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> ra <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ra<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          ra<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> ra<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个数组的交集</span>Array<span class="token punctuation">.</span>intersect <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">uniquelize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">?</span> o <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个数组的差集</span>Array<span class="token punctuation">.</span>minus <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">uniquelize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> o<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个数组的补集</span>Array<span class="token punctuation">.</span>complement <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span>Array<span class="token punctuation">.</span><span class="token function">intersect</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个数组并集</span>Array<span class="token punctuation">.</span>union <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uniquelize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数组a："</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数组b："</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的交集："</span><span class="token punctuation">,</span> Array<span class="token punctuation">.</span><span class="token function">intersect</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的差集："</span><span class="token punctuation">,</span> Array<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的补集："</span><span class="token punctuation">,</span> Array<span class="token punctuation">.</span><span class="token function">complement</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a与b的并集："</span><span class="token punctuation">,</span> Array<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js regular expression</title>
      <link href="2020/11/24/js-regular-expression/"/>
      <url>2020/11/24/js-regular-expression/</url>
      
        <content type="html"><![CDATA[<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><ul><li>g: 表示全局(global)模式，即模式将被应用于所有字符串，而并非在发现第一个匹配项时立即停止</li><li>i: 表示不区分大小写(case-insensitive)模式，即在确定匹配项时忽略模式与字符串的大小写</li><li>m: 表示多行(multi-line)模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项</li><li>s: dotAll / singleline模式：. 可以匹配换行符</li><li>u: unicode，unicode模式：匹配unicode字符集</li></ul><pre><code> console.log(/^.$/.test(&quot;\uD842\uDFB7&quot;)); console.log(/^.$/u.test(&quot;\uD842\uDFB7&quot;));复制代码</code></pre><ul><li><p>y: sticky，粘性模式：匹配正则中lastIndex属性指定位置的字符，并且如果没有匹配也不尝试从任何后续的索引中进行匹配</p><h2 id><a href="#" class="headerlink" title></a></h2></li></ul><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p><code>. </code>转义符</p><ul><li>匹配行结束符（\n \r \u2028 或 \u2029）以外的任意单个字符</li><li>在 <code>字符集合（Character Sets）</code> 中，. 将失去其特殊含义，表示的是原始值</li></ul><p><code>\ </code>转义符，它有两层含义 </p><ul><li>表示下一个具有特殊含义的字符为字面值 </li><li>表示下一个字符具有特殊含义（转义后的结果是元字符内约定的）</li></ul><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配除换行符外的任意一个字符</td></tr><tr><td><code>\d</code></td><td>匹配任意一个数字（0-9）</td></tr><tr><td><code>\w</code></td><td>匹配任意一个字母、数字或下划线</td></tr><tr><td><code>\s</code></td><td>匹配任意一个空白符</td></tr></tbody></table><blockquote><p> <strong><code>\d</code> <code>\w</code> <code>\s</code> 如果把小写变为大写，就是取相反的意思，比如 <code>\D</code> 表示任意一个非数字字符。</strong></p></blockquote><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\s</code></td><td>匹配任意一个空白符</td></tr><tr><td><code>\t</code></td><td>匹配一个制表符</td></tr><tr><td><code>\n</code></td><td>匹配一个换行符</td></tr><tr><td><code>\f</code></td><td>匹配一个换页符</td></tr><tr><td><code>\v</code></td><td>匹配一个垂直制表符</td></tr><tr><td><code>\r</code></td><td>匹配一个回车符</td></tr></tbody></table><h2 id="字符集合"><a href="#字符集合" class="headerlink" title="字符集合"></a>字符集合</h2><p><code>[xyz]</code>  一个字符集合。匹配方括号中的任意字符，包括<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types">转义序列</a>。你可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。<br>例如，<code>[abcd]</code> 和 <code>[a-d]</code>是一样的。他们都匹配”brisket”中的‘b’,也都匹配“city”中的‘c’。<code>/[a-z.]+/</code> 和<code>/[\w.]+/</code>与字符串“test.i.ng”匹配。</p><h2 id="范围的元字符"><a href="#范围的元字符" class="headerlink" title="范围的元字符"></a>范围的元字符</h2><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>`</td><td>`</td></tr><tr><td><code>[...]</code></td><td>多选一，匹配括号中任意一个元素</td></tr><tr><td><code>[a-z]</code></td><td>匹配 a 到 z 之间任意一个元素（按照 ASCII 表，包含 a,z）</td></tr><tr><td><code>[^...]</code></td><td>取反，匹配不能是括号中的任意一个元素</td></tr></tbody></table><h2 id="量词元字符"><a href="#量词元字符" class="headerlink" title="量词元字符"></a>量词元字符</h2><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>出现 0 到多次</td></tr><tr><td><code>+</code></td><td>出现 1 到多次</td></tr><tr><td><code>？</code></td><td>出现 0 或 1 次，如 colou?r</td></tr><tr><td><code>&#123;m&#125;</code></td><td>出现 m 次</td></tr><tr><td><code>&#123;m&#125;</code></td><td>至少出现 m 次</td></tr><tr><td><code>&#123;m,n&#125;</code></td><td>出现 m 到 n 次</td></tr></tbody></table><blockquote><p>注意：</p><ol><li>量词的使用要注意其作用范围，其一般只作用于前面的那个字符，如正则 <code>a+</code> 表示匹配字符 <code>a</code> 1 次或多次。如果量词跟在分组 <code>()</code> 后，那么量词的作用范围就是前面 <code>()</code> 内的内容。</li><li>量词默认是贪婪的，即极可能多的去匹配字符。如果要实现把量词变为非贪婪的，那么要在量词后加个 <code>?</code>，这样量词就变为非贪婪了。</li></ol></blockquote><h2 id="断言-定位单词边界、行的开始结束以及环视"><a href="#断言-定位单词边界、行的开始结束以及环视" class="headerlink" title="断言(定位单词边界、行的开始结束以及环视)"></a>断言(定位单词边界、行的开始结束以及环视)</h2><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\b</code></td><td>匹配单词的边界</td></tr><tr><td><code>^</code></td><td>匹配行的开始，多行模式时，可以匹配任意行开头</td></tr><tr><td><code>$</code></td><td>匹配行的结束，多行模式时，可以匹配任意行结尾</td></tr><tr><td><code>\A</code></td><td>只匹配整个字符串的开始，不支持多行模式</td></tr><tr><td><code>\Z</code></td><td>只匹配整个字符串的结束，不支持多行模式</td></tr><tr><td><code>(?&lt;=Y)X</code></td><td>匹配前面是 Y 的 X</td></tr><tr><td><code>(?&lt;!Y)X</code></td><td>匹配前面不是 Y 的 X</td></tr><tr><td><code>(?=Y)X</code></td><td>匹配后面是 Y 的 X</td></tr><tr><td><code>(?!Y)X</code></td><td>匹配后面不是 Y 的 X</td></tr></tbody></table><blockquote><p>注意：</p><ol><li>反向引用里面“断言是没有带过去的”，复用的部分只是匹配到的文本内容，这段很重要，也是自己也开始没有意识到的。</li><li>断言只是匹配位置，准确地说就是只负责定位，不会匹配任何字符！这点很重要。</li><li>环视中 <code>\W</code> 不等于 <code>!\w</code>，</li></ol></blockquote><p><strong>Reference</strong></p><p>1.<a href="https://blog.csdn.net/lxcnn/category_538256.html">https://blog.csdn.net/lxcnn/category_538256.html</a></p><p>2.<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></p><p>3.<a href="https://www.cnblogs.com/xiaohuochai/p/5612230.html">https://www.cnblogs.com/xiaohuochai/p/5612230.html</a></p><p><strong>Tool</strong></p><p><a href="https://regex101.com/">https://regex101.com/</a></p><p><a href="https://juejin.cn/post/6844904182835757064">https://juejin.cn/post/6844904182835757064</a></p><p><a href="https://regexper.com/">https://regexper.com/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js string</title>
      <link href="2020/11/24/js-string/"/>
      <url>2020/11/24/js-string/</url>
      
        <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p><img src="/2020/11/24/js-string/1606214735012.png"></p><h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><p>字符串String是由双引号(“)或单引号(‘)声明的</p><h2 id="反引号-多行字符串-amp-嵌入变量"><a href="#反引号-多行字符串-amp-嵌入变量" class="headerlink" title="反引号 `` - 多行字符串 &amp; 嵌入变量"></a>反引号 `` - 多行字符串 &amp; 嵌入变量</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 普通字符串</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`In JavaScript '\n' is a line-feed.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 多行字符串 - 空格、缩进和换行都会被保留在输出中。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`In JavaScript this isnot legal.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 字符串中嵌入变量 - 模板字符串中嵌入变量，要将变量名写在$&amp;#123;&amp;#125;之中</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token string">"today"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello $&amp;#123;name&amp;#125;, how are you $&amp;#123;time&amp;#125;?`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Hello Bob, how are you today?</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`$&amp;#123;x&amp;#125; + $&amp;#123;y&amp;#125; = $&amp;#123;x + y&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "1 + 2 = 3"</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`$&amp;#123;func()&amp;#125; World`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "Hello World"</span></code></pre><h2 id="反斜线-特殊符号"><a href="#反斜线-特殊符号" class="headerlink" title="反斜线- 特殊符号"></a>反斜线- 特殊符号</h2><pre class=" language-js"><code class="language-js"><span class="token string">'Wouldn\'t you prefer this book?'</span>    <span class="token comment" spellcheck="true">//"Wouldn't you prefer this book?"</span><span class="token string">'Did she say \'Hello\'?'</span>             <span class="token comment" spellcheck="true">//"Did she say 'Hello'?"</span><span class="token string">"Did she say \"Hello\"?"</span>             <span class="token comment" spellcheck="true">//"Did she say "Hello"?"</span><span class="token string">"Prev \\ Next"</span>                         <span class="token comment" spellcheck="true">// "Prev \ Next"</span><span class="token string">'\a'</span>                                 <span class="token comment" spellcheck="true">// "a"</span></code></pre><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><pre class=" language-js"><code class="language-js">\<span class="token number">0</span> 空字节\n 换行\t 制表\b 空格\r 回车\f 进纸\\ 斜杠\' 单引号\" 双引号\xnn <span class="token function">以十六进制nn表示一个字符</span><span class="token punctuation">(</span>n为<span class="token number">0</span><span class="token operator">-</span>f<span class="token punctuation">)</span>，如\x41表示<span class="token string">'A'</span>\unnnn <span class="token function">以十六进制nnnn表示一个Unicode字符</span><span class="token punctuation">(</span>n为<span class="token number">0</span><span class="token operator">-</span>f<span class="token punctuation">)</span>，如\u03a3表示希腊字符ε</code></pre><p>快速转为string 用+</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> lang <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span>lang <span class="token operator">=</span> lang <span class="token operator">+</span> <span class="token string">"script"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//'javascript'</span></code></pre><h2 id="string内容操作函数-toString-、toLocaleString-、valueOf"><a href="#string内容操作函数-toString-、toLocaleString-、valueOf" class="headerlink" title="string内容操作函数 toString()、toLocaleString()、valueOf()"></a>string内容操作函数 toString()、toLocaleString()、valueOf()</h2><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"test"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"test"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"test"</span></code></pre><p>由于alert()要接收字符串参数，它会在后台调用toString()方法，会得到与toString()方法相同的结果</p><pre class=" language-js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'1,2,3'</span></code></pre><h2 id="chartAt-、中括号-、charCodeAt-和fromCharCode"><a href="#chartAt-、中括号-、charCodeAt-和fromCharCode" class="headerlink" title="chartAt()、中括号[]、charCodeAt()和fromCharCode()"></a>chartAt()、中括号[]、charCodeAt()和fromCharCode()</h2><p>chartAt()</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//e</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//''</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//h </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//h</span><span class="token comment" spellcheck="true">//argument会被转为数字</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'e'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'h'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'h'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'h'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'l'</span></code></pre><p>其他方式的取char</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'e'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'e'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'e'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'e'</span></code></pre><p>中括号[]</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//h</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//e</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span></code></pre><p>charCodeAt() 返回的是指定位置的字符16位Unicode编码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//104</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//104</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//101</span></code></pre><p>fromCharCode()接收一个或多个字符编码，然后把它们转换成一个字符串</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">0x6211</span><span class="token punctuation">,</span><span class="token number">0x662f</span><span class="token punctuation">,</span><span class="token number">0x5c0f</span><span class="token punctuation">,</span><span class="token number">0x706b</span><span class="token punctuation">,</span><span class="token number">0x67f4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'我是小火柴'</span></code></pre><h2 id="字符串拼接-concat-和加号"><a href="#字符串拼接-concat-和加号" class="headerlink" title="字符串拼接   concat()和加号+"></a>字符串拼接   concat()和加号+</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> stringValue <span class="token operator">=</span> <span class="token string">'hello '</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> stringValue<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world!'</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'false'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错，第一个参数必须字符串</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>valueOf<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>o <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'12'</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>valueOf<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>o <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span></code></pre><blockquote><p>[注意]由于数组也存在concat()方法，参数会按照首先出现的参数是数组还是字符串来决定如何转换</p><p>‘1,2,3,’.concat([4,5]);    //    ‘1,2,3,4,5’<br>        [1,2,3].concat(‘,4,5’);    //    [1, 2, 3, “,4,5”]</p></blockquote><h2 id="string变array-split"><a href="#string变array-split" class="headerlink" title="string变array - split()"></a>string变array - split()</h2><pre class=" language-js"><code class="language-js">stringObject<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>separator<span class="token punctuation">,</span>howmany<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//字符串或正则表达式，从该参数指定的地方分割 stringObject。</span><span class="token comment" spellcheck="true">//howmany (可选)该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</span></code></pre><pre class=" language-js"><code class="language-js">str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\W/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去掉所有的非字母</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//按照空格</span></code></pre><h2 id="创建子字符串-slice-、substr-（弃用）和substring"><a href="#创建子字符串-slice-、substr-（弃用）和substring" class="headerlink" title="创建子字符串 slice()、substr()（弃用）和substring()"></a>创建子字符串 slice()、substr()（弃用）和substring()</h2><p>slice() 返回这个字符串中从start位置的字符到(但不包含)end位置的字符的一个子字符串；如果end为undefined或不存在，则返回从start位置到字符串结尾的所有字符。 <strong>start 和 end 不能调换</strong></p><p>　　<strong>如果start是负数</strong>，则start = max(length + start,0)</p><p>　　<strong>如果end是负数</strong>，则end = max(length + end,0)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> stringValue <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'he'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello wor'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'ld'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo '</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//''</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//''</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//''</span></code></pre><p>特殊argument</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> stringValue <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//''</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'el'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo'</span></code></pre><p>substring(start,end) 返回这个字符串中从start位置的字符到(但不包含)end位置的字符的一个子字符串；如果end为undefined或不存在，则返回从start位置到字符串结尾的所有字符</p><p><strong>如果任一参数是NaN或负数</strong>，则被0取代</p><p><strong>如果任一参数大于字符串长度</strong>，则被字符串长度取代</p><p><strong>如果start 大于 end</strong>，则交换它们的值 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> stringValue <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//''</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'he'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'he'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span></code></pre><p>特殊的值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> stringValue <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'el'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'llo'</span></code></pre><h2 id="大小写转换-toLowerCase-、toLocaleLowerCase-针对地区-、toUpperCase-、toLocaleUpperCase-针对地区"><a href="#大小写转换-toLowerCase-、toLocaleLowerCase-针对地区-、toUpperCase-、toLocaleUpperCase-针对地区" class="headerlink" title="大小写转换 toLowerCase()、toLocaleLowerCase()(针对地区)、toUpperCase()、toLocaleUpperCase()(针对地区)"></a>大小写转换 toLowerCase()、toLocaleLowerCase()(针对地区)、toUpperCase()、toLocaleUpperCase()(针对地区)</h2><h2 id="查找子串位置-indexOf-和lastIndexOf"><a href="#查找子串位置-indexOf-和lastIndexOf" class="headerlink" title="查找子串位置  indexOf()和lastIndexOf()"></a>查找子串位置  indexOf()和lastIndexOf()</h2><p>indexOf(searchString,start) 返回searchString首次出现的位置，如果没有找到则返回-1</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'hello world world'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//15</span></code></pre><p>与indexOf()不同，lastIndexOf()从右向左查找</p><p>lastIndexOf(searchString,start) 返回searchString第一次出现的位置，如果没有找到则返回-1。 searchString表示要搜索的子字符串；start表示该搜索的开始位置，若忽略该参数或该参数为undefined、NaN时，start = length - 1；若start为负数，start = 0。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'hello world world'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//15</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//15</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//15</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//12 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9 </span></code></pre><p><strong>lastIndexOf()方法常用于获取URL地址中的扩展名</strong> </p><h2 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h2><h3 id="正则基本介绍以及工具"><a href="#正则基本介绍以及工具" class="headerlink" title="正则基本介绍以及工具"></a><a href="https://www.runoob.com/regexp/regexp-syntax.html"><strong>正则基本介绍以及工具</strong></a></h3><p>工具 ： <a href="https://regex101.com/">https://regex101.com/</a></p><p><strong>常用元字符</strong></p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\b</td><td>匹配单词的开始或结束</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><p><strong>常用限定符</strong></p><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><p><strong>常用反义词</strong></p><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>\W</td><td>匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\B</td><td>匹配不是单词开头或结束的位置</td></tr><tr><td>[^x]</td><td>匹配除了x以外的任意字符</td></tr><tr><td>[^aeiou]</td><td>匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><h4 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h4><p>　　若匹配失败，则match()方法返回null</p><pre class=" language-js"><code class="language-js"><span class="token string">'x'</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/y/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'cat,bat,sat,fat'</span><span class="token punctuation">;</span><span class="token keyword">var</span> matches <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'at'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">,</span>matches<span class="token punctuation">.</span>index<span class="token punctuation">,</span>matches<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//['at'] 1 'cat,bat,sat,fat'</span><span class="token comment" spellcheck="true">//正则</span><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">'j1h342jg24g234j 3g24j1'</span><span class="token punctuation">;</span>array <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["1", "342", "24", "234", "3", "24", "1"]</span></code></pre><h4 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h4><p>接受一个正则或字符串的参数，返回匹配的内容在字符串中首次出现的位置，类似于不能设置起始位置的indexOf，找不到返回-1 (全局标志g影响)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'cat,bat,sat,fat'</span><span class="token punctuation">;</span><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex">/.at/</span><span class="token punctuation">;</span><span class="token keyword">var</span> pos <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'cat,bat,sat,fat'</span><span class="token punctuation">;</span><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex">/.at/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> pos <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'cat,bat,sat,fat'</span><span class="token punctuation">;</span><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token string">'at'</span><span class="token punctuation">;</span><span class="token keyword">var</span> pos <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span></code></pre><h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><p>用于替换一个或多个子字符串。它接收两个参数：第一个是正则表达式或字符串，表示待查找的内容；第二个是字符串或函数，表示替换内容。返回替换后的字符串 (全局标志g影响)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'cat,bat,sat,fat'</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'at'</span><span class="token punctuation">,</span><span class="token string">'ond'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// var result = string.replace(/at/,'ond');</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'cond,bat,sat,fat'</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'cat,bat,sat,fat'</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/at/g</span><span class="token punctuation">,</span><span class="token string">'ond'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'cond,bond,sond,fond'</span></code></pre><h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><p>基于指定的分隔符将一个字符串分割成多个字符串，并将结果放在一个数组中，分隔符可以是字符串，也可以是一个RegExp</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colorText <span class="token operator">=</span> <span class="token string">'red,blue,green,yellow'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["r", "e", "d", ",", "b", "l", "u", "e", ",", "g", "r", "e", "e", "n", ",", "y", "e", "l", "l", "o", "w"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["red", "blue", "green", "yellow"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["red", "blue"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["red", "blue", "green", "yellow"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["red,blue,green,yellow"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\,/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["red", "blue", "green", "yellow"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/e/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["r", "d,blu", ",gr", "", "n,y", "llow"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/[^\,]+/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将除去逗号以外的字符串变为分隔符["", ",", ",", ",", ""],IE8-会识别为[",",",",","]</span></code></pre><h2 id="去除首尾空格"><a href="#去除首尾空格" class="headerlink" title="去除首尾空格"></a>去除首尾空格</h2><p>trim()返回的是字符串的副本，所以原始字符串中的前置及后缀空格会保持不变，包括制表符(\t)、换行符(\n)和回车符(\r)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'    hello world   '</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span><span class="token string">'\r\nabc \t'</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'abc'</span></code></pre><h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><p>localeCompare()方法用于比较两个字符串</p><ul><li> 如果字符串在字母表中应该排在字符串参数之前，则返回一个负数(大多数情况下为-1)</li><li> 如果字符串等于字符串参数，则返回0</li><li> 如果字符串在字母表中应该排在字符串参数之后，则返回一个正数(大多数情况下为1)</li></ul><h2 id="结合array-join（）"><a href="#结合array-join（）" class="headerlink" title="结合array - join（）"></a>结合array - join（）</h2><p>如果不给join()方法传入任何值，则使用逗号作为分隔符</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'1,2,3'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'1 2 3'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'123'</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'---------'，9个连字符组成的字符串</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'1,,2,,3'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "h-e-l-l-o"</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'a-b'</span></code></pre><blockquote><p>若对象没有length属性，就不是类数组，也就不能调用数组的方法</p></blockquote><h2 id="栈-amp-LIFO-Last-In-First-Out"><a href="#栈-amp-LIFO-Last-In-First-Out" class="headerlink" title="栈&amp;LIFO - Last-In-First-Out"></a>栈&amp;LIFO - Last-In-First-Out</h2><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><p>接收任意数量的参数， 添加到数组末尾，并 修改后数组的长度。所以，该数组会改变原数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1] 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,'a'] 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,'a',true,&amp;#123;&amp;#125;] 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,'a',true,&amp;#123;&amp;#125;,[5,6]] 5</span></code></pre><p>　　如果需要合并两个数组，可以使用apply方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5,6] 6</span></code></pre><p>push()方法也可以向对象中添加元素，添加后的对象变成类数组对象，即新加入元素的键对应数组的索引，并且对象有一个length属性</p><p>push()方法也可以向对象中添加元素，添加后的对象变成类数组对象，即新加入元素的键对应数组的索引，并且对象有一个length属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// &amp;#123;a:1, 0:2, length: 1&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// &amp;#123;a:1, 0:2, 1:[3], length: 2&amp;#125;</span></code></pre><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p>　　pop()方法从数组末尾移除最后一项，减少数组的length值，然后返回移除的项。所以，该数组会改变原数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 'b'] 'c'</span></code></pre><p>　 </p><h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><p>　　shift()方法移除数组中的第一个项并返回该项，同时数组的长度减1。所以，该数组会改变原数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//['b', 'c'] 'a'</span></code></pre><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><p>　　unshift()方法在数组前端添加任意个项并返回新数组长度。所以，该数组会改变原数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['x', 'a', 'b', 'c'] 4</span></code></pre><p>　　当使用多个参数调用unshift()时，参数是一次性插入的而非一次一个地插入。这意味着最终的数组中插入的元素的顺序和它们在参数列表中的顺序一致</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['x','y','z','a', 'b', 'c'] 6</span></code></pre><h1 id="操作方程"><a href="#操作方程" class="headerlink" title="操作方程"></a>操作方程</h1><h2 id="js判断一个字符串是否包含在另一个字符串"><a href="#js判断一个字符串是否包含在另一个字符串" class="headerlink" title="js判断一个字符串是否包含在另一个字符串"></a>js判断一个字符串是否包含在另一个字符串</h2><pre class=" language-js"><code class="language-js"><span class="token string">'Blue Whale'</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// returns false</span><span class="token string">'Blue Whale'</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'Blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// returns true</span></code></pre><h2 id="js-替换指定位置的字符串"><a href="#js-替换指定位置的字符串" class="headerlink" title="js 替换指定位置的字符串"></a>js 替换指定位置的字符串</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//str:原始字符串，index,开始位置,changeStr，改变后的字</span><span class="token function">changeStr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>index<span class="token punctuation">,</span>changeStr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">+</span> changeStr<span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>index <span class="token operator">+</span> changeStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>js去掉所有的空格（连续空格）提内容</p><pre class=" language-js"><code class="language-js">array<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\s+/</span><span class="token punctuation">)</span></code></pre><h2 id="js正则去掉不是字母"><a href="#js正则去掉不是字母" class="headerlink" title="js正则去掉不是字母"></a>js正则去掉不是字母</h2><pre class=" language-js"><code class="language-js">str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[\W_]/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="js-正则将大小写之间分开"><a href="#js-正则将大小写之间分开" class="headerlink" title="js 正则将大小写之间分开"></a>js 正则将大小写之间分开</h2><pre class=" language-js"><code class="language-js">str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/([a-z])([A-Z])/g</span><span class="token punctuation">,</span> <span class="token string">"$1 $2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//TheAndyGriffith_Show</span><span class="token comment" spellcheck="true">//The Andy Griffith_Show</span><span class="token comment" spellcheck="true">//is followed by an uppercase letter [(?=[A-Z])]</span><span class="token comment" spellcheck="true">//whitespace character [\s]</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\s|_|(?=[A-Z])/</span><span class="token punctuation">)</span></code></pre><h2 id="应用正则"><a href="#应用正则" class="headerlink" title="应用正则"></a>应用正则</h2><h3 id="去掉非数字"><a href="#去掉非数字" class="headerlink" title="去掉非数字"></a>去掉非数字</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> s <span class="token operator">=</span><span class="token string">"价格4500元"</span><span class="token punctuation">;</span><span class="token keyword">var</span> num<span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^0-9]/ig</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4500</span><span class="token keyword">var</span> s <span class="token operator">=</span><span class="token string">"价格4500元，等级：2"</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^0-9]/ig</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//45002</span></code></pre><h3 id="替换指定符号"><a href="#替换指定符号" class="headerlink" title="替换指定符号"></a>替换指定符号</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">convertHTML</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Use Object Lookup to declare as many HTML entities as needed.</span>  <span class="token keyword">const</span> htmlEntities <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"&amp;"</span><span class="token punctuation">:</span> <span class="token string">"&amp;amp;"</span><span class="token punctuation">,</span>    <span class="token string">"&lt;"</span><span class="token punctuation">:</span> <span class="token string">"&amp;lt;"</span><span class="token punctuation">,</span>    <span class="token string">">"</span><span class="token punctuation">:</span> <span class="token string">"&amp;gt;"</span><span class="token punctuation">,</span>    <span class="token string">'"'</span><span class="token punctuation">:</span> <span class="token string">"&amp;quot;"</span><span class="token punctuation">,</span>    <span class="token string">"'"</span><span class="token punctuation">:</span> <span class="token string">"&amp;apos;"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Using a regex, replace characters with it's corresponding html entity</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/([&amp;&lt;>\"'])/g</span><span class="token punctuation">,</span> match <span class="token operator">=</span><span class="token operator">></span> htmlEntities<span class="token punctuation">[</span>match<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Binary-to-string-变化"><a href="#Binary-to-string-变化" class="headerlink" title="Binary to string 变化"></a>Binary to string 变化</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">binaryAgent</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\s/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">binaryAgent</span><span class="token punctuation">(</span><span class="token string">"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="字符串中的数字"><a href="#字符串中的数字" class="headerlink" title="字符串中的数字"></a>字符串中的数字</h2><pre class=" language-js"><code class="language-js"><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会提取字符串中的整数部分，遇到非整数会立即停止提取；适合去掉css中的单位</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 同上，可以提取小数</span></code></pre><h2 id="js保留两位小数方法总结"><a href="#js保留两位小数方法总结" class="headerlink" title="js保留两位小数方法总结"></a>js保留两位小数方法总结</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//num:要操作的数字     size：要保留的位数</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js  data types</title>
      <link href="2020/11/24/js-data-types/"/>
      <url>2020/11/24/js-data-types/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h1><p>包含值的数据类型：</p><ul><li>字符串（string）</li><li>数字（number）</li><li>布尔（boolean）</li><li>对象（object）</li><li>函数（function）</li></ul><p>有三种对象类型：</p><ul><li>对象（Object）</li><li>日期（Date）</li><li>数组（Array）</li></ul><p>同时有两种不能包含值的数据类型：</p><ul><li><p>null</p></li><li><p>undefined</p></li></ul><p><img src="/2020/11/24/js-data-types/1607252500863.png"></p><h2 id="原始值-primitive-values"><a href="#原始值-primitive-values" class="headerlink" title="原始值( primitive values )"></a>原始值( primitive values )</h2><p>除 Object 以外的所有类型都是不可变的（值本身无法被改变。类似于：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p><p>原始值明显的特征是不可更改，任何方法都无法更改一个原始值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> s<span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello'</span></code></pre><h2 id="复杂值（引用数据类型）"><a href="#复杂值（引用数据类型）" class="headerlink" title="复杂值（引用数据类型）"></a>复杂值（<strong>引用数据类型</strong>）</h2><p>复杂值可以由很多不同类型的javascript对象组成。复杂对象其在内存中的大小是未知的，因为复杂对象可以包含任何值，而不是一个特定的已知值。比如：对象(Object)、数组(Array)、函数(Function)。</p><p>对象和原始值不同，它们是可变的，它们的值是可修改的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><h2 id="储存方式"><a href="#储存方式" class="headerlink" title="储存方式"></a>储存方式</h2><h3 id="栈存储"><a href="#栈存储" class="headerlink" title="栈存储"></a>栈存储</h3><p>　　因为原始值占据空间固定，是简单的数据段，为了便于提升变量查询速度，将其存储在栈(stack)中</p><h3 id="堆存储"><a href="#堆存储" class="headerlink" title="堆存储"></a>堆存储</h3><p>　　由于复杂值的大小会改变，所以不能将其存放在栈中，否则会降低变量查询速度，因此其存储在堆(heap)中，存储在变量处的值是一个指针，指向存储对象的内存处</p><p><img src="/2020/11/24/js-data-types/1606200294359.png"></p><h2 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h2><h3 id="按值访问"><a href="#按值访问" class="headerlink" title="按值访问"></a>按值访问</h3><p>　　原始值是作为不可细化的值进行存储和操作的，引用它们会转移其值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myString <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span class="token keyword">var</span> myStringCopy <span class="token operator">=</span> myString<span class="token punctuation">;</span><span class="token keyword">var</span> myString <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myString<span class="token punctuation">,</span>myStringCopy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null,'foo'</span></code></pre><h3 id="引用访问"><a href="#引用访问" class="headerlink" title="引用访问"></a>引用访问</h3><p>　　复杂值是通过引用进行存储和操作的，而不是实际的值。创建一个包含复杂对象的变量时，其值是内存中的一个引用地址。引用一个复杂对象时，使用它的名称(即变量或对象属性)通过内存中的引用地址获取该对象值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> copyOfMyObject <span class="token operator">=</span> myObject<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有复制值，而是复制了引用</span>myObject<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//操作myObject中的值</span><span class="token comment" spellcheck="true">//现在如果输出myObject和copyOfMyObject，则都会输出foo属性，因为它们引用的是同一个对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span>copyOfMyObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object&amp;#123;foo="bar"&amp;#125;</span></code></pre><h3 id="js函数的call-by-value-amp-call-by-reference-详细讲解"><a href="#js函数的call-by-value-amp-call-by-reference-详细讲解" class="headerlink" title="js函数的call by value &amp; call by reference 详细讲解"></a>js函数的call by value &amp; call by reference 详细讲解</h3><h4 id="js的数值类型：基本类型和引用类型"><a href="#js的数值类型：基本类型和引用类型" class="headerlink" title="js的数值类型：基本类型和引用类型"></a><strong><a href="https://www.w3school.com.cn/js/pro_js_value.asp">js的数值类型：基本类型和引用类型</a></strong></h4><p><strong>js一共有六大数据类型。number string boolean object null underfind</strong></p><p> 基本类型存放在栈区，访问是<strong>按值访问</strong>的，就是说你可以操作保存在变量中的实际的值。</p><p><strong>引用类型指的是对象：js中的array和object</strong>。可以拥有属性和方法，并且我们可以修改其属性和方法。引用对象存放的方式是：在栈中存放变量名（该变量的值是堆中真实数据的指针（对象在堆中的存放地址）），在堆中存放数据（真正的数据）。</p><p>对象使用的是<strong>引用赋值</strong>。当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在堆中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容.</p><table><thead><tr><th></th><th>call by value</th><th>call by reference/sharing</th></tr></thead><tbody><tr><td>数据</td><td>number string boolean object null underfind</td><td>array  object</td></tr><tr><td>存放地址</td><td>栈</td><td>栈中地址，堆中数据</td></tr><tr><td>copy value</td><td>没有关系 互不影响</td><td>指向同一个存储空间，一个变，都会变( 两者联动)</td></tr><tr><td>函数传值(访问类型)</td><td>不改变原值<br>所有函数的参数都<strong>是按值来传递</strong>的</td><td>按引用访问 传地址<br>所有函数的参数都<strong>是按值来传递</strong>的</td></tr><tr><td>函数内赋值/复制</td><td>按值复制</td><td>按值复制（指针，也是值）</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>  call by value</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    num<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">var</span> m<span class="token operator">=</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span><span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span></code></pre><p>call by reference/sharing：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  value<span class="token punctuation">:</span><span class="token string">'111'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  value<span class="token punctuation">:</span><span class="token string">'222'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">changeStuff</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'333'</span><span class="token punctuation">;</span>  obj <span class="token operator">=</span> obj2<span class="token punctuation">;</span>  <span class="token keyword">return</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">changeStuff</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// '222' 参数obj指向了新的对象obj2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'333'</span></code></pre><p>所以</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">changeStuff</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>  b<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token string">"changed"</span><span class="token punctuation">;</span>  c <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>item<span class="token punctuation">:</span> <span class="token string">"changed"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>item<span class="token punctuation">:</span> <span class="token string">"unchanged"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>item<span class="token punctuation">:</span> <span class="token string">"unchanged"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">changeStuff</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//change</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//unchange</span></code></pre><blockquote><p>But the item that is passed by value is <em>itself</em> a reference. Technically, this is called <a href="http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing">call-by-sharing</a>.</p><p>In practical terms, this means that if you change the parameter itself (as with <code>num</code> and <code>obj2</code>), that won’t affect the item that was fed into the parameter. But if you change the <strong>INTERNALS</strong> of the parameter, that will propagate back up (as with <code>obj1</code>).</p></blockquote><h1 id="详细数据类型"><a href="#详细数据类型" class="headerlink" title="详细数据类型"></a>详细数据类型</h1><h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><p>当声明的变量未初始化时，该变量的<strong>默认值是undefined.</strong> (null 的出现意味着是被操作者赋值的，而不是js赋值的)</p><p>会出现场景</p><ul><li>已声明未赋值的变量</li><li>获取对象不存在的属性</li><li>无返回值的函数的执行结果</li><li>函数的参数没有传入</li><li>void(expression)</li></ul><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>它表示一个特殊值，常用来描述”空值”</p><p>null是空对象指针，而[]是空数组，{}是空对象，三者不相同</p><blockquote><p>null表示”空值”，undefined表示”未定义”。两者往往可以互换。判断相等运算符==认为两者是相等的</p></blockquote><h2 id="null-和undefined-区别"><a href="#null-和undefined-区别" class="headerlink" title="null 和undefined 区别"></a>null 和undefined 区别</h2><table><thead><tr><th></th><th>null</th><th>undefined</th></tr></thead><tbody><tr><td>相同点</td><td>if语句中为false</td><td>if语句中为false</td></tr><tr><td>区别</td><td>number（null）= 0</td><td>number(undefined) = NaN</td></tr><tr><td></td><td>作为argument，error</td><td>作为argument，返回undefined</td></tr></tbody></table><h2 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h2><p>判断一个值是否是NaN 等号运算符（== 和 ===） 不能被用来判断一个值是否是 NaN。必须使用 <strong>Number.isNaN() 或 isNaN()</strong> 函数.<strong>只有 NaN 能够实现不全等与自己</strong></p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>a<span class="token operator">!==</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a<span class="token operator">!==</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><p>用Boolean()转型函数，转换成false的值称为假值(falsy value)，这7个值包括undefined、null、+0、-0、NaN、false、””(空字符串)</p><blockquote><p>空字符串””转换为false，而空白字符串” “转换为true</p></blockquote><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>isFinite()来确定一个数值是不是有穷的</p><p>isNaN()来判断这个数字是不是NaN、</p><p>把非数值转换成数值：Number()、parseInt()和parseFloat()</p><p>Number()解析字符串时会识别出字符串的前置空格并去掉</p><p>parseInt()专门用于把字符串转换成整数。在转换字符串时，会忽略字符串前面的空格，直到找到第一个非空格字符。如果第一个字符不是数字字符或者负号，parseInt()就会返回NaN。（接受进制）</p><p>parseFloat()专门用于字符串转换浮点数。同样地，解析时会忽略字符串前面的空格，直到找到第一个非空格字符，然后一直解析到字符串末尾或一个无效的浮点数字字符为止</p><blockquote><p>valueOf()方法返回对象的数字字面量</p><p>toString()方法将数字转换为字符串</p><p>toLocalString()方法将数字转换为本地惯例格式化数字的字符串</p><p>toFixed()方法按照指定的小数位返回数值四舍五入后的字符串表示(常用于处理货币值)</p><p>toExponential()方法返回数值四舍五入后的指数表示法(e表示法)的字符串表示，参数表示转换后的小数位数</p></blockquote><p>Number.toFixed(n) // 保留n位小数，为0则只保留整数<br>        Number.round() // 返回最接近的整数（相当于四舍五入）<br>        Number.floor() // 向小取整</p><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><pre class=" language-js"><code class="language-js">Math<span class="token punctuation">.</span>E             <span class="token function">自然对数的底数，即常量e的值</span><span class="token punctuation">(</span>约等于<span class="token number">2.71828</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>LN2           <span class="token number">2</span><span class="token function">的自然对数</span><span class="token punctuation">(</span>约等于<span class="token number">0.693</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>LN10          <span class="token number">10</span><span class="token function">的自然对数</span><span class="token punctuation">(</span>约等于<span class="token number">2.303</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>LOG2E         <span class="token function">以2为底e的对数</span><span class="token punctuation">(</span>约等于<span class="token number">1.443</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>LOG10E        <span class="token function">以10为底e的对数</span><span class="token punctuation">(</span>约等于<span class="token number">0.434</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>PI            <span class="token function">派的值</span><span class="token punctuation">(</span>约等于<span class="token number">3.14</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>SQRT2         <span class="token number">2</span><span class="token function">的平方根</span><span class="token punctuation">(</span>约等于<span class="token number">1.414</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span>SQRT1_2       <span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token function">的平方根，即2的平方根的倒数</span><span class="token punctuation">(</span>约等于<span class="token number">0.707</span><span class="token punctuation">)</span></code></pre><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">abs(x)</td><td align="left">返回 x 的绝对值</td></tr><tr><td align="left">acos(x)</td><td align="left">返回 x 的反余弦值，以弧度计</td></tr><tr><td align="left">asin(x)</td><td align="left">返回 x 的反正弦值，以弧度计</td></tr><tr><td align="left">atan(x)</td><td align="left">以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。</td></tr><tr><td align="left">atan2(y,x)</td><td align="left">返回从 x 轴到点 (x,y) 的角度</td></tr><tr><td align="left">ceil(x)</td><td align="left">对 x 进行上舍入</td></tr><tr><td align="left">cos(x)</td><td align="left">返回 x 的余弦</td></tr><tr><td align="left">exp(x)</td><td align="left">返回 Ex 的值</td></tr><tr><td align="left">floor(x)</td><td align="left">对 x 进行下舍入</td></tr><tr><td align="left">log(x)</td><td align="left">返回 x 的自然对数（底为e）</td></tr><tr><td align="left">max(x,y,z,…,n)</td><td align="left">返回最高值</td></tr><tr><td align="left">min(x,y,z,…,n)</td><td align="left">返回最低值</td></tr><tr><td align="left">pow(x,y)</td><td align="left">返回 x 的 y 次幂</td></tr><tr><td align="left">random()</td><td align="left">返回 0 ~ 1 之间的随机数</td></tr><tr><td align="left">round(x)</td><td align="left">把 x 四舍五入为最接近的整数</td></tr><tr><td align="left">sin(x)</td><td align="left">返回 x（x 以角度计）的正弦</td></tr><tr><td align="left">sqrt(x)</td><td align="left">返回 x 的平方根</td></tr><tr><td align="left">tan(x)</td><td align="left">返回角的正切</td></tr></tbody></table><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><a href="https://dorey.github.io/JavaScript-Equality-Table/">类型对比table</a></p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">比较</th><th align="left">返回</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">等于</td><td align="left">x == 8</td><td align="left">false</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x == 5</td><td align="left">true</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x == “5”</td><td align="left">true</td></tr><tr><td align="left">===</td><td align="left">值相等并且类型相等</td><td align="left">x === 5</td><td align="left">true</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x === “5”</td><td align="left">false</td></tr><tr><td align="left">!=</td><td align="left">不相等</td><td align="left">x != 8</td><td align="left">true</td></tr><tr><td align="left">!==</td><td align="left">值不相等或类型不相等</td><td align="left">x !== 5</td><td align="left">false</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x !== “5”</td><td align="left">true</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x !== 8</td><td align="left">true</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td><td align="left">x &gt; 8</td><td align="left">false</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td><td align="left">x &lt; 8</td><td align="left">true</td></tr><tr><td align="left">&gt;=</td><td align="left">大于或等于</td><td align="left">x &gt;= 8</td><td align="left">false</td></tr><tr><td align="left">&lt;=</td><td align="left">小于或等于</td><td align="left">x &lt;= 8</td><td align="left">true</td></tr></tbody></table><blockquote><p>Javascript有两组相等运算符，一组是==和!=，另一组是===和!==。前者只比较值的相等，后者除了值以外，还比较类型是否相同。</p><p>请尽量不要使用前一组，永远只使用===和!==。因为==默认会进行类型转换，规则十分难记。如果你不相信的话，请回答下面五个判断式的值是true还是false：</p><p>　　false == ‘false’</p><p>　　false == undefined</p><p>　　false == null</p><p>　　null == undefined</p><p>　　0 == ‘’</p><p>前三个是false，后两个是true。</p></blockquote><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p><img src="/2020/11/24/js-data-types/1606214735012.png"></p><table><thead><tr><th align="left">原始值</th><th align="left">转换为数字</th><th align="left">转换为字符串</th><th align="left">转换为逻辑</th></tr></thead><tbody><tr><td align="left">false</td><td align="left">0</td><td align="left">“false”</td><td align="left">false</td></tr><tr><td align="left">true</td><td align="left">1</td><td align="left">“true”</td><td align="left">true</td></tr><tr><td align="left">0</td><td align="left">0</td><td align="left">“0”</td><td align="left">false</td></tr><tr><td align="left">1</td><td align="left">1</td><td align="left">“1”</td><td align="left">true</td></tr><tr><td align="left">“0”</td><td align="left">0</td><td align="left">“0”</td><td align="left"><strong>true</strong></td></tr><tr><td align="left">“000”</td><td align="left">0</td><td align="left">“000”</td><td align="left"><strong>true</strong></td></tr><tr><td align="left">“1”</td><td align="left">1</td><td align="left">“1”</td><td align="left">true</td></tr><tr><td align="left">NaN</td><td align="left">NaN</td><td align="left">“NaN”</td><td align="left">false</td></tr><tr><td align="left">Infinity</td><td align="left">Infinity</td><td align="left">“Infinity”</td><td align="left">true</td></tr><tr><td align="left">-Infinity</td><td align="left">-Infinity</td><td align="left">“-Infinity”</td><td align="left">true</td></tr><tr><td align="left">“”</td><td align="left"><strong>0</strong></td><td align="left">“”</td><td align="left"><strong>false</strong></td></tr><tr><td align="left">“20”</td><td align="left">20</td><td align="left">“20”</td><td align="left">true</td></tr><tr><td align="left">“twenty”</td><td align="left">NaN</td><td align="left">“twenty”</td><td align="left">true</td></tr><tr><td align="left">[ ]</td><td align="left"><strong>0</strong></td><td align="left">“”</td><td align="left">true</td></tr><tr><td align="left">[20]</td><td align="left"><strong>20</strong></td><td align="left">“20”</td><td align="left">true</td></tr><tr><td align="left">[10,20]</td><td align="left">NaN</td><td align="left">“10,20”</td><td align="left">true</td></tr><tr><td align="left">[“twenty”]</td><td align="left">NaN</td><td align="left">“twenty”</td><td align="left">true</td></tr><tr><td align="left">[“ten”,”twenty”]</td><td align="left">NaN</td><td align="left">“ten,twenty”</td><td align="left">true</td></tr><tr><td align="left">function(){}</td><td align="left">NaN</td><td align="left">“function(){}”</td><td align="left">true</td></tr><tr><td align="left">{ }</td><td align="left">NaN</td><td align="left">“[object Object]”</td><td align="left">true</td></tr><tr><td align="left">null</td><td align="left"><strong>0</strong></td><td align="left">“null”</td><td align="left">false</td></tr><tr><td align="left">undefined</td><td align="left">NaN</td><td align="left">“undefined”</td><td align="left">false</td></tr></tbody></table><h2 id="确定对象类型"><a href="#确定对象类型" class="headerlink" title="确定对象类型"></a>确定对象类型</h2><p>JavaScript 有三种方法，可以确定一个值到底是什么类型。</p><ul><li><code>typeof</code>运算符</li><li><code>instanceof</code>运算符</li><li><code>Object.prototype.toString</code>方法</li></ul><p><img src="/2020/11/24/js-data-types/1607253357351.png"></p><h1 id="JavaScript-对象-实例"><a href="#JavaScript-对象-实例" class="headerlink" title="JavaScript 对象 实例"></a>JavaScript 对象 实例</h1><p><a href="https://www.runoob.com/js/js-ex-objects.html">例子总结1</a></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h1><ol><li><a href="https://segmentfault.com/a/1190000014658470">https://segmentfault.com/a/1190000014658470</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>improve js code</title>
      <link href="2020/11/23/improve-js-code/"/>
      <url>2020/11/23/improve-js-code/</url>
      
        <content type="html"><![CDATA[<h1 id="javascript的代码优化"><a href="#javascript的代码优化" class="headerlink" title="javascript的代码优化"></a>javascript的代码优化</h1><h2 id="js从css抽离出来"><a href="#js从css抽离出来" class="headerlink" title="js从css抽离出来"></a>js从css抽离出来</h2><h2 id="css-从js中抽离出来"><a href="#css-从js中抽离出来" class="headerlink" title="css 从js中抽离出来"></a>css 从js中抽离出来</h2><h2 id="减少全局变量"><a href="#减少全局变量" class="headerlink" title="减少全局变量"></a>减少全局变量</h2><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="隔离应用逻辑"><a href="#隔离应用逻辑" class="headerlink" title="隔离应用逻辑"></a>隔离应用逻辑</h3><p>将应用逻辑从所有事件处理程序中抽离出来是一种最佳实践</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//不好的做法</span><span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> popup <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'popup'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  popup<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'reveal'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">addListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span><span class="token string">'click'</span><span class="token punctuation">,</span>handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//好的做法</span><span class="token keyword">var</span> MyApplication <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  handleClick<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showPopup</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  showPopup<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> popup <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'popup'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'reveal'</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">addListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  MyApplication<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="不要分发事件对象"><a href="#不要分发事件对象" class="headerlink" title="不要分发事件对象"></a>不要分发事件对象</h3><p>让事件处理程序使用event对象来处理事件，然后拿到所有需要的数据传给应用逻辑</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//改进的做法</span><span class="token keyword">var</span> MyApplication <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  handleClick<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showPopup</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>event<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  showPopup<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> popup <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'popup'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'reveal'</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">addListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  MyApplication<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当处理事件时，最好让事件程序成为接触到event对象的唯一的函数。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//改进的做法</span><span class="token keyword">var</span> MyApplication <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  handleClick<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showPopup</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>event<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  showPopup<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> popup <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'popup'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    popup<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'reveal'</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">addListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  MyApplication<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="配置数据"><a href="#配置数据" class="headerlink" title="配置数据"></a>配置数据</h2><p>关键数据从代码抽离</p><ol><li>URL</li><li>需要展现给用户的字符串</li><li>重复的值</li><li>配置项</li><li>任何可能发生变更的值</li></ol><p>将配置数据保存在了config对象中，config对象的每个属性都保存了一个数据片段，每个属性名都有前缀，用以表明数据的类型(MSG表示展现给用户的信息，URL表示网络地址，CSS表示这是一个className)。当然，也可以将整个config对象放到单独的文件中，这样对配置数据的修改可以完全和使用这个数据的代码隔离开来</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//好的做法</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  MSG_INVALID_VALUE<span class="token punctuation">:</span> <span class="token string">'Invalid value'</span><span class="token punctuation">,</span>  URL_INVALID<span class="token punctuation">:</span><span class="token string">'/errors/invalid.php'</span><span class="token punctuation">,</span>  CSS_SELECTED<span class="token punctuation">:</span><span class="token string">'selected'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>MSG_INVALID_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    location<span class="token punctuation">.</span>href<span class="token operator">=</span>config<span class="token punctuation">.</span>URL_INVALID<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">toggleSelected</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasClass</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>config<span class="token punctuation">.</span>CSS_SELECTED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">removeClass</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>config<span class="token punctuation">.</span>CSS_SELECTED<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">addClass</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>config<span class="token punctuation">.</span>CSS_SELECTED<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="选择器优化"><a href="#选择器优化" class="headerlink" title="选择器优化"></a>选择器优化</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//好的做法app.Eles = &amp;#123;</span>    widgetDiv<span class="token punctuation">:</span> <span class="token string">".left-widget div"</span><span class="token punctuation">,</span>    inputResize<span class="token punctuation">:</span> <span class="token string">'.input-resize'</span><span class="token punctuation">,</span>    hr<span class="token punctuation">:</span> <span class="token string">'.hr'</span><span class="token punctuation">,</span>    txt<span class="token punctuation">:</span> <span class="token string">'.input-group-btn button'</span><span class="token punctuation">,</span>    cus<span class="token punctuation">:</span> <span class="token string">'#paper-type-cus'</span><span class="token punctuation">,</span>    hid<span class="token punctuation">:</span> <span class="token string">'#hidden'</span><span class="token punctuation">,</span>    mainCon<span class="token punctuation">:</span> <span class="token string">'#mainCon'</span><span class="token punctuation">,</span>    rulerX<span class="token punctuation">:</span> <span class="token string">'.ruler-x'</span><span class="token punctuation">,</span>    rulerY<span class="token punctuation">:</span> <span class="token string">'.ruler-y'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h2><p>　1、避免出现超大函数</p><p>　2、独立出来的函数有助于代码复用</p><p>　3、独立出来的函数更容易被覆写</p><p>　4、独立出来的函数如果拥有一个良好的命名，它本身就起到了注释的作用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> getUserInfo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">'http:// xxx.com/userInfo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'userId: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>userId <span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'userName: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>userName <span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'nickName: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>nickName <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改成：</span><span class="token keyword">var</span> getUserInfo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">'http:// xxx.com/userInfo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printDetails</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> printDetails <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'userId: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>userId <span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'userName: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>userName <span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'nickName: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>nickName <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>另外注意</p><ul><li>减少参数量（同一对象信息，就用对象传送）</li></ul><h2 id="条件优化"><a href="#条件优化" class="headerlink" title="条件优化"></a>条件优化</h2><ul><li>合并条件，避免重复代码</li><li>条件语句过长，写成函数，名字容易懂</li><li>避免条件分支嵌套</li></ul><h2 id="循环优化"><a href="#循环优化" class="headerlink" title="循环优化"></a>循环优化</h2><ul><li>合理使用循环 ， 避免多重循环</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS basic</title>
      <link href="2020/11/23/JS-basic/"/>
      <url>2020/11/23/JS-basic/</url>
      
        <content type="html"><![CDATA[<h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><h3 id="let-const-一起和-var-的区别"><a href="#let-const-一起和-var-的区别" class="headerlink" title="let/const 一起和 var 的区别"></a>let/const 一起和 var 的区别</h3><table><thead><tr><th>var</th><th>let/const</th></tr></thead><tbody><tr><td>会进行预解析</td><td>不会进行预解析, 必须先定义后使用</td></tr><tr><td>声明重复变量名</td><td>不能声明重复的变量名, 不能重新赋值（不同作用域可以重新定义，但不可以重新赋值）</td></tr><tr><td>没有块级作用域,声明全局变量（函数内除外）</td><td>有块级作用域</td></tr></tbody></table><p><img src="/2020/11/23/JS-basic/1606354411609.png"></p><p><strong>以上报错i未定义，说明let定义变量i，只在所在的块作用域内起作用</strong></p><p><img src="/2020/11/23/JS-basic/1606354454983.png"></p><p><strong>var 定义变量没有块级作用域，i在块级作用域照样可以输出结果</strong></p><p>var在函数内命名的变量是只在整个函数作用域内起作用，出了这个函数作用域就不能用了</p><h3 id="let-vs-const"><a href="#let-vs-const" class="headerlink" title="let vs const"></a>let vs const</h3><table><thead><tr><th>let</th><th>const</th></tr></thead><tbody><tr><td>变量</td><td>常量</td></tr><tr><td>可以先不赋值</td><td>必须声明时赋值</td></tr><tr><td>变量可以改</td><td>不能改</td></tr></tbody></table><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6</span></code></pre><h2 id="对象属性访问"><a href="#对象属性访问" class="headerlink" title="对象属性访问"></a>对象属性访问</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>z<span class="token punctuation">:</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对象字面量</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span>o<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 包含对象的数组字面量</span>o<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表达式o的x属性</span>o<span class="token punctuation">.</span>y<span class="token punctuation">.</span>z<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表达式o.y的z属性</span>o<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象o的x属性</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表达式a中索引为1的元素</span></code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift</a></p><p><a href="https://www.w3schools.com/js/js_operators.asp">https://www.w3schools.com/js/js_operators.asp</a></p><p><a href="https://wangdoc.com/javascript/operators/index.html">https://wangdoc.com/javascript/operators/index.html</a></p><h3 id="increment（i-amp-i）"><a href="#increment（i-amp-i）" class="headerlink" title="increment（i++ &amp; ++i）"></a>increment（i++ &amp; ++i）</h3><h3 id="Postfix-increment"><a href="#Postfix-increment" class="headerlink" title="Postfix increment"></a>Postfix increment</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>y <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// y = 3; x = 4</span></code></pre><h3 id="Prefix-increment"><a href="#Prefix-increment" class="headerlink" title="Prefix increment"></a>Prefix increment</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// a = 3; b = 3</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[0,11,12]</span></code></pre><p>难点：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>数组data和i的值</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> </code></pre><p>数组data和i的值又是多少</p><p>第一个表达式结果</p><pre class=" language-js"><code class="language-js"> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">14</span>  data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">8</span>  data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">9</span>  i<span class="token operator">=</span><span class="token number">1</span></code></pre><p>第二个结果</p><pre class=" language-js"><code class="language-js"> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">16</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">8</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">9</span>   i<span class="token operator">=</span><span class="token number">2</span></code></pre><h2 id="结合性-数运算符"><a href="#结合性-数运算符" class="headerlink" title="结合性 - 数运算符"></a>结合性 - 数运算符</h2><p><img src="/2020/11/23/JS-basic/1606353255160.png" alt="运算符结合性"></p><ul><li><p>优先级越高的优先运算，不用死记该图片，可以使用（）提升优先级<br>赋值优先级最低</p></li><li><p>先乘除后加减</p></li><li><p>优先级相同情况下,从左到右依次计算</p></li></ul><p>数运算符都具有从左向右的结合性，只有一元运算符、条件运算符和赋值运算符具有从右向左的结合性</p><pre class=" language-js"><code class="language-js">w <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于:</span>w <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>w <span class="token operator">=</span> x <span class="token operator">=</span> y <span class="token operator">=</span> z<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于:</span>w <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q <span class="token operator">=</span> a <span class="token operator">?</span> b <span class="token punctuation">:</span> c <span class="token operator">?</span> d <span class="token punctuation">:</span> e <span class="token operator">?</span> f <span class="token punctuation">:</span> g<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于:</span>q <span class="token operator">=</span> a <span class="token operator">?</span> b <span class="token punctuation">:</span> <span class="token punctuation">(</span>c <span class="token operator">?</span> d <span class="token punctuation">:</span> <span class="token punctuation">(</span>e <span class="token operator">?</span> f <span class="token punctuation">:</span> g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><pre class=" language-js"><code class="language-js">a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">+</span> a<span class="token operator">--</span> <span class="token operator">*</span> a<span class="token operator">++</span><span class="token punctuation">;</span></code></pre><p>　　先分析该表达式中，根据优先级的顺序，分别运算递增运算符、乘法运算符、加法运算符和赋值运算符</p><p>　　先计算第一个a++;//结果为1，a为2</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//表达式变成</span>b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> a<span class="token operator">--</span> <span class="token operator">*</span> a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算a--;结果为2，a为1</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//表达式变成</span>b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算第二个a++;//结果为1，a为2</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//表达式变成</span>b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>　　所以，最终a = 2; b = 3;</p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p><a href="https://www.runoob.com/js/js-type-conversion.html">https://www.runoob.com/js/js-type-conversion.html</a></p><p><a href="https://www.w3school.com.cn/js/js_type_conversion.asp">https://www.w3school.com.cn/js/js_type_conversion.asp</a></p><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p><a href="https://www.cnblogs.com/xiaohuochai/p/5677490.html">https://www.cnblogs.com/xiaohuochai/p/5677490.html</a></p><h2 id="javascript语句——条件语句、循环语句和跳转语句"><a href="#javascript语句——条件语句、循环语句和跳转语句" class="headerlink" title="javascript语句——条件语句、循环语句和跳转语句"></a>javascript语句——条件语句、循环语句和跳转语句</h2><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span>  <span class="token keyword">case</span> value1<span class="token punctuation">:</span> statement1<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> value2<span class="token punctuation">:</span> statement2<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> value3<span class="token punctuation">:</span> statement3<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token punctuation">:</span> statement4<span class="token punctuation">;</span></code></pre><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span>variable <span class="token keyword">in</span> object<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    statement<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符 ?:"></a>三元运算符 ?:</h3><p>JavaScript还有一个三元运算符（即该运算符需要三个运算子）?:，也可以用于逻辑判断。</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token operator">?</span> 表达式<span class="token number">1</span> <span class="token punctuation">:</span> 表达式<span class="token number">2</span></code></pre><p>上面代码中，如果“条件”为true，则返回“表达式1”的值，否则返回“表达式2”的值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> even <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre><p>上面代码中，如果n可以被2整除，则even等于true，否则等于false。它等同于下面的形式。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> even<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> even <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> even <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这个三元运算符可以被视为if…else…的简写形式，因此可以用于多种场合。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myVar<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myVar <span class="token operator">?</span> <span class="token string">'myVar has a value'</span> <span class="token punctuation">:</span> <span class="token string">'myVar do not has a value'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// myVar do not has a value</span></code></pre><p>上面代码利用三元运算符，输出相应的提示。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">'数字'</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">'是'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'偶数'</span> <span class="token punctuation">:</span> <span class="token string">'奇数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码利用三元运算符，在字符串之中插入不同的值。</p><h2 id="函数显式参数-Parameters-与隐式参数-Arguments"><a href="#函数显式参数-Parameters-与隐式参数-Arguments" class="headerlink" title="函数显式参数(Parameters)与隐式参数(Arguments)"></a>函数显式参数(Parameters)与隐式参数(Arguments)</h2><h3 id="设置默认参数"><a href="#设置默认参数" class="headerlink" title="设置默认参数"></a>设置默认参数</h3><pre class=" language-js"><code class="language-js"><span class="token function">functionName</span><span class="token punctuation">(</span>parameter1<span class="token punctuation">,</span> parameter2<span class="token punctuation">,</span> parameter3<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 要执行的代码……</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> y <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9</span><span class="token comment" spellcheck="true">//新写法</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// y is 10 if not passed or undefined</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出 2</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 15, y 参数的默认值</span></code></pre><h3 id="参数是array-不确定长度"><a href="#参数是array-不确定长度" class="headerlink" title="参数是array - 不确定长度"></a>参数是array - 不确定长度</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token operator">+</span>n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//一般参数</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入的参数只有前两位 1 2</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自动解构</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前三个</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token punctuation">,</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳过一个</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//5 6 10</span></code></pre><h3 id="参数是object"><a href="#参数是object" class="headerlink" title="参数是object"></a>参数是object</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>say<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span>obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对应属性名字一定要对</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>say <span class="token punctuation">:</span> speak<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span>obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对应属性换名字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>speak<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//say不存在 speak在 </span><span class="token keyword">var</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>say <span class="token operator">=</span> <span class="token string">"speak"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span>obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新赋值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//say本身的值不在，sa的值已经是"speak"</span><span class="token keyword">const</span> book <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  title<span class="token punctuation">:</span> <span class="token string">"titleName"</span><span class="token punctuation">,</span>  author <span class="token punctuation">:</span> <span class="token string">"author"</span><span class="token punctuation">,</span>  publisher<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">"jenny"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">26</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取出</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name <span class="token punctuation">:</span>publisherName<span class="token operator">=</span> <span class="token string">"self"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">=</span>book<span class="token punctuation">.</span>publisher<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>publisherName<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//jenny 如果name不存在，打印self</span></code></pre><h3 id="不定参数个数"><a href="#不定参数个数" class="headerlink" title="不定参数个数"></a>不定参数个数</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//写法一</span><span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token operator">...</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写法2</span><span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token operator">...</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单独前两个拿出来</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Argument-object"><a href="#Argument-object" class="headerlink" title="Argument object"></a>Argument object</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">viewArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arguments<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">viewArgs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">viewArgs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">viewArgs</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"life the universe and all"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">viewArgs</span><span class="token punctuation">(</span><span class="token string">"Douglas"</span><span class="token punctuation">,</span><span class="token string">"Adams"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">viewArgs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"World!"</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'thanks'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span><span class="token string">'all'</span><span class="token punctuation">,</span><span class="token string">'the'</span><span class="token punctuation">,</span> <span class="token string">'fish'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"dolphines"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token string">'life the universe and all'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'Douglas'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'Adams'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'World!'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'thanks'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token string">'the'</span><span class="token punctuation">,</span> <span class="token string">'fish'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'dolphins'</span><span class="token punctuation">,</span>   <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">42</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//treat it as array</span><span class="token function">destroyer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">destroyer</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr1<span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3, 5, 1, 2, 2]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[2,3,5]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>div tips</title>
      <link href="2020/11/22/div-tips/"/>
      <url>2020/11/22/div-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Div-Size-Automatically-size-of-content"><a href="#1-Div-Size-Automatically-size-of-content" class="headerlink" title="1. Div Size Automatically size of content"></a>1. Div Size Automatically size of content</h2><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> min-content or <span class="token property">width</span><span class="token punctuation">:</span> max-content<span class="token property">width</span><span class="token punctuation">:</span>fit-content</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>overlap div</title>
      <link href="2020/11/21/overlap-div/"/>
      <url>2020/11/21/overlap-div/</url>
      
        <content type="html"><![CDATA[<h1 id="Overlap-Element"><a href="#Overlap-Element" class="headerlink" title="Overlap Element"></a>Overlap Element</h1><h2 id="1-Position-Property"><a href="#1-Position-Property" class="headerlink" title="1. Position Property"></a>1. Position Property</h2><pre class=" language-css"><code class="language-css"><span class="token number">.</span>child &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>   <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/21/overlap-div/1605966338959.png"></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>child &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>   <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>child-<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>child-<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>parent &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/21/overlap-div/1605967027232.png"></p><h2 id="2-Using-CSS-Grid"><a href="#2-Using-CSS-Grid" class="headerlink" title="2. Using CSS Grid"></a>2. Using CSS Grid</h2><pre class=" language-css"><code class="language-css"><span class="token number">.</span>parent &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">250</span>px <span class="token number">1</span>fr<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">150</span>px <span class="token number">1</span>fr<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>child &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">1</span> / <span class="token number">2</span> / <span class="token number">2</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/21/overlap-div/1605966839123.png"></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>parent &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">250</span>px <span class="token number">1</span>fr<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">150</span>px <span class="token number">1</span>fr<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>child &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">1</span> / <span class="token number">2</span> / <span class="token number">2</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>child-<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/21/overlap-div/1605966795562.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>box sizing</title>
      <link href="2020/11/21/box-sizing/"/>
      <url>2020/11/21/box-sizing/</url>
      
        <content type="html"><![CDATA[<h1 id="使用box-sizing布局"><a href="#使用box-sizing布局" class="headerlink" title="使用box-sizing布局"></a>使用box-sizing布局</h1><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><ul><li><code>padding</code> + <code>border</code> + <code>width</code>= 盒子的宽度</li><li><code>padding</code>+ <code>border</code> + <code>height</code> = 盒子的高度</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>语法：<code>box-sizing:</code> <code>content-box</code> | <code>border-box</code> | <code>inherit</code>;</p><pre class=" language-css"><code class="language-css">*&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>     <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token property">box-sizing</span><span class="token punctuation">:</span>border-box<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><ul><li>content-box：标准盒模型，CSS定义的宽高只包含content的宽高</li><li>border-box：IE盒模型，CSS定义的宽高包括了content，padding和border</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie localStorage和sessionStorage 三者之间的区别以及存储、获取、删除等使用方式</title>
      <link href="2020/11/17/cookie-localstorage-session/"/>
      <url>2020/11/17/cookie-localstorage-session/</url>
      
        <content type="html"><![CDATA[<p>前端本地存储的方式有三种，分别是cookie，localstorage和sessionStorage </p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//保存cookie的值 </span><span class="token keyword">var</span> dataCookie<span class="token operator">=</span><span class="token string">'110'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'token'</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span>dataCookie<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取指定名称的cookie值</span><span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (^| )name=([^;]*)(;|$),match[0]为与整个正则表达式匹配的字符串，match[i]为正则表达式捕获数组相匹配的数组；</span><span class="token keyword">var</span> arr <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(^| )"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"=([^;]*)(;|$)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">var</span> cookieData<span class="token operator">=</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//cookie赋值给变量。</span></code></pre><h3 id="localStorage和sessionStorage"><a href="#localStorage和sessionStorage" class="headerlink" title="localStorage和sessionStorage:"></a>localStorage和sessionStorage:</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">'sessionData'</span><span class="token punctuation">;</span><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">;</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储数据</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'value2'</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> dataAll<span class="token operator">=</span>sessionStorage<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取全部数据</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataAll<span class="token punctuation">,</span><span class="token string">'获取全部数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> dataSession<span class="token operator">=</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取指定键名数据</span><span class="token keyword">var</span> dataSession2<span class="token operator">=</span>sessionStorage<span class="token punctuation">.</span>sessionData<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sessionStorage是js对象，也可以使用key的方式来获取值</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataSession<span class="token punctuation">,</span>dataSession2<span class="token punctuation">,</span><span class="token string">'获取指定键名数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除指定键名数据</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataAll<span class="token punctuation">,</span><span class="token string">'获取全部数据1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空缓存数据：localStorage.clear();</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataAll<span class="token punctuation">,</span><span class="token string">'获取全部数据2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h2 id="三者的异同"><a href="#三者的异同" class="headerlink" title="三者的异同"></a>三者的异同</h2><h3 id="生命周期："><a href="#生命周期：" class="headerlink" title="生命周期："></a>生命周期：</h3><p>cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效</p><p>localStorage：除非被手动清除，否则将会永久保存。</p><p>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</p><h3 id="存放数据大小："><a href="#存放数据大小：" class="headerlink" title="存放数据大小："></a>存放数据大小：</h3><p>cookie：4KB左右</p><p>localStorage和sessionStorage：可以保存5MB的信息。</p><h3 id="http请求："><a href="#http请求：" class="headerlink" title="http请求："></a>http请求：</h3><p>cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</p><p>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信</p><h3 id="易用性："><a href="#易用性：" class="headerlink" title="易用性："></a>易用性：</h3><p>cookie：需要程序员自己封装，源生的Cookie接口不友好</p><p>localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</p><h2 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h2><h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h3><ul><li>浪费宽带（每次http请求都会携带cookie信息）</li><li>限制多（还需要指定作用域，不可以跨域调用）</li></ul><p>但是：识别用户登录来说，cookie还是比stprage更好用的。其他情况下，可以使用storage，就用storage。</p><h3 id="localStorage和sessionStorage-1"><a href="#localStorage和sessionStorage-1" class="headerlink" title="localStorage和sessionStorage"></a>localStorage和sessionStorage</h3><p>localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。</p><p>Reference：</p><p><a href="https://juejin.im/post/6844903516826255373#heading-13">https://juejin.im/post/6844903516826255373#heading-13</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区别伪元素before after</title>
      <link href="2020/11/15/before-after/"/>
      <url>2020/11/15/before-after/</url>
      
        <content type="html"><![CDATA[<h1 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><pre class=" language-css"><code class="language-css"><span class="token property">element</span><span class="token punctuation">:</span>after  &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> style properties &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* CSS2 语法 */</span><span class="token property">element</span><span class="token punctuation">:</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> style properties &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* CSS3 语法 */</span></code></pre><h2 id="同异"><a href="#同异" class="headerlink" title="同异"></a>同异</h2><blockquote><p>同：<br>                ::before和::after都是某标签的兄弟节点</p><p>异：<br>                ::before 是某标签前的兄弟元素<br>                ::after 是某标签后的兄弟元素</p></blockquote><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"> <span class="token property">p</span><span class="token punctuation">:</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'我是在p标签前的兄弟元素'</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token property">p</span><span class="token punctuation">:</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'我是在p标签前的兄弟元素'</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>--我是p标签--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/15/before-after/1605604037887.png"></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>1）<strong>伪元素即伪类，它是一个元素的子元素</strong>，<em>其意思就是说，我们无法用JS获取到这些伪元素，</em>我们<em>无法通过JS对其进行增、删、改，所以这也是它们的优点，因为它们不会增加JS查询DOM的负担，即对于JS来说伪元素是透明的。然后因为它们也不是实际的HTML标签，所以可以加快浏览器加载HTML文件，对SEO也有帮助</em>（SEO  搜索引擎优化）。</p><p>2）<strong>如果我们把伪类的样式有absolute定位的话会把伪类强制变成块级元素</strong>，<em>伪类本身是行内元素的。</em></p><p>3）<strong>img、input和其他的单标签是没有after和before伪元素的，因为单标签本身不能有子元素</strong>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Relative Path</title>
      <link href="2020/11/15/relative-Path/"/>
      <url>2020/11/15/relative-Path/</url>
      
        <content type="html"><![CDATA[<h1 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h1><h2 id="同一个文件夹"><a href="#同一个文件夹" class="headerlink" title="同一个文件夹"></a>同一个文件夹</h2><p>2.html和3.html在同一个文件夹下， 如果2.html链接到3.html，可以在2.html中这样写:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>同目录下文件间互相链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h2 id="上级目录文件"><a href="#上级目录文件" class="headerlink" title="上级目录文件"></a>上级目录文件</h2><p>1.html是2.html和3.html的上级目录中的文件，如果2.html或3.html链接到1.html，可以在2.html或3.html中这样写</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../1.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接到上级目录中的文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>../ 代表一级上级目录(间隔一个目录)<br>　　 ../../代表二级上级目录(间隔两个目录)<br>　　 比如4.html链接到1.html，可以在4.html中这样写</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../1.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接到上级目录的上级目录中的文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h2 id="下级目录文件"><a href="#下级目录文件" class="headerlink" title="下级目录文件"></a>下级目录文件</h2><p>2.html和3.html是1.html的下级目录中的文件，如果在1.html中链接到2.html， 可以在1.html中这样写</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first/2.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接到下级目录(first)中的文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>如果在1.html中链接到4.html，可以在1.html中这样写</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first/second/4.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接到下级目录(first/second/)中的文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h1 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h1><p>使用根目录的方式表示的路径和绝对路径的表示方式相似，去掉前面的域名就可。<br>　　比如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/exe/1.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接到1.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/exe/first/2.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接到2.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>1</code></pre><p><strong>../表示源文件所在目录（文件夹）的上一级目录（文件夹），../../表示源文件所在目录的上上级目录，以此类推。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo render skip</title>
      <link href="2020/11/15/hexo-render-skip/"/>
      <url>2020/11/15/hexo-render-skip/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客跳过渲染，创建自定义网页方法"><a href="#Hexo博客跳过渲染，创建自定义网页方法" class="headerlink" title="Hexo博客跳过渲染，创建自定义网页方法"></a>Hexo博客跳过渲染，创建自定义网页方法</h1><h2 id="1-跳过渲染指令"><a href="#1-跳过渲染指令" class="headerlink" title="1.跳过渲染指令"></a>1.跳过渲染指令</h2><p>在html文件中添加跳过渲染指令：</p><p>用编辑器打开 Hexo\source 创建的文件夹中的 index.html 文件，在开头添加如下代码即可</p><pre class=" language-html"><code class="language-html">---layout: false---</code></pre><p>缺点：</p><ol><li>网页引用了 css 或 js ，这些 css 和 js 必须使用外链。</li><li>引用图片，可以在网页目录下建立 img 文件夹，可以直接引用图片，不必再去创建外链。</li></ol><h2 id="2-config中设置"><a href="#2-config中设置" class="headerlink" title="2.config中设置"></a>2.config中设置</h2><p>Hexo 目录下的_config.yml 文件，找到 skip_render</p><p>skip_render 一般有以下四种常用参数：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#跳过source文件夹下的test.html</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> test.html<span class="token comment" spellcheck="true">#忽略source下的test文件夹下所有文件</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> test/*  <span class="token comment" spellcheck="true">#忽略 source 下的 test 文件夹下.html文件</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> test/*.html <span class="token comment" spellcheck="true">#忽略 source 下的 test 文件夹内所有文件包括子文件夹以及子文件夹内的文件</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> test/** <span class="token comment" spellcheck="true">#忽略多个路径的文件或目录</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> test.html    <span class="token punctuation">-</span> test/*</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layout-display、position、float详解</title>
      <link href="2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="display、position、float详解"><a href="#display、position、float详解" class="headerlink" title="display、position、float详解"></a>display、position、float详解</h1><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p>display 是 css 布局中很重要的一个属性，它定义了元素生成的显示框类型，常见的几个属性值有：<code>grid</code>、<code>block</code>、<code>inline</code>、<code>inline-block</code>、<code>inherit</code>、<code>none</code>、<code>flex</code>。</p><p>每个元素都有默认的 display 属性，比如 div 标签的默认 display 属性是 block；span 标签的默认 display 属性是 inline</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427234056.png"></p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427256394.png"></p><blockquote><p>div：<br> 没有设置宽度时，它的宽度是其容器的 100%；<br> 可以给块级元素设置宽高、内边距、外边距等盒模型属性；<br> 块级元素可以包含块级元素和行内元素；<br> 常见的块级元素：<code>&lt;div&gt;</code>、<code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;dl&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;address&gt;</code> <code>&lt;form&gt;</code> 等。</p></blockquote><blockquote><p>Span：<br> 行内元素不会独占一行，只会占领自身宽高所需要的空间；<br> 给行内元素设置宽高不会起作用，margin 值只对左右起作用，padding 值也只对左右起作用；<br> 行内元素一般不可以包含块级元素，只能包含行内元素和文本；<br> 常见的行内元素 <code>&lt;a&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;label&gt;</code>、<code>&lt;span&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;input&gt;</code> 等。</p></blockquote><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427342046.png"></p><blockquote><p>Grid布局常用套路：容器定义布局方式为<strong>网格布局</strong>,按照项目需求去划分网格</p></blockquote><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605545544893.png"></p><h2 id="position-定位"><a href="#position-定位" class="headerlink" title="position(定位)"></a>position(定位)</h2><p> relative：相对定位，相对于元素的正常位置进行定位；<br>        absolute：绝对定位，相对于除 static 定位以外的元素进行定位；<br>        fixed：固定定位，相对于浏览器窗口进行定位，网站中的固定         header 和 footer 就是用固定定位来实现的；<br>        static：默认值，没有定位属性，元素正常出现在文档流中；<br>        inherit：继承父元素的 position 属性值。 </p><p>视图讲解; <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position">https://developer.mozilla.org/en-US/docs/Web/CSS/position</a></p><h3 id="Relative"><a href="#Relative" class="headerlink" title="Relative"></a>Relative</h3><p> position 为 relative，但是不添加额外属性（left，right，top，bottom 等），它表现的如同 static 一样。但是注意红色框部分，由于特殊设置，偏离普通流（normal flow）</p><blockquote><p>注意下面的图中， box2本身的地方并不会被下面的box3占掉，但是box2会偏离</p></blockquote><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427536435.png"></p><h3 id="Aboslute"><a href="#Aboslute" class="headerlink" title="Aboslute"></a>Aboslute</h3><p>absolute 会相对于最近的除 static 定位以外的元素进行定位，在使用时要注意设置父元素（或祖先元素）的 position 属性，若父元素（或祖先元素）都没有设置定位属性，absolute 会找到最上层即浏览器窗口，相对于它进行定位了。</p><p>absolute中，组件的位置与父元素息息相关，<strong>父元素移动它也会跟着动</strong>。</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427666542.png"></p><p><strong>absolute的位置注意</strong></p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1607008433761.png"></p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1607008454537.png"></p><h3 id="Fixed"><a href="#Fixed" class="headerlink" title="Fixed"></a>Fixed</h3><p>fixed 是相对于浏览器窗口的定位，一旦位置确定， 元素位置也不会改变</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427716715.png"></p><h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><p>float 属性定义元素在哪个方向浮动，常用属性值有 left、right，即向左浮动和向右浮动。设置了 float 的元素，会脱离文档流，然后向左或向右移动，直到碰到父容器的边界或者碰到另一个浮动元素。块级元素会忽略 float 元素，文本和行内元素却会环绕它，所以 float 最开始是用来实现文字环绕效果的。<br> <img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427819727.png"></p><p>当子元素设置浮动属性后，子元素会溢出到父元素外，父元素的宽高也不会被撑开了，称之为“<strong>高度塌陷</strong>”。</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605427936251.png"></p><h3 id="清除浮动方案："><a href="#清除浮动方案：" class="headerlink" title="清除浮动方案："></a>清除浮动方案：</h3><h4 id="1-clear"><a href="#1-clear" class="headerlink" title="1.clear"></a>1.clear</h4><p><code>clear</code> 属性用来定义哪一侧不允许其他元素浮动，常见的值有 left 、right、both， 比如表示左侧不允许浮动元素</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605429217135.png"></p><h4 id="2-使用br标签"><a href="#2-使用br标签" class="headerlink" title="2.使用br标签"></a>2.使用br标签</h4><p>br 自带 clear 属性，clear 属性有 left、right 和 all 三个属性值可选。</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605429316799.png"></p><h4 id="3-给父元素设置-overflow"><a href="#3-给父元素设置-overflow" class="headerlink" title="3.给父元素设置 overflow"></a>3.给父元素设置 overflow</h4><p>添加 overflow 能解决问题，但是也可能因为内容增加导致超出尺寸的内容被隐藏</p><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605429394038.png"></p><h4 id="4-使用after伪元素"><a href="#4-使用after伪元素" class="headerlink" title="4.使用after伪元素"></a>4.使用after伪元素</h4><p><img src="/2020/11/15/Layout-display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/1605429444021.png"></p><p>基本layout demo：</p><p><a href="https://1linelayouts.glitch.me/">https://1linelayouts.glitch.me/</a></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Less</title>
      <link href="2020/11/14/Less/"/>
      <url>2020/11/14/Less/</url>
      
        <content type="html"><![CDATA[<h1 id="less-简介"><a href="#less-简介" class="headerlink" title="less 简介"></a>less 简介</h1><ol><li><p>less是CSS的预编译器，可以扩展CSS语言（当然也兼容CSS），可以定义变量、混合、函数等等，让CSS代码更易维护和扩展</p></li><li><p>less与传统写法相比：</p><ul><li>less后缀为” .less “</li><li>less中的注释有两种</li></ul><pre><code>// 这种注释不会编译到CSS文件*/* 这种注释会编译到CSS文件*/</code></pre></li><li><p>less需要编译成css才能使用</p><ul><li>使用编译工具，比如 Koala 挺好用的（当然也有很多在线编译工具）</li><li>在项目中使用（比如Vue，需要安装less-loader）</li><li>客户端调试（存在跨域问题，不推荐这种方式）</li></ul></li></ol><p>   使用link标签引用less.min.js（官网下载），注意rel=”stylesheet/less” （这种方式不生成css文件，直接在浏览器查看） </p><h2 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a>嵌套规则</h2><ol><li><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>嵌套规则类似HTML的结构，使得CSS代码清晰</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*css 写法*/</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>div p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>div p a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// less写法div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li><li><h3 id="父元素选择符-amp"><a href="#父元素选择符-amp" class="headerlink" title="父元素选择符 &amp;"></a>父元素选择符 &amp;</h3><pre class=" language-css"><code class="language-css">//css写法<span class="token number">.</span>bgcolor &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>bgcolor a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#888888</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>bgcolor <span class="token property">a</span><span class="token punctuation">:</span>hover &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff6600</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//less写法<span class="token number">.</span>bgcolor &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>   a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#888888</span><span class="token punctuation">;</span>          &amp;<span class="token punctuation">:</span>hover &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff6600</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li><li><h3 id="改变选择器的顺序-amp-代表当前选择器的所有父选择器"><a href="#改变选择器的顺序-amp-代表当前选择器的所有父选择器" class="headerlink" title="改变选择器的顺序 - &amp; 代表当前选择器的所有父选择器"></a>改变选择器的顺序 - &amp; 代表当前选择器的所有父选择器</h3><pre class=" language-css"><code class="language-css">ul &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  li &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token number">.</span>color &amp;&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果<span class="token number">.</span>color ul li &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li><li><h3 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h3><pre class=" language-css"><code class="language-css"><span class="token number">.</span>div<span class="token number">1</span>, <span class="token number">.</span>div<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  &amp; &amp; &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid blue<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> //编译结果<span class="token number">.</span>div<span class="token number">1</span>, <span class="token number">.</span>div<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>div<span class="token number">1</span> <span class="token number">.</span>div<span class="token number">2</span>,<span class="token number">.</span>div<span class="token number">2</span> <span class="token number">.</span>div<span class="token number">1</span>,<span class="token number">.</span>div<span class="token number">1</span> <span class="token number">.</span>div<span class="token number">1</span>,<span class="token number">.</span>div<span class="token number">2</span> <span class="token number">.</span>div<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid blue<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="1-变量定义与使用"><a href="#1-变量定义与使用" class="headerlink" title="1.变量定义与使用"></a>1.变量定义与使用</h3><ul><li>定义：@name: value; （@black: #000;）</li><li>@arguments表示所有可变参数</li><li>使用场合分3种：<ul><li>常规使用：@name</li><li>作为选择器或属性名：@{name}</li><li>作为URL：”@{name}”</li></ul></li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 1.常规使用 */</span><span class="token atrule"><span class="token rule">@black</span><span class="token punctuation">:</span> #000000<span class="token punctuation">;</span></span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> @black&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000000</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 2.作用选择器和属性名 */</span><span class="token atrule"><span class="token rule">@selName</span><span class="token punctuation">:</span> container<span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@proName</span><span class="token punctuation">:</span> width<span class="token punctuation">;</span></span><span class="token number">.</span>@&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>selName&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  @&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>proName&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果<span class="token number">.</span>container &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 3.作为URL */</span>@<span class="token property">imgUrl</span><span class="token punctuation">:</span> <span class="token string">"./images/logo.png"</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span> <span class="token url">url("@&amp;#123;imgUrl&amp;#125;")</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span> <span class="token url">url("./images/logo.png")</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="2-变量的加载声明与作用域"><a href="#2-变量的加载声明与作用域" class="headerlink" title="2.变量的加载声明与作用域"></a>2.变量的加载声明与作用域</h3><ul><li><p>变量的加载声明</p><pre class=" language-css"><code class="language-css">div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> @black&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@black</span><span class="token punctuation">:</span> #000000<span class="token punctuation">;</span></span>//编译结果div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000000</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li><li><p>变量的作用域</p><p>less会从当前作用域没找到，将往上查找（类似js）</p><p>如果在某级作用域找到多个相同名称的变量，使用最后定义的那个（类似css）</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@var</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span><span class="token number">.</span>class &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token atrule"><span class="token rule">@var</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>    <span class="token number">.</span>brass &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token atrule"><span class="token rule">@var</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>        <span class="token property">three</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@var</span><span class="token punctuation">;</span></span>        <span class="token atrule"><span class="token rule">@var</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span></span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    <span class="token property">one</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@var</span><span class="token punctuation">;</span></span> //类似js，无法访问<span class="token number">.</span>brass内部&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果<span class="token number">.</span>class &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">one</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>class <span class="token number">.</span>brass &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">three</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  //使用最后定义的 @<span class="token property">var</span><span class="token punctuation">:</span> <span class="token number">3</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="less-gt-css的编译"><a href="#less-gt-css的编译" class="headerlink" title="less -&gt; css的编译"></a>less -&gt; css的编译</h2><h3 id="1-混合（mixins）"><a href="#1-混合（mixins）" class="headerlink" title="1.混合（mixins）"></a>1.混合（mixins）</h3><ol><li><p>一般的混合</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>border &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*这里要注意*/</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token number">.</span>border<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果<span class="token number">.</span>border &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>上面的如果加上括号，那么编译结果会不一样</p><pre class=" language-css"><code class="language-css">//加括号但不带参数的混合<span class="token number">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token number">.</span>border<span class="token punctuation">;</span>  //加不加括号都可以&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li><li><p>带参数的混合</p><pre class=" language-css"><code class="language-css">//带参数的混合<span class="token number">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token atrule"><span class="token rule">@color</span><span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token atrule"><span class="token rule">@color</span><span class="token punctuation">;</span></span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px <span class="token atrule"><span class="token rule">@color</span><span class="token punctuation">;</span></span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token number">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token hexcode">#fff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ol><ol start="3"><li><p>带参数与默认值的混合</p><pre class=" language-css"><code class="language-css">//带参数且有默认值的混合<span class="token number">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token atrule"><span class="token rule">@color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token atrule"><span class="token rule">@color</span><span class="token punctuation">;</span></span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px <span class="token atrule"><span class="token rule">@color</span><span class="token punctuation">;</span></span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token number">.</span>border<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token number">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token hexcode">#000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//编译结果#menu a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#menu p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#000000</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px <span class="token hexcode">#000000</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="2-多个参数"><a href="#2-多个参数" class="headerlink" title="2.多个参数"></a>2.多个参数</h3><p>多个参数时，参数之间可以用分号或逗号分隔</p><p><strong>注意逗号分隔的是“各个参数”还是“某个列表类型的参数”</strong></p><blockquote><p> 两个参数，并且每个参数都是逗号分隔的列表：.name(1,2,3; something, ele)</p><p>三个参数，并且每个参数都包含一个数字：.name(1,2,3)</p><p>使用分号，调用包含一个逗号分割的css列表（一个参数）： .name(1,2,3; )</p><p>逗号分割默认值（两个参数）：.name(@param1:red, blue)</p></blockquote><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">//less编写</span><span class="token comment" spellcheck="true">//定义多个相同名称的混合</span><span class="token comment" spellcheck="true">//less会根据参数进行调用相应的混合</span><span class="token number">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token variable">@color</span><span class="token punctuation">,</span> <span class="token variable">@padding<span class="token punctuation">:</span></span> xxx<span class="token punctuation">,</span> <span class="token variable">@margin<span class="token punctuation">:</span></span> <span class="token number">2</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color-3</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>  <span class="token property">padding-3</span><span class="token punctuation">:</span> <span class="token variable">@padding</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token variable">@margin</span> <span class="token variable">@margin</span> <span class="token variable">@margin</span> <span class="token variable">@margin</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.div &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> something<span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//2个参数</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.div1 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//3个参数</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.div2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//1个参数</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译输出</span><span class="token number">.</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color-3</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">padding-3</span><span class="token punctuation">:</span> something<span class="token punctuation">,</span> ele<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.div1 &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">color-3</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">padding-3</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.div2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">color-3</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">padding-3</span><span class="token punctuation">:</span> xxx<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="3-参数使用时候，顺序不限制"><a href="#3-参数使用时候，顺序不限制" class="headerlink" title="3.参数使用时候，顺序不限制"></a>3.参数使用时候，顺序不限制</h3><pre class=" language-less"><code class="language-less"><span class="token number">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token variable">@color<span class="token punctuation">:</span></span> black<span class="token punctuation">;</span> <span class="token variable">@margin<span class="token punctuation">:</span></span> <span class="token number">10</span>px<span class="token punctuation">;</span> <span class="token variable">@padding<span class="token punctuation">:</span></span> <span class="token number">20</span>px<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token variable">@margin</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token variable">@padding</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class1 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token variable">@margin<span class="token punctuation">:</span></span><span class="token number">20</span><span class="token punctuation">;</span> <span class="token variable">@color<span class="token punctuation">:</span></span> <span class="token hexcode">#33acfe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token hexcode">#efca44</span><span class="token punctuation">;</span> <span class="token variable">@padding<span class="token punctuation">:</span></span> <span class="token number">40</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译输出</span><span class="token number">.</span>class<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#33acfe</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#efca44</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="4-类似函数的匹配模式"><a href="#4-类似函数的匹配模式" class="headerlink" title="4.类似函数的匹配模式"></a>4.类似函数的匹配模式</h3><pre class=" language-less"><code class="language-less"><span class="token number">.</span><span class="token function">border</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span> <span class="token variable">@w<span class="token punctuation">:</span></span> <span class="token number">5</span>px<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token variable">@w</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.border</span><span class="token punctuation">(</span>t_l<span class="token punctuation">,</span> <span class="token variable">@w<span class="token punctuation">:</span></span> <span class="token number">5</span>px<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> <span class="token variable">@w</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.border</span><span class="token punctuation">(</span>b_l<span class="token punctuation">,</span> <span class="token variable">@w<span class="token punctuation">:</span></span> <span class="token number">5</span>px<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> <span class="token variable">@w</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.border</span><span class="token punctuation">(</span>b_r<span class="token punctuation">,</span> <span class="token variable">@w<span class="token punctuation">:</span></span> <span class="token number">5</span>px<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> <span class="token variable">@w</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.border &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.border</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span> <span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译结果</span><span class="token number">.</span>border &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><pre class=" language-less"><code class="language-less"><span class="token number">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token variable">@x</span><span class="token punctuation">,</span> <span class="token variable">@y</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token variable">@average</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">@x</span> <span class="token operator">+</span> <span class="token variable">@y</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.average</span><span class="token punctuation">(</span><span class="token number">16</span>px<span class="token punctuation">,</span> <span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token variable">@average</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译结果</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">33</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="5-用-gt-或者-空格-的选择"><a href="#5-用-gt-或者-空格-的选择" class="headerlink" title="5.用&gt; 或者 空格 的选择"></a>5.用&gt; 或者 空格 的选择</h3><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">//混合集</span>#<span class="token function">bgcolor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#888</span><span class="token punctuation">;</span>    &amp;<span class="token punctuation">:</span>hover &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff6600</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    <span class="token mixin-usage function">.b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ff0000</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.bgcolor1 &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fdfee0</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">#bgcolor>.a</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//只使用.a() 内部的不用</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.bgcolor2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">#bgcolor>.a>.b</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//只使用.b()</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译输出</span><span class="token number">.</span>bgcolor<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fdfee0</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#888</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.bgcolor1:hover &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff6600</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.bgcolor2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ff0000</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="6-引入文件"><a href="#6-引入文件" class="headerlink" title="6.引入文件"></a>6.引入文件</h3><ul><li>引入一个或多个less或者css文件，这些文件定义的规则可在当前less文件中使用</li><li>使用@import</li></ul><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><h3 id="1-条件表达"><a href="#1-条件表达" class="headerlink" title="1.条件表达"></a>1.条件表达</h3><p>​    条件表达式：</p><ul><li><p>比较运算符：&gt;, &gt;=, =, =&lt;, &lt;</p></li><li><p>格式：when() { }</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">// lightness() 是检测亮度的函数，用%度量</span><span class="token number">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token variable">@a</span><span class="token punctuation">)</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token function">lightness</span><span class="token punctuation">(</span><span class="token variable">@a</span><span class="token punctuation">)</span> >= <span class="token number">50%</span> <span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token variable">@a</span><span class="token punctuation">)</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token function">lightness</span><span class="token punctuation">(</span><span class="token variable">@a</span><span class="token punctuation">)</span> &lt; <span class="token number">50%</span> <span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token variable">@a</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@a</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class1 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token hexcode">#ddd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token hexcode">#555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译输出</span><span class="token number">.</span>class<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#dddddd</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class2 &amp;#123</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#555555</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="2-类型检测"><a href="#2-类型检测" class="headerlink" title="2.类型检测"></a>2.类型检测</h3><p>​        iscolor / isnumber / isstring / iskeyword / isurl</p><h3 id="3-检测函数"><a href="#3-检测函数" class="headerlink" title="3.检测函数"></a>3.检测函数</h3><p>​        ispixel / ispercentage / isem / isunit</p><h3 id="4-循环"><a href="#4-循环" class="headerlink" title="4.循环"></a>4.循环</h3><pre class=" language-less"><code class="language-less"><span class="token number">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token variable">@counter</span><span class="token punctuation">)</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">@counter</span> > <span class="token number">0</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.h@&amp;#123</span><span class="token punctuation">;</span>counter&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">10</span>px<span class="token operator">*</span><span class="token variable">@counter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.loop</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">@counter</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归调用自身</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.loop</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="5-合并属性"><a href="#5-合并属性" class="headerlink" title="5.合并属性"></a>5.合并属性</h3><ul><li>在需要合并的属性的冒号之前加上 <strong>“+”</strong>，合并后用逗号分隔</li><li>在需要合并的属性的冒号之前加上 “+_”，合并用空格分隔</li></ul><pre class=" language-less"><code class="language-less"><span class="token number">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background+_</span><span class="token punctuation">:</span> <span class="token hexcode">#f66</span><span class="token punctuation">;</span>  <span class="token property">background+</span><span class="token punctuation">:</span> <span class="token url">url("/sss.jpg")</span><span class="token punctuation">;</span>  <span class="token property">background+_</span><span class="token punctuation">:</span> no<span class="token operator">-</span>repeat<span class="token punctuation">;</span>  <span class="token property">background+</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.class &amp;#123</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译输出</span><span class="token number">.</span>class &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f66</span><span class="token punctuation">,</span> <span class="token url">url("/sss.jpg")</span>  no<span class="token operator">-</span>repeat<span class="token punctuation">,</span> center<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="6-less中封装了非常多函数库"><a href="#6-less中封装了非常多函数库" class="headerlink" title="6.less中封装了非常多函数库"></a>6.less中封装了非常多<a href="http://lesscss.cn/functions/">函数库</a></h3>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layout difference-css</title>
      <link href="2020/11/14/Layout-difference-css/"/>
      <url>2020/11/14/Layout-difference-css/</url>
      
        <content type="html"><![CDATA[<h1 id="各类的布局优缺点："><a href="#各类的布局优缺点：" class="headerlink" title="各类的布局优缺点："></a>各类的布局优缺点：</h1><h2 id="使用display-float或position属性进行页面布局的缺点"><a href="#使用display-float或position属性进行页面布局的缺点" class="headerlink" title="使用display/float或position属性进行页面布局的缺点"></a>使用display/float或position属性进行页面布局的缺点</h2><p>专门写了一篇</p><h2 id="display中的grid"><a href="#display中的grid" class="headerlink" title="display中的grid"></a>display中的grid</h2><p>图文讲解: <a href="https://css-tricks.com/snippets/css/complete-guide-grid/">https://css-tricks.com/snippets/css/complete-guide-grid/</a></p><h3 id="划分格子"><a href="#划分格子" class="headerlink" title="划分格子"></a><strong>划分格子</strong></h3><pre class=" language-css"><code class="language-css">// <span class="token number">1.</span>划分格子用百分比 最常见<span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">30%</span> <span class="token number">70%</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// <span class="token number">2.</span>划分格子用占几份的方式  最常见<span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">12</span>,<span class="token number">1</span>fr<span class="token punctuation">)</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// <span class="token number">3.</span> 绝对长度结合自动<span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">200</span>px auto <span class="token number">200</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// <span class="token number">4.</span>结对长度结合 占几份<span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">200</span>px <span class="token number">2</span>fr <span class="token number">1</span>fr<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="区域的划分方式"><a href="#区域的划分方式" class="headerlink" title="区域的划分方式"></a><strong>区域</strong>的划分方式</h3><pre class=" language-css"><code class="language-css">// <span class="token number">1.</span>指定网格线开始和结束  常用<span class="token number">.</span>item-<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// 也可以使用span关键字<span class="token number">.</span>item-<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// 也可以直接用grid-area一次性分配好区域，可以说是grid-column和grid-row的结合体<span class="token number">.</span>item-<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">1</span> / <span class="token number">3</span> / <span class="token number">3</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// <span class="token number">2.</span>在容器中直接划分好区域并命名<span class="token number">.</span>container &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">"header header header"</span>                       <span class="token string">"main main sidebar"</span>                       <span class="token string">"footer footer footer"</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// 项目中指定区域名<span class="token number">.</span>item-<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> header<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="最常用"><a href="#最常用" class="headerlink" title="最常用"></a>最常用</h3><pre class=" language-css"><code class="language-css">// 响应式布局  每列的宽度在<span class="token number">200</span>px到<span class="token number">1</span>fr之间（总宽度大于<span class="token number">200</span>px时每行尽可能多的放下更多子项目）<span class="token number">.</span>container &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill,<span class="token function">minmax</span><span class="token punctuation">(</span><span class="token number">200</span>px,<span class="token number">1</span>fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>// <span class="token number">12</span>等宽法+区域划分<span class="token number">.</span>container &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>        <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">12</span>, <span class="token number">1</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">1</span>fr <span class="token number">4</span>fr <span class="token number">1</span>fr<span class="token punctuation">;</span>    <span class="token property">grid-template-areas</span><span class="token punctuation">:</span>        <span class="token string">"h h h h h h h h h h h h"</span>        <span class="token string">"m m c c c c c c c c c c"</span>        <span class="token string">"f f f f f f f f f f f f"</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>header &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">grid-area</span><span class="token punctuation">:</span> h<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> steelblue<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>menu &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">grid-area</span><span class="token punctuation">:</span> m<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>content &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">grid-area</span><span class="token punctuation">:</span> c<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>footer &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>   <span class="token property">grid-area</span><span class="token punctuation">:</span> f<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="multi-columns布局"><a href="#multi-columns布局" class="headerlink" title="multi-columns布局"></a>multi-columns布局</h2><p>  使用多栏布局可以将<strong>一个元素中的内容分为两栏或多栏显示</strong>，并且<strong>确保各栏中内容底部对齐</strong></p><p>以上的各个属性，在<strong>Firefox</strong>浏览器中要添加前缀 “**-moz-<strong>”;；在</strong>Safair、chrome或Opera<strong>浏览器中需要添加前缀 “</strong>-webkit-<strong>”; 在</strong>IE**浏览器中，不需要添加浏览器供应商前缀；</p><h2 id="box布局"><a href="#box布局" class="headerlink" title="box布局"></a>box布局</h2><p>同样可以解决页面布局时底面不对齐的问题；</p><p>通过<strong>box属性</strong>来使用盒布局，在Firefox浏览器中，需要书写成：“**-moz-box<strong>”，在Safari、Chrome、Opera浏览器中需要书写成：“</strong>-webkit-box**”；</p><h2 id="box布局与multi-columns布局的区别："><a href="#box布局与multi-columns布局的区别：" class="headerlink" title="box布局与multi-columns布局的区别："></a><strong>box布局与multi-columns布局的区别：</strong></h2><ol><li><p>使用多栏布局时，各个栏宽度必须是相等的，在指定每栏宽度时，只能为所有的栏指定一个统一的宽度，栏与栏之间的宽度不可能是不一样的；</p></li><li><p>使用多栏布局，不可能具体指定什么栏中显示什么内容；</p><p> 因此，多栏布局适合用于在显示文章内容的时候，不适合安排整个网页中各个元素组成的网页结构。</p></li></ol><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p>只要使用<strong>flex属性</strong>就可以使盒布局变为弹性布局了，即，元素的高度与宽度具有自适应性；</p><p><strong>使用盒布局的时候，元素的高度与宽度具有自适应</strong>；即，元素的高度与宽度根据排列方向的改变而改变；</p><p>当为<strong>横向</strong>时：宽度与元素中的内容相等，<strong>高度等于容器高度</strong>；</p><p>当为<strong>纵向</strong>时：高度为元素内容的高度，<strong>宽度为容器的宽度</strong>；</p><h2 id="对多个元素使用flex属性"><a href="#对多个元素使用flex属性" class="headerlink" title="对多个元素使用flex属性"></a>对多个元素使用flex属性</h2><pre class=" language-css"><code class="language-css">#container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* flex属性 变成弹性盒布局 */</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">5</span>px blue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 排列方向 */</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span>column<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* flex-direction:row; */</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#text-a&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 显示顺序 */</span>    <span class="token property">order</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#text-b&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">order</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#text-c&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">order</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> limegreen<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#text-a, #text-b, #text-c&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.5</span>em<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><strong>a、b、c三个div中的flex值分别为1,1,2，其实就是相当于把空白部分分成4份，a、b各占1份，c占2份；</strong></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>columns多布局-css</title>
      <link href="2020/11/14/columns-css/"/>
      <url>2020/11/14/columns-css/</url>
      
        <content type="html"><![CDATA[<h1 id="columns-布局"><a href="#columns-布局" class="headerlink" title="columns 布局"></a>columns 布局</h1><h1 id="multi-columns-布局"><a href="#multi-columns-布局" class="headerlink" title="multi-columns 布局"></a>multi-columns <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/columns">布局</a></h1><p>允许简单地定义多列文本</p><h3 id="基本声明"><a href="#基本声明" class="headerlink" title="基本声明"></a>基本声明</h3><pre class=" language-css"><code class="language-css"><span class="token property">columns</span><span class="token punctuation">:</span> column-width | column-count<span class="token punctuation">;</span>column-gap <span class="token comment" spellcheck="true">/*栏之间的间隔*/</span>column-rule <span class="token comment" spellcheck="true">/*分割线 与border的写法几乎一毛一样*/</span><span class="token comment" spellcheck="true">/*column-rule分开写是这样的：*/</span>column-rule-width <span class="token comment" spellcheck="true">/*分割线宽*/</span>column-rule-style <span class="token comment" spellcheck="true">/*分割线样式*/</span>column-rule-color <span class="token comment" spellcheck="true">/*分割线颜色*/</span></code></pre><p><img src="/2020/11/14/columns-css/1605332729263.png"></p><p>以上的各个属性，在<strong>Firefox</strong>浏览器中要添加前缀 “**-moz-**”;</p><p>在<strong>Safair、chrome或Opera</strong>浏览器中需要添加前缀 “**-webkit-**”;</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Media Queries-css</title>
      <link href="2020/11/14/Media-Queries-css/"/>
      <url>2020/11/14/Media-Queries-css/</url>
      
        <content type="html"><![CDATA[<h1 id="Media-Query-css"><a href="#Media-Query-css" class="headerlink" title="Media Query-css"></a>Media Query-css</h1><p>目的：因为不同的设备，萤幕宽度不同，显示的要求不一样</p><p>需要灵活设置</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 525px<span class="token punctuation">)</span>&amp;#123<span class="token punctuation">;</span></span>  <span class="token number">.</span>Gool&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*background-color: orange;*/</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">3%</span><span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">3%</span><span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      #copyright&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">3%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@media</span>  <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 526px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 991px<span class="token punctuation">)</span>&amp;#123<span class="token punctuation">;</span></span>  <span class="token number">.</span>Gool&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>@media (min-width:320px) and (max-width:525px)<br>表示在萤幕宽度320px~525px之间执行</p><p>@media (min-width:526px) and (max-width:991px)<br>表示在萤幕宽度526px~991px之间执行</p><ul><li>and：代表与的意思,一般用and来连接媒体类型个媒体属性<pre><code>   only：和浏览器兼容性有关。</code></pre></li><li> 老版本的浏览器只支持媒体类型，不支持带媒体属性的查</li><li>@media screen{}<pre><code>   @media only&#123;&#125;   （,）：代表或的意思   not:取反</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图上字下的方法-css</title>
      <link href="2020/11/13/%E5%9B%BE%E4%B8%8A%E5%AD%97%E4%B8%8B%E7%9A%84%E6%96%B9%E6%B3%95-css/"/>
      <url>2020/11/13/%E5%9B%BE%E4%B8%8A%E5%AD%97%E4%B8%8B%E7%9A%84%E6%96%B9%E6%B3%95-css/</url>
      
        <content type="html"><![CDATA[<h1 id="图上字下的方法-css"><a href="#图上字下的方法-css" class="headerlink" title="图上字下的方法-css"></a><strong>图上字下的方法-css</strong></h1><h2 id="1-flex布局-使用了background-img-link"><a href="#1-flex布局-使用了background-img-link" class="headerlink" title="1.flex布局 使用了background img link"></a>1.flex布局 使用了background img link</h2><h2 id="2-表格"><a href="#2-表格" class="headerlink" title="2.表格"></a>2.表格</h2><h2 id="3-img块与文字块（文本块存放在div中）放在同一个div-中，然后设置他们之间的位置-或者-img块与文字块（文字块采用span-a标签显示）放在同一个div"><a href="#3-img块与文字块（文本块存放在div中）放在同一个div-中，然后设置他们之间的位置-或者-img块与文字块（文字块采用span-a标签显示）放在同一个div" class="headerlink" title="3.img块与文字块（文本块存放在div中）放在同一个div 中，然后设置他们之间的位置 或者 img块与文字块（文字块采用span/a标签显示）放在同一个div"></a>3.img块与文字块（文本块存放在div中）放在同一个div 中，然后设置他们之间的位置 <strong>或者</strong> img块与文字块（文字块采用span/a标签显示）放在同一个div</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            *&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                 <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">100</span>px auto<span class="token punctuation">;</span>                <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap > <span class="token number">.</span>item&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> whitesmoke<span class="token punctuation">;</span>                <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>                <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>                <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap > <span class="token number">.</span>item > <span class="token property">a</span><span class="token punctuation">:</span>before&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">86</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">86</span>px<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap > <span class="token number">.</span><span class="token property">item</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> ><span class="token property">a</span><span class="token punctuation">:</span>before&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(./img/02.png)</span> no-repeat<span class="token punctuation">;</span>                <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span> auto            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>               <span class="token number">.</span>list-img&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30</span>vw<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*viewport change in %*/</span>                <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            li&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>下面是用div 但是加入了flex布局 使用了background img link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/01.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>img+div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>bgimg+a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/03.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这个为div+flex<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>下面的使用表格实现的 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-img<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/04.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    随着视窗大小变化图片大小                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/05.png<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">  <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    固定大小                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">2000</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>或者将img块与文字块（文本块存放在div中）放在同一个div 中，然后设置他们之间的位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/07.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span> <span class="token property">z-index</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下文标题 下文详细解释<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><a href="/demo/cssdemo1/cssdemo1.html">链接到demo1</a></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex-grow vs flex-shrink vs flex-basis</title>
      <link href="2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/"/>
      <url>2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/</url>
      
        <content type="html"><![CDATA[<h2 id="Flex-Layout-Reference"><a href="#Flex-Layout-Reference" class="headerlink" title="Flex Layout Reference"></a>Flex Layout Reference</h2><p>flex 默认： 1 0 auto；</p><h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><p> <strong>flex-basis</strong>  ，主要成分，flex-basis 預設值爲 auto，表示其預設分配到的空間，與 width 很像，但優先程度較高。</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605267508063.png"></p><h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><p><strong>flex-grow</strong>，扩大，扩展，增加,这就代表当父元素的宽度大于子元素宽度之和时，并且父元素有剩余，这时，flex-grow就会说我要成长，我要长大，怎么样才能成长呢，当然是分享父元素的空间了。</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605267618433.png"></p><p>两个状况： 1大家一起分空间，2就是剩余会被大哥分掉</p><p>container 寬度爲 1000px，每個 box 寬度爲 100px。粉色綠色藍色方塊皆爲 100px，剩餘區域爲 700px。</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605774181775.png"></p><p>接著設定粉色盒子 <code>flex-grow:1;</code> ，表示剩餘空間 700px，分爲 1 份，皆分配給粉色盒子，則粉色盒子寬度爲 800px。效果如下：</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605774210372.png"></p><p>接著將綠色盒子也設定 <code>flex-grow:1;</code> ，表示剩餘空間 700px，分爲 2 份，分配給粉色盒子及綠色盒子各一份，各分 350px，粉色盒子及綠色盒子寬度皆爲 450px。效果如下：</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605774235983.png"></p><h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><p><strong>flex-shrink</strong>， 收缩，flex-shrink 是 flex-grow 的反向，有剩餘空間，就表示也有不夠空間的時候。flex-shrink 表示空間不夠時的壓縮比例。預設值爲 1。表示大家被壓縮的比例相同。</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605267974102.png"></p><p>container 寬度維持 1000px，每個 box 寬度改爲 400px，總共 1200px，超出 container 寬度。則每個盒子因爲 flex-shrink 預設爲 1 的關係，不夠的空間分均分壓縮三個盒子。效果如下(爲了可視化 container，設置紅色框線)：</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605774424023.png"></p><p>接著試試看把盒子皆設定 flex-shrink 爲 0，不要有任何壓縮，則三個盒子會爆出 container ，這也是 flex 爲了預防爆版，預設值爲 1 的用意，效果如下：</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605774443655.png"></p><p>接著試試看粉色盒子 flex-shrink 爲 1，其他盒子爲 0，則不夠的部分只會壓縮粉色盒子，效果如下：</p><p><img src="/2020/11/13/flex-grow-vs-flex-shrink-vs-flex-basis/1605774467911.png"></p><ul><li>flex-grow: 0.2 表示希望获得20%的蛋糕；</li><li>flex-grow: 1 表示希望获得100%整个蛋糕（有点过分啊，不考虑其他兄弟）；</li><li>flex-grow: 2 表示希望获得200%的蛋糕（这是明抢啊，态度很明确）。</li></ul><h2 id="赋值计算"><a href="#赋值计算" class="headerlink" title="赋值计算"></a>赋值计算</h2><blockquote><p>flex-basis（默认值为auto）<br>flex-grow（默认值为0）<br>    可用空间 = (容器大小 - 所有相邻项目flex-basis的总和)<br>    可扩展空间 = (可用空间/所有相邻项目flex-grow的总和)<br>    每项伸缩大小 = (伸缩基准值flex-basis + (可扩展空间 x flex-grow值))<br>flex-shrink（默认值为1）<br>    –.计算收缩因子与基准值乘的总和<br>      var a = 每一项flex-shrink<em>flex-basis之和<br>     –.计算收缩因数<br>      收缩因数=（项目的收缩因子</em>项目基准值）/第一步计算总和<br>       var b =  (flex-shrink*flex-basis)/a<br>     –.移除空间的计算<br>       移除空间= 项目收缩因数 x 负溢出的空间<br>        var c =  b * 溢出的空间    </p></blockquote><h2 id="选择判断"><a href="#选择判断" class="headerlink" title="选择判断"></a>选择判断</h2><p>当元素的排列方向为<strong>横</strong>向：</p><p>​    元素的总宽度小于容器的宽度，使用flex-grow属性；</p><p>​    元素的总宽度大于容器的宽度，使用flex-shrink属性；</p><p>当元素排列的方向为<strong>纵</strong>向：</p><p>​    元素的总高度小于容器的高度，使用flex-grow属性；</p><p>​    元素的总高度小于容器的高度，使用flex-shrink属性；</p><h2 id="Demo："><a href="#Demo：" class="headerlink" title="Demo："></a>Demo：</h2><p><a href="/demo/quiz/html/flex.html">链接到demo1</a></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layout-flex</title>
      <link href="2020/11/13/Layout-flex/"/>
      <url>2020/11/13/Layout-flex/</url>
      
        <content type="html"><![CDATA[<h1 id="Layout-Flex"><a href="#Layout-Flex" class="headerlink" title="Layout - Flex"></a><strong>Layout - Flex</strong></h1><p><img src="/2020/11/13/Layout-flex/1605245444171.png"></p><p><strong>盒子模型</strong>   —   依赖 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><code>display</code></a> 属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"><code>position</code></a>属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float"><code>float</code></a>属性</p><p><strong>Flex 布局</strong>   —   flex属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code> 的简写 </p><p><strong>Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效</strong></p><p><img src="/2020/11/13/Layout-flex/1605247566336.png"></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>horizontal | vertical<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*-webkit-box-orient控制主轴和侧轴分别是哪一根 Safari 6.1 (及更新浏览器) 通过 -webkit-flex 属性支持*/</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row | row-reverse | column | column-reverse<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*主轴的方向*/</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap | wrap | wrap-reverse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 挤一行 换行 反向走*/</span>  <span class="token property">flex-flow</span><span class="token punctuation">:</span> &lt;flex-direction> || &lt;flex-wrap><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*flex-direction属性和flex-wrap*/</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around | stretch<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。    align-content  https://developer.mozilla.org/en-US/docs/Web/CSS/align-content  */</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><pre class=" language-css"><code class="language-css">  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*项目在主轴上的对齐方式   左 右 中 两端&amp;间隔对等 每个两侧间隔相等*/</span></code></pre><p><img src="/2020/11/13/Layout-flex/1605776747612.png"></p><pre class=" language-css"><code class="language-css">  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*项目对其方式 上下中 第一行文字的基线对齐 拉伸（默认）*/</span></code></pre><p><img src="/2020/11/13/Layout-flex/1605776777298.png"></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>item &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">order</span><span class="token punctuation">:</span> &lt;integer><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*项目的排列顺序。数值越小，排列越靠前，默认为0。*/</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> number|initial|inherit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*弹性盒子的扩展比率*/</span>  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* default 1 在所有因子相加之后计算比率来进行空间收缩*/</span>  flex-basis / <span class="token property">flex-grow</span><span class="token punctuation">:</span> &lt;width> | sizing keywords | content | auto<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* default auto */</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> auto | flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性*/</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><code>max-content</code>: 尺寸值会变得尽可能大, 没有自动换行的机会. 如果<code>flex</code>容器<strong>太窄</strong>， 它就会<strong>溢出</strong>其自身的盒子。</p><p><code>min-content</code>: 文本已尽可能抓住机会来自动换行, 变得尽可能小且没有溢出。</p><p><img src="/2020/11/13/Layout-flex/1605774609826.png"></p><p>注意：</p><p>当元素的排列方向为<strong>横</strong>向：</p><p>​    元素的总宽度小于容器的宽度，使用flex-grow属性；</p><p>​    元素的总宽度大于容器的宽度，使用flex-shrink属性；</p><p>当元素排列的方向为<strong>纵</strong>向：</p><p>​    元素的总高度小于容器的高度，使用flex-grow属性；</p><p>​    元素的总高度小于容器的高度，使用flex-shrink属性；</p><h2 id="Flex-Layout-Reference"><a href="#Flex-Layout-Reference" class="headerlink" title="Flex Layout Reference"></a>Flex Layout Reference</h2><p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout</a></p><h1 id="Flexbox-demo"><a href="#Flexbox-demo" class="headerlink" title="Flexbox  demo"></a>Flexbox  demo</h1><p>DEMO地址:<br><a href="https://lincenying.github.io/vue2-flex/">https://lincenying.github.io/vue2-flex/</a></p><p>仓库地址:<br><a href="https://github.com/lincenying/vue2-flex">https://github.com/lincenying/vue2-flex</a></p><h1 id="Flexbox-布局demo"><a href="#Flexbox-布局demo" class="headerlink" title="Flexbox 布局demo"></a>Flexbox 布局demo</h1><p>仓库地址:<br><a href="https://github.com/philipwalton/solved-by-flexbox">https://github.com/philipwalton/solved-by-flexbox</a></p><p>DEMO地址:<br><a href="https://philipwalton.github.io/solved-by-flexbox/">https://philipwalton.github.io/solved-by-flexbox/</a></p><p>该实例列举 6 中常见的布局方式, 包括:</p><ol><li>网格系统<br><a href="https://philipwalton.github.io/solved-by-flexbox/demos/grids/">https://philipwalton.github.io/solved-by-flexbox/demos/grids/</a></li><li>圣杯布局<br><a href="https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/">https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/</a></li><li>input 拓展<br><a href="https://philipwalton.github.io/solved-by-flexbox/demos/input-add-ons/">https://philipwalton.github.io/solved-by-flexbox/demos/input-add-ons/</a></li><li>图文排版<br><a href="https://philipwalton.github.io/solved-by-flexbox/demos/media-object/">https://philipwalton.github.io/solved-by-flexbox/demos/media-object/</a></li><li>固定底部<br><a href="https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/">https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/</a></li><li>绝对居中<br><a href="https://philipwalton.github.io/solved-by-flexbox/demos/vertical-centering/">https://philipwalton.github.io/solved-by-flexbox/demos/vertical-centering/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Text css</title>
      <link href="2020/11/12/Text-css/"/>
      <url>2020/11/12/Text-css/</url>
      
        <content type="html"><![CDATA[<h1 id="文字变化"><a href="#文字变化" class="headerlink" title="文字变化"></a>文字变化</h1><h3 id="文字阴影：text-shadow"><a href="#文字阴影：text-shadow" class="headerlink" title="文字阴影：text-shadow"></a>文字阴影：text-shadow</h3><h3 id="文字模糊：-transition-1s-text-shadow"><a href="#文字模糊：-transition-1s-text-shadow" class="headerlink" title="文字模糊： transition: 1s ; + text-shadow"></a>文字模糊： transition: 1s ; + text-shadow</h3><p>//transition的用法很多 只要是变更原先位置的基本都有关</p><h3 id="文字方向：-direction-amp-unicode-bidi"><a href="#文字方向：-direction-amp-unicode-bidi" class="headerlink" title="文字方向： direction &amp; unicode-bidi"></a>文字方向： direction &amp; unicode-bidi</h3><h3 id="word-spacing属性"><a href="#word-spacing属性" class="headerlink" title="word-spacing属性"></a>word-spacing属性</h3><ul><li>设置元素内单词(以空格为判断是否为单词)之间的间距.</li><li>取值: px和em(正负值都可以).</li></ul><h3 id="letter-spacing属性"><a href="#letter-spacing属性" class="headerlink" title="letter-spacing属性"></a>letter-spacing属性</h3><ul><li>设置元素内字母之间的间距.</li><li>取值: px和em(正负值都可以).</li></ul><h3 id="text-transform属性"><a href="#text-transform属性" class="headerlink" title="text-transform属性"></a>text-transform属性</h3><p> 设置元素内文本的大小写.</p><pre><code>text-transform: capitalize(首字母大写)| uppercase(大写)| lowercase(小写) | none(默认效果);</code></pre><h3 id="text-decoration属性"><a href="#text-decoration属性" class="headerlink" title="text-decoration属性"></a>text-decoration属性</h3><p>设置元素内文本的装饰</p><pre><code>text-decoration: underline(下划线) overline(上划线) line-through(类似删除线)  none(默认效果).</code></pre><h3 id="text-indent属性"><a href="#text-indent属性" class="headerlink" title="text-indent属性"></a>text-indent属性</h3><p>text-indent 属性规定文本块中首行文本的缩进:</p><h3 id="溢出的文字省略号显示"><a href="#溢出的文字省略号显示" class="headerlink" title="溢出的文字省略号显示"></a>溢出的文字省略号显示</h3><h4 id="white-space强制一行显示"><a href="#white-space强制一行显示" class="headerlink" title="white-space强制一行显示"></a>white-space强制一行显示</h4><p>  设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容.</p><pre><code>/*默认处理方式*/white-space:normal ；white-space:nowrap ；/*强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。*/</code></pre><h4 id="text-overflow-文字溢出"><a href="#text-overflow-文字溢出" class="headerlink" title="text-overflow 文字溢出"></a>text-overflow 文字溢出</h4><ul><li>设置或检索是否使用一个省略标记（…）<strong>表示对象内文本的溢出.</strong></li><li>首先强制一行内显示，再次和overflow属性 搭配使用.</li></ul><pre><code>/*不显示省略标记（...），而是简单的裁切 */text-overflow : clip ；/* 当对象内文本溢出时显示省略标记（...）*/text-overflow：ellipsis ；</code></pre>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Image css</title>
      <link href="2020/11/12/Image-css/"/>
      <url>2020/11/12/Image-css/</url>
      
        <content type="html"><![CDATA[<h1 id="Image-in-CSS"><a href="#Image-in-CSS" class="headerlink" title="Image in CSS"></a><strong>Image in CSS</strong></h1><h2 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h2><p>background: url(img/avatar.jpg) no-repeat;</p><p>background-size:100% 100% ;</p><p> filter: blur(10px);</p><p>景深+移动（例子 蓝天白云，远近移动)</p><p>变形，移位： transform（2D，3D）， translate，animation</p><p>倒影：-webkit-box-reflect:</p><p>颜色渐变：linear-gradient</p><p>动态动画控制：@keyframes animation</p><p>​               </p><h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><h3 id="rainbow变色块"><a href="#rainbow变色块" class="headerlink" title="rainbow变色块"></a>rainbow变色块</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#rect &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">animation-name</span><span class="token punctuation">:</span>rainbow<span class="token punctuation">;</span><span class="token property">animation-duration</span><span class="token punctuation">:</span><span class="token number">4</span>s<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow &amp;#123<span class="token punctuation">;</span></span><span class="token number">0%</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">50%</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">100%</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h2><p>Image css: <a href="https://www.w3schools.com/howto/howto_js_slideshow.asp">https://www.w3schools.com/howto/howto_js_slideshow.asp</a></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水平居中/centering</title>
      <link href="2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/"/>
      <url>2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/</url>
      
        <content type="html"><![CDATA[<h1 id="纯CSS七大居中方法"><a href="#纯CSS七大居中方法" class="headerlink" title="纯CSS七大居中方法"></a>纯CSS七大居中方法</h1><h3 id="1-上下左右定位-margin居中法"><a href="#1-上下左右定位-margin居中法" class="headerlink" title="1.上下左右定位+margin居中法"></a>1.上下左右定位+margin居中法</h3><pre class=" language-css"><code class="language-css">父元素：<span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>子元素：<span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>//或者子元素： <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> display：block；</code></pre><h3 id="2-50-定位-margin居中法-（通过子元素设置relative-负margin）"><a href="#2-50-定位-margin居中法-（通过子元素设置relative-负margin）" class="headerlink" title="2.50%定位+margin居中法 （通过子元素设置relative + 负margin）"></a>2.50%定位+margin居中法 （通过子元素设置relative + 负margin）</h3><pre><code>父元素：position: relative;子元素：position: absolute; left: 50%; top: 50%; margin: -200px 0 0 -200px;</code></pre><p>注：200px须为该子元素的宽高的一半。例如该子元素宽为100px，高为50px，那么margin取值为-25px 0 0 -50px。该方法缺点是须确定子元素宽高。</p><h3 id="3-table-cell居中法"><a href="#3-table-cell居中法" class="headerlink" title="3.table-cell居中法"></a>3.table-cell居中法</h3><pre><code>父元素：display: table-cell; text-align: center; vertical-align: middle;子元素：display: inline-block;</code></pre><h3 id="4-50-定位-translate居中法（此方法很好用）"><a href="#4-50-定位-translate居中法（此方法很好用）" class="headerlink" title="4.50%定位+translate居中法（此方法很好用）"></a>4.50%定位+translate居中法（此方法很好用）</h3><pre><code>父元素：position: relative;子元素：position: absolute; left: 50%; top: 50%; transform: translate(-50%,-50%);</code></pre><h3 id="5-Flexbox-margin居中法（此方法很好用）"><a href="#5-Flexbox-margin居中法（此方法很好用）" class="headerlink" title="5.Flexbox+margin居中法（此方法很好用）"></a>5.Flexbox+margin居中法（此方法很好用）</h3><pre><code>父元素：display: flex;子元素：margin: auto;</code></pre><p>6.Flexbox居中法</p><pre><code>父元素：display: flex; justify-content: center; align-items: center;</code></pre><p>注：该方法使用了Flexbox弹性布局，移动端兼容性也存在很大问题。</p><h3 id="7-text-align居中法"><a href="#7-text-align居中法" class="headerlink" title="7.text-align居中法"></a>7.text-align居中法</h3><pre><code>父元素：text-align: center; line-height:600px; font-size: 0;子元素：display: inline-block; vertical-align: middle;</code></pre><h3 id="8-利用flex全页面居中"><a href="#8-利用flex全页面居中" class="headerlink" title="8.利用flex全页面居中"></a>8.利用flex全页面居中</h3><p><img src="/2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/1605667496243.png"></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>box &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Vertical Centering*/</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* align-self: center;  want specific flex items to be centered vertically*/</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>box div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&lt;div class=<span class="token string">"box"</span>>  &lt;div>&lt;/div>&lt;/div></code></pre><h3 id="9-对于图片以及文字居中-对于行元素"><a href="#9-对于图片以及文字居中-对于行元素" class="headerlink" title="9.对于图片以及文字居中  - 对于行元素"></a>9.对于图片以及文字居中  - 对于行元素</h3><h4 id="Center-horizontally"><a href="#Center-horizontally" class="headerlink" title="Center horizontally"></a>Center horizontally</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>   <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>   <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>   &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  span &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/1607004149205.png"></p><p>或者其父元素(必须是块级元素)设置如下CSS样式</p><pre class=" language-css"><code class="language-css">div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>   &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>对于多个子元素，排列为中间 - 设置元素自身display: block属性和text-align:center属性</p><pre class=" language-css"><code class="language-css">span &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>           <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>           <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>       &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/1607004549132.png"></p><h4 id="Center-Vertically"><a href="#Center-Vertically" class="headerlink" title="Center Vertically"></a>Center Vertically</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token number">.</span>center &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I am vertically centered.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/1605106109638.png"></p><h4 id="center-both-vertically-and-horizontally"><a href="#center-both-vertically-and-horizontally" class="headerlink" title="center both vertically and horizontally"></a>center both vertically and horizontally</h4><pre class=" language-css"><code class="language-css"><span class="token number">.</span>center &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">70</span>px <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">3</span>px solid green<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> //父级要求居中&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>或者</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>center &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">3</span>px solid green<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>//父级要求居中&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* If the text has multiple lines, add the following: */</span><span class="token number">.</span>center p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span> //子级显示  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>//纵向&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/1605106167637.png"></p><h3 id="10-对于有多个div状态的保留块元素的排版，父元素居中"><a href="#10-对于有多个div状态的保留块元素的排版，父元素居中" class="headerlink" title="10.对于有多个div状态的保留块元素的排版，父元素居中"></a>10.对于有多个div状态的保留块元素的排版，父元素居中</h3><pre class=" language-css"><code class="language-css">//父元素<span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>,<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/1605688618077.png"></p><p>或者是（这种的话 多个div不好弄 代码很累赘）</p><p><img src="/2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/1605688640436.png"></p><pre class=" language-html"><code class="language-html"> .box <span class="token entity" title="&#123;">&amp;#123;</span>            display: flex;            justify-content: space-between;          <span class="token entity" title="&#125;">&amp;#125;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>One<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Three          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>has          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>extra          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>text      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h1 id="根据元素选择方式"><a href="#根据元素选择方式" class="headerlink" title="根据元素选择方式"></a>根据元素选择方式</h1><h2 id="1-元素为行内元素时"><a href="#1-元素为行内元素时" class="headerlink" title="(1)元素为行内元素时"></a>(1)元素为行内元素时</h2><ul><li><p>给其父元素(必须是块级元素)设置 text-align: center;</p></li><li><p>元素自身display: block属性和text-align:center属性也能达到水平居中的效果</p><p>例子-centering horizontally 上面的1</p></li></ul><h2 id="2-元素为块级元素时"><a href="#2-元素为块级元素时" class="headerlink" title="(2)元素为块级元素时"></a>(2)元素为块级元素时</h2><ul><li><p>该块级元素设置如下代码 margin: 0 auto - 上面的2</p></li><li><p>思路:先将子元素设置为块级表格来显示（类似），再将其设置水平居中.  <strong>display:table和margin</strong></p></li><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>          <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>          <span class="token property">background-color</span><span class="token punctuation">:</span> orangered<span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是一个段落,想要居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>absolute+transform</strong> - 上面的4</p></li><li><p><strong>flex+justify-content</strong> 上面的6</p></li></ul><h2 id="3-多个块级元素时"><a href="#3-多个块级元素时" class="headerlink" title="(3)多个块级元素时"></a>(3)多个块级元素时</h2><ul><li>多个块级元素时</li><li>利用inline-block</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token number">.</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落,想要居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落,想要居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落,想要居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="4-浮动元素水平居中-父absolute-relative"><a href="#4-浮动元素水平居中-父absolute-relative" class="headerlink" title="(4)浮动元素水平居中 (父absolute/relative)"></a>(4)浮动元素水平居中 (父absolute/relative)</h2><ul><li><p><strong>宽度不固定的浮动元素</strong></p></li><li><ul><li>父元素和子元素同时左浮动，然后父元素相对左移动50%;</li><li>再然后子元素相对右移动50%，或者子元素相对左移动-50%也就可以了.</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token number">.</span>div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>             <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>//<span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是一个段落,想要居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是一个段落,想要居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/11/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-centering/1607005649322.png"></p><h2 id="5-绝对定位的元素水平居中对齐"><a href="#5-绝对定位的元素水平居中对齐" class="headerlink" title="(5)绝对定位的元素水平居中对齐"></a>(5)绝对定位的元素水平居中对齐</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">       <span class="token number">.</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>           <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>           <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>           <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>           <span class="token property">background</span><span class="token punctuation">:</span> palevioletred<span class="token punctuation">;</span>           <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>           <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>       &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>       p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>           <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>       &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落,想要居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落,想要居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落,想要居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h1 id="other-trick："><a href="#other-trick：" class="headerlink" title="other trick："></a>other trick：</h1><p><a href="https://www.digitalocean.com/community/tutorials/css-centering-using-flexbox">https://www.digitalocean.com/community/tutorials/css-centering-using-flexbox</a></p><p><a href="https://www.w3.org/Style/Examples/007/center.en.html#text">https://www.w3.org/Style/Examples/007/center.en.html#text</a></p><p><a href="https://www.w3schools.com/css/css_align.asp">https://www.w3schools.com/css/css_align.asp</a> </p><p>Reference:</p><ol><li><a href="https://developer.aliyun.com/article/635759?spm=a2c6h.14164896.0.0.54cf667ajTM2fR">https://developer.aliyun.com/article/635759?spm=a2c6h.14164896.0.0.54cf667ajTM2fR</a></li><li><a href="https://developer.aliyun.com/article/591138?spm=a2c6h.14164896.0.0.54cf667ajTM2fR">https://developer.aliyun.com/article/591138?spm=a2c6h.14164896.0.0.54cf667ajTM2fR</a></li><li><a href="https://www.w3schools.com/css/css_align.asp">https://www.w3schools.com/css/css_align.asp</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tools for building web</title>
      <link href="2020/11/11/tools-for-building-web/"/>
      <url>2020/11/11/tools-for-building-web/</url>
      
        <content type="html"><![CDATA[<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p>基本布局查询 ：<a href="http://demo.haoji.me/notebook/">http://demo.haoji.me/notebook/</a></p><ul><li><p>can i use ： <a href="https://caniuse.com/">https://caniuse.com/</a>  (check support table for htmll css )</p></li><li><p>dev web doc ：  <a href="https://developer.mozilla.org/en-US/">https://developer.mozilla.org/en-US/</a></p></li><li><p>bootstrap ： <a href="https://v3.bootcss.com/css/">https://v3.bootcss.com/css/</a></p></li><li><p>css trick ： <a href="https://css-tricks.com/guides/">https://css-tricks.com/guides/</a></p></li><li><p>Free icon：<a href="https://www.flaticon.com/search?word=car">https://www.flaticon.com/search?word=car</a></p></li><li><p>hover css：<a href="https://ianlunn.github.io/Hover/">https://ianlunn.github.io/Hover/</a></p></li><li><p>w3school : <a href="https://www.w3schools.com/howto/">https://www.w3schools.com/howto/</a></p></li><li><p>regular expression : </p><p><a href="https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24">https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24</a></p><p><a href="https://regexr.com/">https://regexr.com/</a></p></li><li><p>在线工具： <a href="https://c.runoob.com/">https://c.runoob.com/</a></p></li><li><p>Css 库 （w3) ：<a href="https://www.w3schools.com/w3css/w3css_animate.asp">https://www.w3schools.com/w3css/w3css_animate.asp</a></p></li><li><p>类型对比： <a href="https://dorey.github.io/JavaScript-Equality-Table/">https://dorey.github.io/JavaScript-Equality-Table/</a></p></li><li><p>TIME STAMP 使用 tool      <a href="https://github.com/airbnb/react-dates">Airbnb ：react dates</a> &amp; <a href="https://momentjs.com/">moment js</a></p></li></ul><h2 id="Demo-借鉴"><a href="#Demo-借鉴" class="headerlink" title="Demo 借鉴"></a>Demo 借鉴</h2><ol><li>demo库      <a href="http://resource.haorooms.com/">http://resource.haorooms.com/</a></li><li>基本布局  <a href="http://demo.haoji.me/2016/11/24-css-layout/">http://demo.haoji.me/2016/11/24-css-layout/</a></li><li>视频大小  <a href="http://demo.haoji.me/2016/01/09-html5-video-resize/">http://demo.haoji.me/2016/01/09-html5-video-resize/</a></li></ol><h2 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h2><ul><li>木之多   <a href="https://www.shuzhiduo.com/">https://www.shuzhiduo.com/</a></li><li>大佬  ： <a href="https://www.zhangxinxu.com/">https://www.zhangxinxu.com/</a></li><li>js重点： <a href="http://blog.haoji.me/?cat=javascript">http://blog.haoji.me/?cat=javascript</a></li><li>js详细讲解： <a href="https://wangdoc.com/javascript/index.html">https://wangdoc.com/javascript/index.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>float in CSS</title>
      <link href="2020/11/10/float-in-CSS/"/>
      <url>2020/11/10/float-in-CSS/</url>
      
        <content type="html"><![CDATA[<h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><p>float属性设计的初衷：仅仅是让文字像流水一样环绕浮动元素</p><ul><li>float:  left, right, none, inherit</li><li>將原本上下排列的元素改成左右排列,使元素向左或向右移动，只能左右,不能上下</li><li>要用margin保持間距，不然會黏再一起</li></ul><p><img src="/2020/11/10/float-in-CSS/1605005179649.png"></p><p><img src="/2020/11/10/float-in-CSS/1605005159222.png"></p><p>但是注意float 在网页中的布局影响，例子如下： </p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            *&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #up&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>//使用图一；不使用图二                <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #down&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> upupupup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>down<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> downdowndown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/10/float-in-CSS/1605090591386.png"></p><p><img src="/2020/11/10/float-in-CSS/1605090620892.png"></p><h2 id="Clear-清浮动"><a href="#Clear-清浮动" class="headerlink" title="Clear ( 清浮动 )"></a>Clear ( 清浮动 )</h2><ul><li><p>clear:left应该是”清除左浮动影响”<br>官方对clear属性的解释是：”元素盒子的边不能和<strong>前面的</strong>浮动元素相邻”。</p></li><li><p>clear:  left, right, none, inherit</p></li><li><p>float會造成文繞圖，clear可以讓清掉不需要文繞圖的地方。</p><p><img src="/2020/11/10/float-in-CSS/1605005686175.png"></p></li></ul><h2 id="The-clearfix-Hack（-清浮动-）"><a href="#The-clearfix-Hack（-清浮动-）" class="headerlink" title="The clearfix Hack（ 清浮动 ）"></a>The clearfix Hack（ 清浮动 ）</h2><pre class=" language-css"><code class="language-css"><span class="token number">.</span><span class="token property">clearfix</span><span class="token punctuation">:</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/10/float-in-CSS/1605008030674.png"></p><p>Reference:   <a href="https://www.w3schools.com/css/css_float.asp">https://www.w3schools.com/css/css_float.asp</a></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>padding margin in CSS</title>
      <link href="2020/11/10/padding-margin-in-CSS/"/>
      <url>2020/11/10/padding-margin-in-CSS/</url>
      
        <content type="html"><![CDATA[<h2 id="Padding-amp-Margin-基础"><a href="#Padding-amp-Margin-基础" class="headerlink" title="Padding &amp; Margin 基础"></a>Padding &amp; Margin 基础</h2><p>Padding-bottom &amp; Margin-bottom 可以控制伪等高</p><p><strong>不要对float元素指定margin和padding属性(能够在float元素内部嵌套一个div来设置margin和padding)。</strong></p><p>padding / margin : 上，右，下，左</p><pre class=" language-css"><code class="language-css"><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">25</span>px <span class="token number">50</span>px <span class="token number">75</span>px<span class="token punctuation">;</span>//上 左右 下</code></pre><p><img src="/2020/11/10/padding-margin-in-CSS/1605082360115.png"></p><h2 id="padding-的百分比值"><a href="#padding-的百分比值" class="headerlink" title="padding 的百分比值"></a>padding 的百分比值</h2><ul><li>和 margin 属性不同， padding 属性是不支持负值的；</li><li>padding 支持百分比值，<strong>padding 百分比值无论是left/right 方向还是top/bottom方向均是相对于==宽度==计算的！</strong></li></ul><h2 id="margin-的百分比值"><a href="#margin-的百分比值" class="headerlink" title="margin 的百分比值"></a>margin 的百分比值</h2><ul><li>margin 的百分比值无论是水平方向还是垂直方向都是相对于父元素==<strong>宽度</strong>==计算</li></ul><h2 id="灵活调整位置"><a href="#灵活调整位置" class="headerlink" title="灵活调整位置"></a>灵活调整位置</h2><p><strong>移动端变化，灵活调整视图</strong></p><ul><li>使用视区宽度单位<code>vw</code> ( Relative to 1% of the width of the viewport* ) ，如下：</li></ul><pre class=" language-css"><code class="language-css"><span class="token number">.</span>banner &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">15.15</span>vw<span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>如果对兼容性要求不是很高，使用<code>vw</code>也是一个不错的做法，至少理解起来要更轻松一点。</p><ul><li>但是，如果我们的图片不是通栏，而是需要离左右各<code>1rem</code>的距离，此时，我们的CSS代码就要啰嗦点了，想要保持完美比例，就使用借助CSS3 <code>calc()</code>计算：</li></ul><pre><code>.banner &#123;    height: calc(0.1515 * (100vw - 2rem));    background-size: cover;&#125;</code></pre><ul><li> 使用百分比<code>padding</code>，如下：</li></ul><pre class=" language-css"><code class="language-css"><span class="token number">.</span>banner &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15.15%</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>此时无论图片的外部元素怎么变动，比例都是恒定不变的。</p><h2 id="百分比padding与宽度自适应图片布局"><a href="#百分比padding与宽度自适应图片布局" class="headerlink" title="百分比padding与宽度自适应图片布局"></a>百分比padding与宽度自适应图片布局</h2><p>但是有时候我们的图片是不方便作为背景图呈现的，而是内联的<code>&lt;img&gt;</code>，百分比<code>padding</code>也是可以轻松应对的，求套路是比较固定的，图片元素外面需要一个固定比例的容器元素，例如下面的HTML结构：</p><pre class=" language-css"><code class="language-css">&lt;div class=<span class="token string">"banner"</span>>  &lt;img src=<span class="token string">"banner.jpg"</span>>&lt;/div></code></pre><p><code>.banner</code>元素同样负责控制比例，然后图片填充<code>.banner</code>元素即可，CSS代码如下：</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>banner &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15.15%</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>banner > img &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>例子1：<a href="https://www.zhangxinxu.com/study/201708/percent-padding-auto-layout.html">https://www.zhangxinxu.com/study/201708/percent-padding-auto-layout.html</a></p><p>例子2：<a href="https://segmentfault.com/a/1190000004231995">https://segmentfault.com/a/1190000004231995</a></p><h2 id="网页布局的margin-合并与BFC"><a href="#网页布局的margin-合并与BFC" class="headerlink" title="网页布局的margin 合并与BFC"></a>网页布局的margin 合并与BFC</h2><p>基本使用场景：：</p><pre class=" language-html"><code class="language-html">.box <span class="token entity" title="&#123;">&amp;#123;</span>width:210px;border: 1px solid #000;float: left;<span class="token entity" title="&#125;">&amp;#125;</span>.img <span class="token entity" title="&#123;">&amp;#123;</span>width: 100px;height: 100px;background: #696;float: left;<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>image<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>信息信息信息信息信息信息信息信息信息信息信息信<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/10/padding-margin-in-CSS/1605081607514.png"></p><p>做伪等高布局</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            *&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">750</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>                <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>//超出border的padding直接隐藏            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap <span class="token number">.</span>left&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>                <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>//撑大内部                <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">1000</span>px<span class="token punctuation">;</span>//调整boeder            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            #wrap <span class="token number">.</span>right&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>                <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>                <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">1000</span>px<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            //下面的是为了调整块状浮动                         <span class="token number">.</span>clearfix&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            <span class="token number">.</span><span class="token property">clearfix</span><span class="token punctuation">:</span>after&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>                <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                 left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/10/padding-margin-in-CSS/1605095493973.png"></p><p><strong>此时我们可以为P元素的内容建立一个BFC，让其内容消除对外界浮动元素的影响。根据上文所知，只要给info元素添加<code>overflow:hidden;</code>即可为其内容建立新的BFC。</strong></p><p><img src="/2020/11/10/padding-margin-in-CSS/1605081934208.png"></p><p><img src="/2020/11/10/padding-margin-in-CSS/1605084216319.png"></p><ol><li>只有垂直,水平边距永远不会重合。</li><li>在规范文档中，2个或以上的块级盒模型相邻的垂直margin会重叠。最终的margin值计算方法如下：<br>a、全部都为正值，取最大者；<br>b、不全是正值，则都取绝对值，然后用正值减去最大值；<br>c、没有正值，则都取绝对值，然后用0减去最大值。</li></ol><p><strong>防止外边距重叠解决方案：</strong></p><ol><li>外层元素padding代替</li><li>内层元素透明边框 border:1px solid transparent;</li><li>内层元素绝对定位 postion:absolute:</li><li>外层元素 overflow:hidden;</li><li>内层元素 加float:left;或display:inline-block;</li><li>内层元素padding:1px;</li></ol><p><strong>具体讲解：</strong></p><p><img src="/2020/11/10/padding-margin-in-CSS/1605082233984.png"></p><p>上面的图中我们可以看到，我们为红色块盒设置的40px的margin-top（这里我们通过相同高度的阴影来将其可视化）好像并没有对紫色块盒起作用，而且无论我们怎么修改这个margin-top值都不会影响红色块盒的位置，而只由绿色块盒的margin-bottom所决定。</p><p>也就是说，<strong>浮动的元素的border-top会紧贴着相应的浮动元素的margin-bottom</strong>。</p><p>通过w3c的官方规范可知，闭合浮动的块盒在margin-top上所产生的间距（clearance）的值与该块盒的margin-top之和应该足够让该块盒垂直的跨越浮动元素的margin-bottom，使闭合浮动的块盒的border-top恰好与浮动元素的块盒的margin-bottom相邻接。</p><p><strong>用上图例子中的相关值可以得出这样一个式子：r-margin-top + r-clearance = g-margin-top + g-height + g-margin-bottom</strong></p><p>PS！闭合浮动并不能使浮动元素回到原来的BFC当中！</p><p>reference：</p><ol><li><a href="https://www.zhangxinxu.com/wordpress/2017/08/css-percent-padding-image-layout/">https://www.zhangxinxu.com/wordpress/2017/08/css-percent-padding-image-layout/</a></li><li><a href="https://segmentfault.com/a/1190000004231995">https://segmentfault.com/a/1190000004231995</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas 2</title>
      <link href="2020/11/09/Canvas-2/"/>
      <url>2020/11/09/Canvas-2/</url>
      
        <content type="html"><![CDATA[<p>HTML Graphics - canvas 2</p><h2 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h2><p>save() &amp; restore()：save 和 restore 方法是用来保存和恢复 canvas 状态的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//得到画布标签</span><span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用上下文，得到一个2D画布</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画画 </span>  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用默认设置绘制一个矩形</span>  ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 保存默认状态</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'#09F'</span>       <span class="token comment" spellcheck="true">// 在原有配置基础上对颜色做改变</span>  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用新的设置绘制一个矩形</span>  ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 保存当前状态</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'#FFF'</span>       <span class="token comment" spellcheck="true">// 再次改变颜色配置</span>  ctx<span class="token punctuation">.</span>globalAlpha <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用新的配置绘制一个矩形</span>  ctx<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 重新加载之前的颜色状态</span>  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用上一次的配置绘制一个矩形</span>  ctx<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 加载默认颜色配置</span>  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用加载的配置绘制一个矩形</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/2020/11/09/Canvas-2/1604922855314.png"></p><h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><ul><li><p>translate(x, y)   </p><p>​    x 是左右偏移量，y 是上下偏移量</p><p>​    在canvas中translate是累加的</p></li><li><p>rotate(angle)</p><p>​    旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。<br>​    旋转的中心点始终是 canvas 的原点，如果要改变它，我们需要用到 translate 方法<br>​    在canvas中rotate是累加的<br>​    </p></li><li><p>scale(x, y)</p><p>scale 方法接受两个参数。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。<br>​    <strong>比 1.0 小 —- 缩小</strong></p><p>​    <strong>比 1.0 大 —- 放大</strong><br>​    在canvas中scale是累称的</p></li><li><p>变形</p><p>​    transform(m11, m12, m21, m22, dx, dy)</p></li></ul><pre><code>  m11 m21 dx  m12 m22 dy  0     0     1</code></pre><p>  用以上矩阵进行图像变换。</p><p>  setTransform()：将当前的变换矩阵设置为默认的单位矩阵，然后在单位矩阵之上运用用户指定的变换。</p><p>  resetTransform()：重置为单位矩阵</p><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p><strong>createLinearGradient(x1, y1, x2, y2)</strong> 渐变的起点 (x1,y1) 与终点 (x2,y2)</p><p><strong>createRadialGradient(x1, y1, r1, x2, y2, r2)</strong>  前三个定义一个以 (x1,y1) 为原点，半径为 r1 的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为 r2 的圆。</p><p>创建出 canvasGradient 对象后，我们就可以用 addColorStop 方法给它上色了。</p><p><strong>gradient.addColorStop(position, color)</strong> position 参数必须是一个 0.0 与 1.0 之间的数值，表示渐变中颜色所在的相对位置。例如，0.5 表示颜色会出现在正中间。</p><h2 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h2><p>fillText(text, x, y [, maxWidth]) : 在(x,y)填充指定的文本<br>    strokeText(text, x, y [, maxWidth]) : 在(x,y)绘制文本边框</p><ul><li>font = 10px sans-serif (类似css)</li><li>textAlign = start (默认) , end, left, right or center. 默认值是 start</li><li>textBaseline = top, hanging, middle, alphabetic  (默认), ideographic, bottom </li><li>direction = ltr, rtl, inherit  (默认) </li><li>文本测量：measureText()：将返回一个 TextMetrics对象的宽度、所在像素</li></ul><p><img src="/2020/11/09/Canvas-2/1604924942493.png"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myCanvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">"20px Georgia"</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">strokeText</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">"30px Verdana"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create gradient</span><span class="token keyword">var</span> gradient <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"magenta"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token string">"0.5"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Fill with gradient</span>ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> gradient<span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">strokeText</span><span class="token punctuation">(</span><span class="token string">"Big smile!"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">"Hello !"</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/2020/11/09/Canvas-2/1604925167895.png"></p><h2 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h2><p><strong>使用 Image 对象的 onload handler 来确保设置图案之前图像已经装载完毕。</strong></p><p><strong>drawImage(image, x, y)</strong> 其中 image 是 image 或者 canvas 对象，x 和 y 是其在目标 canvas 里的起始坐标。</p><p><strong>drawImage(image, x, y, width, height)</strong> width 和 height来控制当像canvas画入时应该缩放的大小。</p><p><strong>drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)</strong> 前4个是定义图像源的切片位置和大小，后4个则是定义切片的目标显示位置和大小。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 图片绘制</span>context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//img为绘制图片的dom对象,x、y为绘制的左上角坐标.</span><span class="token comment" spellcheck="true">//width, height 绘制图片的宽高</span><span class="token comment" spellcheck="true">// 图片裁剪</span>context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> swidth<span class="token punctuation">,</span> sheight<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sx, sy 裁剪的xy坐标</span><span class="token comment" spellcheck="true">// swidth, sheight 裁剪图片的xy</span></code></pre><p><strong>createPattern(image, type)</strong>  Image 可以是一个 Image 对象的引用，或者另一个 canvas 对象。Type 必须选：repeat，repeat-x，repeat-y 和 no-repeat。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建新 image 对象，用作图案</span>  <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'images/wallpaper.png'</span><span class="token punctuation">;</span>  img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建图案</span>    <span class="token keyword">var</span> ptrn <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createPattern</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token string">'repeat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> ptrn<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="图片样式"><a href="#图片样式" class="headerlink" title="图片样式"></a>图片样式</h2><p>createPattern(image, type)：该方法接受两个参数。Image 可以是一个 Image 对象的引用，或者另一个 canvas 对象。Type 必须是下面的字符串值之一：repeat，repeat-x，repeat-y 和 no-repeat。<br><strong>使用 Image 对象的 onload handler 来确保设置图案之前图像已经装载完毕。</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Image to use:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img_lamp.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lamp<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Canvas:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#d3d3d3</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Your browser does not support the HTML5 canvas tag.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>draw(<span class="token punctuation">'</span>repeat<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Repeat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>draw(<span class="token punctuation">'</span>repeat-x<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Repeat-x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>draw(<span class="token punctuation">'</span>repeat-y<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Repeat-y<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>draw(<span class="token punctuation">'</span>no-repeat<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>No-repeat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myCanvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> ctx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>width<span class="token punctuation">,</span> c<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"lamp"</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> pat <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createPattern</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> direction<span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> pat<span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="图片合成"><a href="#图片合成" class="headerlink" title="图片合成"></a>图片合成</h2><p>全局透明度的设置 globalAlpha = value 这个属性影响到 canvas 里所有图形的透明度， 有效的值范围是 0.0 （完全透明）到 1.0（完全不透明） 默认是 1.0</p><p>###覆盖合成 source:新的图像(源) destination:已经绘制过的图形(目标)</p><p><strong>ctx.globalCompositeOperation = type</strong></p><ul><li><p>source-over(默认值):源在上面,新的图像层级比较高</p></li><li><p>source-in  :只留下源与目标的重叠部分(源的那一部分)</p></li><li><p>source-out :只留下源超过目标的部分</p></li><li><p>source-atop:砍掉源溢出的部分</p></li><li><p>destination-over:目标在上面,旧的图像层级比较高</p></li><li><p>destination-in:只留下源与目标的重叠部分(目标的那一部分)</p></li><li><p>destination-out:只留下目标超过源的部分</p></li><li><p>destination-atop:砍掉目标溢出的部分</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas-1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> c   <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"canvas-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>globalCompositeOperation <span class="token operator">=</span> <span class="token string">"xor"</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Canvas-2/1604931155410.png"></p></li></ul><h2 id="绘制阴影"><a href="#绘制阴影" class="headerlink" title="绘制阴影"></a>绘制阴影</h2><ul><li>shadowOffsetX = float<br>shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。</li><li>shadowOffsetY = float<br>shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。</li><li>shadowBlur = float<br>shadowBlur 用于设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认为 0。</li><li>shadowColor = color<br>shadowColor 是标准的 CSS 颜色值，用于设定阴影颜色效果，默认是全透明的黑色。</li></ul><h2 id="ImageData-对象"><a href="#ImageData-对象" class="headerlink" title="ImageData 对象"></a>ImageData 对象</h2><p>其包含的内容有:width、height、data:Uint8ClampedArray 类型</p><p>createImageData(width, height):创建对象,颜色为黑色.</p><p>getImageData(x, y, width, height):这个方法会返回一个ImageData对象，它代表了画布区域的对象数据. x是图像数据矩形区域的左上角 x 坐标；y是图像数据矩形区域的左上角 y 坐标。</p><p>putImageData(myImageData, dx, dy):对场景进行像素数据的写入.</p><h2 id="导出图像"><a href="#导出图像" class="headerlink" title="导出图像"></a>导出图像</h2><p>将画布导出为图像 toDataURL(注意是canvas元素接口上的方法)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> canvas  <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ex1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> dataUrl <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="判断线上的点"><a href="#判断线上的点" class="headerlink" title="判断线上的点"></a>判断线上的点</h2><p>事件操作 ctx.isPointInPath(x, y) 判断在当前路径中是否包含检测点 x:检测点的X坐标 y:检测点的Y坐标</p><p>注意，此方法只作用于最新画出的canvas图像</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myCanvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">isPointInPath</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> </code></pre><p>Reference：</p><p>W3school <a href="https://www.w3schools.com/tags/ref_canvas.asp">https://www.w3schools.com/tags/ref_canvas.asp</a></p><p>Canvas Tutorial  <a href="http://tutorials.jenkov.com/html5-canvas/index.html">http://tutorials.jenkov.com/html5-canvas/index.html</a> </p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html form</title>
      <link href="2020/11/09/Html-form/"/>
      <url>2020/11/09/Html-form/</url>
      
        <content type="html"><![CDATA[<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><h3 id="基本属性："><a href="#基本属性：" class="headerlink" title="基本属性："></a>基本属性：</h3><p>Input type：text / password / checkbox / radio / submit</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   用户：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userPaw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--输入合法的邮箱，@--></span>   邮箱：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   电话：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--输入合法网址--></span>   网址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--无法输入字母--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ID：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请填写id号码<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4567890<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--max最大值   min最小值   value默认值--></span>   数量：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   商品名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   范围：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   颜色：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   时间：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   日期：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   日期：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datetime-local<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   月份：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   星期：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>week<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   提交：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Html-form/1604907697169.png"></p><h3 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--placeholder:提示文本--></span>    <span class="token comment" spellcheck="true">&lt;!--autofocus:自动获取焦点--></span>    <span class="token comment" spellcheck="true">&lt;!--autocomplete：自动完成，on:打开，off:关闭--></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span>  <span class="token attr-name">autofocus</span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--required：必须输入--></span>    <span class="token comment" spellcheck="true">&lt;!--pattern：正则表达式    *：任意个    ？：表示0个或者1个    +：表示一个或多个--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>性别: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>请选一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>track<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>track<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>track<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Track Submission<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>event<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>event<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>event<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Events and Artist booking<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Message us<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>    手机号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>^(\+86)?1\d&amp;#123;10&amp;#125;$<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--multiple:选择多个文件--></span>    文件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>photo<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--email有默认的验证，在email中，multiple允许输入多个邮箱地址，以逗号分隔--></span>    邮箱：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>详细地址: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>立即注册<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--不会进行提交--></span><span class="token comment" spellcheck="true">&lt;!--from:指定表单 ID，那么将来指定ID号的表单进行数据提交的时候，也会将当前表单一起提交--></span>地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">form</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--F12-控制台，点击network,显示出请求--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Html-form/1604908500843.png"></p><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><ul><li><p>表单中 action提交服务器的地址 method 提交方式</p></li><li><p>select中optgroup组中option 选项 </p></li><li><p>Fieldset加表框 里面的legend表边框左上名字（边上）表内label 显示文字</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>Personalia:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>select<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--value:具体的值  label:提示信息，辅助值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pretty<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pretty<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pretty<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Birthday:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li></ul><p>  <img src="/2020/11/09/Html-form/1604908551635.png"></p><h2 id="enctype和formenctype"><a href="#enctype和formenctype" class="headerlink" title="enctype和formenctype"></a>enctype和formenctype</h2><p>enctype属性规定在发送到服务器之前应该如何对表单数据进行编码。</p><ul><li>application/x-www-form-urlencoded：表单数据被编码为名称/值对。这是默认的编码方式（空格转换为 “+” 加号，特殊符号转换为 ASCII HEX 值）。</li><li>multipart/form-data：不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。</li><li>text/plain：空格转换为 “+” 加号，但不对特殊字符编码。</li></ul><p>同上，enctype也可以针对每个提交按钮进行指定，使用formenctype即可。</p><h2 id="action-amp-amp-method"><a href="#action-amp-amp-method" class="headerlink" title="action &amp;&amp; method"></a>action &amp;&amp; method</h2><ol><li>一个表单只能填写一个action及一个method</li></ol><h2 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h2><p>progress元素的属性：</p><ul><li><p>max属性：规定当前进度的最大值。</p></li><li><p>value属性设定进度条当前默认显示值</p></li><li><p>form属性：规定进度条所属的一个或多个表单</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>当前下载进度：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   &lt;form action=""method="" id="form">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>progress</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span>  <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>haha<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Html-form/1604909198510.png"></p></li></ul><h2 id="meter-度量条"><a href="#meter-度量条" class="headerlink" title="meter(度量条!!)"></a>meter(<strong>度量</strong>条!!)</h2><ul><li><p>value属性设定进度条当前默认显示值</p></li><li><p>max属性：规定范围的最大值，默认值为1.</p></li><li><p>min属性：规定范围的最小值，默认值为0.</p></li><li><p>low属性：规定被视作低的标准。</p></li><li><p>high属性：规定被视作高标准。</p></li><li><p>form属性：规定所属的一个或多个表单。</p></li><li><p>optimum属性：定义度量条的最佳标准值。<strong>low值&lt; 标准值 &lt;high值</strong></p><pre class=" language-html"><code class="language-html">&lt;form action=""method="" id="form">     <span class="token comment" spellcheck="true">&lt;!--&lt;progress max="100"value="30" title="haha">--></span>      低：&lt;meter max="100"min="0" value="30" high="80"low="30"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meter</span><span class="token punctuation">></span></span>      高：&lt;meter max="100"min="0" value="90" high="80"low="30"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meter</span><span class="token punctuation">></span></span>      中：&lt;meter max="100"min="0" value="60" high="80"low="30"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Html-form/1604909303658.png"></p></li></ul><h2 id="Other-Attri"><a href="#Other-Attri" class="headerlink" title="Other Attri:"></a>Other Attri:</h2><h3 id="maxlength-输入的最大字数"><a href="#maxlength-输入的最大字数" class="headerlink" title="maxlength:输入的最大字数"></a>maxlength:输入的最大字数</h3><p>  用户名：&lt;input type=”text” name=”user”value=”请输入用户名”maxlength=”6”&gt;</p><h3 id="disabled属性："><a href="#disabled属性：" class="headerlink" title="disabled属性："></a>disabled属性：</h3><p>设置为不可用（不可操作）不会提交到服务器</p><h3 id="tabindex属性："><a href="#tabindex属性：" class="headerlink" title="tabindex属性："></a>tabindex属性：</h3><p>指定按Tab键时，项目间的移动顺序</p><h3 id="keygen属性："><a href="#keygen属性：" class="headerlink" title="keygen属性："></a>keygen属性：</h3><p>密钥生成器</p><ul><li>当提交表单时，私钥存储在本地，公钥发送到服务器。主要作用是提供一种用户验证身份的方法</li><li>name/form/autofocus/disabled</li><li>challenge属性:将 keygen 的值设置为在提交时询问。</li><li>keytype属性：定义密钥类型，如设置为rsa（一种密码的算法），则生成 RSA 密钥。</li></ul><pre class=" language-html"><code class="language-html">  &lt;form action=""method="get">    账号：&lt;input type="text"name="user">     加密：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keygen</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mykey<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&lt;inputtype="submit"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h2 id="details-summary"><a href="#details-summary" class="headerlink" title="details,summary"></a>details,summary</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>这是摘要1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里具体描述，标签相对随意，例如这里使用的<span class="token entity" title="&lt;">&amp;lt;</span>p<span class="token entity" title="&gt;">&amp;gt;</span>标签。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Html-form/1604912463910.png"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span> <span class="token attr-name">open</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--如果&lt;summary>缺省，则会自动补上，文案是“详细信息”。--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>这是摘要2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>content</span><span class="token punctuation">></span></span>这里<span class="token entity" title="&lt;">&amp;lt;</span>details<span class="token entity" title="&gt;">&amp;gt;</span>标签设置了HTML布尔属性open，因此，默认是展开状态。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>content</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/09/Html-form/1604912505000.png"></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html Media</title>
      <link href="2020/11/09/Html-Media/"/>
      <url>2020/11/09/Html-Media/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-Video"><a href="#HTML-Video" class="headerlink" title="HTML Video"></a>HTML Video</h1><p><video width="320" height="240" controls>  <source src="*****" type="video/mp4">  <source src="*8**" type="video/ogg">Your browser does not support the video tag.</video><br><code>&lt;video width=&quot;320&quot; height=&quot;240&quot; controls&gt; </code></p><p><code>&lt;source src=&quot;*****&quot; type=&quot;video/mp4&quot;&gt; </code> </p><p><code>&lt;source src=&quot;*8**&quot; type=&quot;video/ogg&quot;&gt;Your browser does not support the video tag.&lt;/video&gt;</code></p><p>attribute: control / autoplay / loop / muted / preload / auto(default) / metadata / none</p><p>size control=&gt; <code>&lt;video&gt;</code></p><h1 id="HTML-Audio"><a href="#HTML-Audio" class="headerlink" title="HTML Audio"></a>HTML Audio</h1><p><audio controls>  <source src="****" type="audio/ogg">  <source src="****" type="audio/mpeg">Your browser does not support the audio element.</audio><br><code>&lt;audio controls&gt; </code><br>   <code>&lt;source src=&quot;****&quot; type=&quot;audio/ogg&quot;&gt; </code><br>   <code> &lt;source src=&quot;****&quot; type=&quot;audio/mpeg&quot;&gt;Your browser does not support the audio element.&lt;/audio&gt;</code></p><p><code>controls</code> attribute adds audio controls, like play, pause, and volume.</p><p>attribute ：controls / autoplay /<br> loop / muted / preload</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-add-img</title>
      <link href="2020/11/08/hexo-add-img/"/>
      <url>2020/11/08/hexo-add-img/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo本地图片显示问题"><a href="#Hexo本地图片显示问题" class="headerlink" title="Hexo本地图片显示问题"></a>Hexo本地图片显示问题</h1><p>使用<code>hexo</code>生成静态资源后,由于<code>url</code>的问题会出现图片加载的问题,现在网上的文章及官方的解决方案大概分为三种:</p><ol><li>将图片放入<code>source/images</code>目录下,每次<code>generate</code>都会生成图片,在使用相对或绝对路径进行引用</li><li> 配置<code>hexo</code>的<code>_config.yml</code>文件, 将 <code>post_asset_folder</code> 设置为<code>true</code>, 这样每次new 生成一个文章时都会同步生成一个同名的文件夹,然后设置相对或绝对路径.  </li><li> 使用<code>hexo</code>官方的解决方案,使用模版变量, <code>&#123;% asset_img slug [title] %&#125; </code>  </li></ol><p>解决方法:</p><pre class=" language-html"><code class="language-html">设置post_asset_folder  为 true, 安装插件 asset-imagenpm install https://github.com/CodeFalling/hexo-asset-image设置图片为相对路径(详细步骤在下面图片)hexo clean &amp;&amp; hexo generate &amp;&amp; hexo s 运行查看</code></pre><p>打开Typora的 <code>文件 &gt; 偏好设置</code>，进行配置<code>typora</code>的相对路径</p><p><img src="/2020/11/08/hexo-add-img/setupImg.png"></p><p>注意：一定要先设置了图片根目录后再插入图片，否则图片路径会不正确</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas 1</title>
      <link href="2020/11/08/Canvas/"/>
      <url>2020/11/08/Canvas/</url>
      
        <content type="html"><![CDATA[<p><strong>HTML Graphics - canvas</strong> 1</p><p>（ HTML Graphics  GoogleMaos SVG Canvas Game ）</p><ul><li><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2></li></ul><p>canvas的好处总结如下：</p><ol><li>常用于动态的，具有特效的图像显示。有漫画的感觉。</li><li>canvas可以做3D特效</li><li>canvas具有画布的功效，可以设计在线画图</li><li>canvas很炫。</li></ol><p><code>&lt;canvas&gt;</code>看起来和<code>&lt;img&gt;</code>元素很相像，唯一的不同就是它并没有 src 和 alt 属性。<br>实际上，<code>&lt;canvas&gt;</code>标签只有两个属性—— width和height 。 但是一定要有id （js需要）</p><p>html属性设置width height时只影响画布本身不影画布内容<br>css属性设置width height时不但会影响画布本身的高宽，还会使画布中的内容等比例缩放(影响画面质量)</p><p>By default, the <code>&lt;canvas&gt; </code>element has no border and no content.</p><h2 id="initial-canvas"><a href="#initial-canvas" class="headerlink" title="initial canvas"></a>initial canvas</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        canvas&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/08/Canvas/1604915691558.png"></p><h2 id="rendering-context-line"><a href="#rendering-context-line" class="headerlink" title="rendering context- line"></a>rendering context- line</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>       <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//使用上下文，得到一个2D的画布</span>     <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 简单线条 </span>  <span class="token comment" spellcheck="true">// 设置直线状态 起点 终点 宽度 颜色 </span>  <span class="token comment" spellcheck="true">// 线条相连成为形状</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//声明要开始绘制路径</span>ctx<span class="token punctuation">.</span>lineJoin <span class="token operator">=</span> <span class="token string">"round"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//线条与线条间接合处的样式（miter 直角(default) /bevel 斜角 / round 圆角）</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//移动到绘制点，将“画笔”移动到100,100的位置</span>ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//划线</span>ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//划线</span>ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//线的粗细</span>ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//线的颜色</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//准备填充的颜色</span>ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//闭合路径（自动补全）</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//显示线（绘制线），可以绘制的路径显示出来</span>ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//填充颜色</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/2020/11/08/Canvas/1604918549776.png"></p><h2 id="rendering-shape"><a href="#rendering-shape" class="headerlink" title="rendering - shape"></a>rendering - shape</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token function">fillRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//填充矩形</span><span class="token function">strokeRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//矩形边框</span><span class="token function">clearRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//清除指定矩形区域，清楚部分变透明</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//直接形状</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>     <span class="token comment" spellcheck="true">//得到画布标签</span>     <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//使用上下文，得到一个2D的画布</span>     <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//用ctx的方式画画</span>    <span class="token comment" spellcheck="true">//左上是（0,0）- x,y</span>     ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"orange"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先提供一个颜色的笔</span>     ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在根据以上颜色填充</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/2020/11/08/Canvas/1604918204350.png"></p><h2 id="rendering-Arc"><a href="#rendering-Arc" class="headerlink" title="rendering - Arc"></a>rendering - Arc</h2><p>通过绘画弧形，完成图形建造</p><h3 id="方法一：ctx-arc-圆心x-圆心y-半径-开始的弧度-结束的弧度-是否逆时针"><a href="#方法一：ctx-arc-圆心x-圆心y-半径-开始的弧度-结束的弧度-是否逆时针" class="headerlink" title="方法一：ctx.arc ( 圆心x, 圆心y, 半径, 开始的弧度, 结束的弧度, 是否逆时针 );"></a><strong>方法一：ctx.arc ( 圆心x, 圆心y, 半径, 开始的弧度, 结束的弧度, 是否逆时针 );</strong></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ctx.arc(圆心x, 圆心y, 半径, 开始的弧度, 结束的弧度, 是否逆时针);</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开始绘制路径</span><span class="token comment" spellcheck="true">// ctx.arc(100, 100, 60, 0, 6.28, false);</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示路径线</span></code></pre><p>圆弧例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//得到画布标签</span><span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用上下文，得到一个2D画布</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画画 </span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开始绘制路径 </span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//绘制圆弧（2*pi*r）</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示路径线</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/2020/11/08/Canvas/1604919183425.png"></p><p><img src="/2020/11/08/Canvas/1604921951562.png"></p><p><strong>注意: 绘制圆弧时不需要closePath(); 否则会连成一个闭环,为了防止两次绘制样式污染,每次绘制前执行beginPath()即可</strong></p><h3 id="方法二：bezierCurveTo-Method"><a href="#方法二：bezierCurveTo-Method" class="headerlink" title="方法二：bezierCurveTo() Method"></a><strong>方法二：bezierCurveTo() Method</strong></h3><p>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) 绘制三次贝塞尔曲线，cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点。 起始点为moveto时指定的点</p><p><img src="/2020/11/08/Canvas/1604920033422.png"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myCanvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/08/Canvas/1604920170375.png"></p><h3 id="方法三：quadraticCurveTo-Method"><a href="#方法三：quadraticCurveTo-Method" class="headerlink" title="方法三：quadraticCurveTo()  Method"></a>方法三：quadraticCurveTo()  Method</h3><p>quadraticCurveTo(cp1x, cp1y, x, y) 绘制二次贝塞尔曲线，cp1x,cp1y为一个控制点，x,y为结束点。 起始点为moveto时指定的点</p><p><img src="/2020/11/08/Canvas/1604920424923.png"></p><p>总例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 弧形例子</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span>PI<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span>PI<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span>PI<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 二次曲線</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span>cp1x<span class="token punctuation">,</span> cp1y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 三次曲線</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span>cp1x<span class="token punctuation">,</span> cp1y<span class="token punctuation">,</span> cp2x<span class="token punctuation">,</span> cp2y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 二次曲線範例</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">62.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">62.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 三次曲線範例</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">62.5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">62.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">62.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">62.5</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/11/08/Canvas/1604920656659.png"></p><p>Reference：</p><p>W3school <a href="https://www.w3schools.com/tags/ref_canvas.asp">https://www.w3schools.com/tags/ref_canvas.asp</a></p><p>Canvas Tutorial  <a href="http://tutorials.jenkov.com/html5-canvas/index.html">http://tutorials.jenkov.com/html5-canvas/index.html</a>  </p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo markdown-typora</title>
      <link href="2020/11/08/hexo-markdown-typora/"/>
      <url>2020/11/08/hexo-markdown-typora/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-大纲目录"><a href="#Typora-大纲目录" class="headerlink" title="Typora 大纲目录"></a>Typora 大纲目录</h1><p>选择顶部视图中 <strong>大纲视图</strong> </p><p> <img src="/2020/11/08/hexo-markdown-typora/typora-list.png"></p><h1 id="Typora中插入图片（Hexo）"><a href="#Typora中插入图片（Hexo）" class="headerlink" title="Typora中插入图片（Hexo）"></a>Typora中插入图片（Hexo）</h1><p><img src="/2020/11/08/hexo-markdown-typora/typora-img.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Review HTML&amp; CSS 2</title>
      <link href="2020/11/08/Review-HTML-&amp;-CSS-2/"/>
      <url>2020/11/08/Review-HTML-&amp;-CSS-2/</url>
      
        <content type="html"><![CDATA[<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span></code></pre><h2 id="hgroup元素"><a href="#hgroup元素" class="headerlink" title="hgroup元素"></a>hgroup元素</h2><p>hgroup = header group (not supported by H5)</p><h2 id="section-article元素"><a href="#section-article元素" class="headerlink" title="section,article元素"></a>section,article元素</h2><p>section元素代表文档中的 节 或 段，段可以是指一篇文章里按照主题的分段；节可以是指一个页面里的分组。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>section是啥？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>关于section<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>section的介绍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>关于其他<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>关于其他section的介绍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span></code></pre><p>section使用注意：</p><ul><li>section不是一般意义上的容器元素，如果想作为样式展示和脚本的便利，可以用div。</li><li>article、nav、aside可以理解为特殊的section，<br>所以如果可以用article、nav、aside就不要用section，没实际意义的就用div    </li></ul><p>article使用注意：<br>        独立文章：用article<br>        单独的模块：用section<br>        没有语义的：用div</p><h2 id="aside元素"><a href="#aside元素" class="headerlink" title="aside元素"></a>aside元素</h2><p>aside使用总结：</p><ul><li>asie在article内表示主要内容的附属信息    </li><li>在article之外则可做侧边栏    </li><li>如果是广告，其他日志链接或者其他分类导航也可以用</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>作者简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>前端一枚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Review HTML&amp; CSS 1</title>
      <link href="2020/11/08/Review-HTML-&amp;-CSS-1/"/>
      <url>2020/11/08/Review-HTML-&amp;-CSS-1/</url>
      
        <content type="html"><![CDATA[<h2 id="普通css（一定要注意继承性）"><a href="#普通css（一定要注意继承性）" class="headerlink" title="普通css（一定要注意继承性）"></a>普通css（一定要注意继承性）</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><pre class=" language-css"><code class="language-css">//基本样式&lt;h<span class="token number">1</span> style=<span class="token string">"color: green;"</span>><span class="token number">.</span>className&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//class      #id&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//id         h<span class="token number">3.</span>class&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*并且 选择类名为class的h3标签*/</span>p#main&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*并且 选择ID为main的段落标签*/</span>p,<span class="token number">.</span>hello,#box&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*和*/</span>*&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>[type=<span class="token string">'radio/checkbox'</span>] &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">0</span>px <span class="token number">20</span>px <span class="token number">0</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>//兄弟p~ul    <span class="token comment" spellcheck="true">/*选择p元素之后的每一个ul元素 堂的*/</span>div+p    <span class="token comment" spellcheck="true">/*选择所有紧接&lt;div>元素之后的&lt;p>元素 亲的*/</span>//后代选择器div <span class="token number">.</span>box<span class="token number">1</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*空格 前一个元素所有的后代节点*/</span>div > <span class="token number">.</span>box<span class="token number">1</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*空格 前一个元素直接的后代节点 （不深入）*/</span>//存在和值属性选择器[attr]：包含 attr 属性的所有元素[attr=val]：选择 attr 属性被赋值为 val 的所有元素。[attr~=val]：以 attr 命名的属性的元素，并且该属性是一个以空格作为分隔的值列表，其中至少一个值为val。</code></pre><h4 id="子串值属性选择器"><a href="#子串值属性选择器" class="headerlink" title="子串值属性选择器"></a>子串值属性选择器</h4><p><code>[attr|=val]</code> : 选择attr属性的值是val（包括val）或以val-开头的元素。<br>        <code>[attr^=val]</code> : 选择attr属性的值以val开头（包括val）的元素。<br>       <code>[attr$=val]</code> : 选择attr属性的值以val结尾（包括val）的元素。<br>        <code>[attr*=val]</code> : 选择attr属性的值中包含字符串val的元素。</p><h4 id="伪类选择器：-链接，表单，动态，结构，为元素"><a href="#伪类选择器：-链接，表单，动态，结构，为元素" class="headerlink" title="伪类选择器：(链接，表单，动态，结构，为元素)"></a>伪类选择器：(链接，表单，动态，结构，为元素)</h4><p>a:link {color: red;} /* 未访问的链接状态 <em>/<br>       a:visited {color: green;} /</em> 已访问的链接状态 <em>/<br>       a:hover {color: blue;} /</em> 鼠标滑过链接状态 <em>/<br>       a:active {color: yellow;} /</em> 鼠标按下去时的状态 */<br>       div:first-child last-child root target /<em>当前活动</em>/</p><h4 id="相邻元素选择器"><a href="#相邻元素选择器" class="headerlink" title="相邻元素选择器"></a>相邻元素选择器</h4><p>   h1 + p {color:red;} /<em>选择紧接在 h1 元素后出现的段落，h1 和 p 元素拥有共同的父元素</em>/</p><h3 id="css-编译实现选择"><a href="#css-编译实现选择" class="headerlink" title="css 编译实现选择"></a>css 编译实现选择</h3><ul><li><p>顺序：从上到下（这意味着，如果发生冲突，浏览器将使用最后出现的CSS声明）</p><pre><code> **但是对于css的冲突, 优先级 **</code></pre><p> <strong>行级样式 &gt; 内嵌样式表 &gt; 外部样式表（就近原则）</strong></p><p> <strong>ID选择器 &gt; 类选择器 &gt; 标签选择器</strong></p></li><li><p>层叠</p><pre><code> 1.找出所有相关的规则，这些规则都包含一个选择器       2.计算声明的优先级                   先按来源排序                   在按选择器的特殊性排序                   最终按顺序</code></pre></li></ul><h4 id="特殊性计算"><a href="#特殊性计算" class="headerlink" title="特殊性计算"></a>特殊性计算</h4><p> 一个选择器的具体特殊性如下确定：</p><ol><li><p> 选择器中给定的ID属性值，加0,1,0,0</p></li><li><p> 选择器中给定的各个类属性，属性选择，或伪类，加 0,0,1,0</p></li><li><p>选择器中的给定的各个元素和伪元素，加0,0,0,1</p></li><li><p> 通配符选择器的特殊性为0,0,0,0</p></li><li><p>结合符对选择器特殊性没有一点贡献</p></li><li><p>内联声明的特殊性都是1,0,0,0</p></li><li><p>继承没有特殊性</p><p><img src="/2020/11/08/Review-HTML-&-CSS-1/1605182527129.png"></p></li></ol><h4 id="冲突例子"><a href="#冲突例子" class="headerlink" title="冲突例子"></a>冲突例子</h4><p>   <img src="/2020/11/08/Review-HTML-&-CSS-1/1605176333357.png"></p><p>   由于上面的权重不一致，要么弄成同样的权重 看下面，要么id</p><p>   <img src="/2020/11/08/Review-HTML-&-CSS-1/1605176293525.png"></p><p>   <strong>当您绝对需要确保某个元素具有特定的CSS时，可以使用<code>!important</code></strong></p><p> color: red !important;/<em>!important不影响就近原则</em>/</p><h2 id="基本css复习"><a href="#基本css复习" class="headerlink" title="基本css复习"></a>基本css复习</h2><ul><li><p>字体：<code>&lt;i&gt;,&lt;em&gt;</code>  斜体        <code>&lt;strong&gt;,&lt;b&gt;</code> 加粗</p></li><li><p><code>&lt;q&gt;</code>与 <code>&lt;blockquote&gt;</code> 的区别</p><p> q标签在本质上与 <a href="https://www.w3school.com.cn/tags/tag_blockquote.asp">blockquote</a> 是一样的。不同之处在于它们的显示和应用。q 标签用于简短的行内引用。如果需要从周围内容分离出来比较长的部分（通常显示为缩进的块），请使用 blockquote标签。</p><p> 也就是 q比blockquote多显示一对双引号 </p></li><li><p><code>&lt;sup&gt;</code>和<code>&lt;sub&gt;</code> <code>&lt;sup&gt;</code>和<code>&lt;sub&gt;</code>用于定义上标和下标。例子：</p><p> <img src="/2020/11/08/Review-HTML-&-CSS-1/css_10%5E3.png"></p></li><li><p><code>&lt;del&gt;</code>刪除文本<del>加刪除線</del>，<code>&lt;ins&gt;</code>為插入<u>文本加下劃線</u></p></li><li><p>插入代码： <code>&lt;pre&gt;</code>行块  <code>&lt;code&gt;</code> 块状</p></li><li><p>单位：<code>px ; % ; em</code></p><p> <strong>父子包含的div，width&amp;height会传递影响，要是子 &gt; 父，记得用 px。 % 会受父级width影响</strong></p></li><li><p>行间距= line-height –font-size</p></li><li><p>Spacing : word spacing &amp; word spacing</p></li><li><p>Text-align: justify(两边对齐)</p></li><li><p>padding / margin : 上，右，下，左</p><pre class=" language-css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">25</span>px <span class="token number">50</span>px <span class="token number">75</span>px<span class="token punctuation">;</span>//上 左右 下<span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">25</span>px <span class="token number">50</span>px<span class="token punctuation">;</span>// 上下 左右<span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">25</span>px//all</code></pre><p> <img src="/2020/11/08/Review-HTML-&-CSS-1/1604995934200.png"></p></li><li><p>Overflow：内容溢出盒子 visible; scroll; auto; hidden</p></li><li><p>Position: static; relative; absolute;fixed</p></li><li><p>Z-index</p></li><li><p>自定义css</p><pre class=" language-css"><code class="language-css">&lt;style>  <span class="token punctuation">:</span>root &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> // pseudo-class selector      <span class="token property">--penguin-skin</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>//全局定义  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>penguin &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">--penguin-belly</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span> //重新定义，在class内  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&lt;/style><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-skin<span class="token punctuation">)</span><span class="token punctuation">;</span>//使用//附加一个后备值，如果给定变量无效，则浏览器将还原为该值<span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-skin, black<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>屏幕小于或大于媒体查询断点</p><pre class=" language-css"><code class="language-css">  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 350px<span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>    <span class="token punctuation">:</span>root &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">--penguin-size</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">--penguin-skin</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><ul><li><p>不同列表<code>&lt;ol&gt; ,&lt;li&gt;</code> vs <code>&lt;ul&gt;,&lt;li&gt;</code>       自定义: <code>&lt;dl&gt;,&lt;dt&gt;(=ul),&lt;dd&gt;(=li)</code></p></li><li><p><code>&lt;tr&gt;</code>一行<code>&lt;th&gt;</code>一头<code>&lt;td&gt;</code> 中 &amp; <code>&lt;Caption&gt;</code> 标题、<code>&lt;thead&gt;</code> 头部、<code>&lt;tbody&gt;</code>、<code>&lt;tfoot&gt;</code></p></li><li><p>横向合并–colspan（ colspan=”2”） 纵向合并–rowspan</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--标准列表--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>Monthly savings<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Month<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Savings<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span>2</span> <span class="token punctuation">></span></span>January<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span>2</span> <span class="token punctuation">></span></span>February<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/08/Review-HTML-&-CSS-1/table_sample.png"></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--定义自定义列表--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--定义自定义项目--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>cast:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--定义自定义描述--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>vi. 1投掷扔抛, 2丢弃, 抛弃 3把...投向, 抛射, 4分派..., 扮演角色 5铸造, 浇铸 n. 全体演员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>forecast:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>v. 预测, 预报, /dd>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>n. 预测, 预报&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>insight:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>n. 洞察力, 领悟 v. 洞悉, 了解<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/08/Review-HTML-&-CSS-1/1604912356663.png"></p></li><li><p>border-collapse &amp; separate (default) 表格的边与内容的边</p></li></ul><h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><ul><li><p>表单中 action提交服务器的地址 method 提交方式</p></li><li><p>select中optgroup组中option 选项 </p></li><li><p>Fieldset加表框 里面的legend表边框左上名字（边上）表内label 显示文字</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>Personalia:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>select<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Birthday:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li></ul><p>penguin</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token number">.</span>penguin &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Only change code below this line */</span>    <span class="token property">--penguin-skin</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>    <span class="token property">--penguin-belly</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token property">--penguin-beak</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Only change code above this line */</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>penguin-top &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">25%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-skin, gray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">45%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">70%</span> <span class="token number">70%</span> <span class="token number">60%</span> <span class="token number">60%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>penguin-bottom &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">40%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">23.5%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-skin, gray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">53%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">45%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">70%</span> <span class="token number">70%</span> <span class="token number">100%</span> <span class="token number">100%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>right-hand &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">5%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-skin, gray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">30%</span> <span class="token number">30%</span> <span class="token number">120%</span> <span class="token number">30%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>left-hand &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">75%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-skin, gray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">30%</span> <span class="token number">30%</span> <span class="token number">30%</span> <span class="token number">120%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>right-cheek &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">35%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-belly, white<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">70%</span> <span class="token number">70%</span> <span class="token number">60%</span> <span class="token number">60%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>left-cheek &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-belly, white<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">70%</span> <span class="token number">70%</span> <span class="token number">60%</span> <span class="token number">60%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>belly &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">2.5%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-belly, white<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">95%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">120%</span> <span class="token number">120%</span> <span class="token number">100%</span> <span class="token number">100%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>right-feet &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">85%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-beak, orange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span> <span class="token number">50%</span> <span class="token number">50%</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">80</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">2222</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>left-feet &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">85%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">25%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-beak, orange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span> <span class="token number">50%</span> <span class="token number">50%</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">80</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">2222</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>right-eye &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">45%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">17%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>left-eye &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">45%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">25%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">17%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>sparkle &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">25%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">35%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">35%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>blush-right &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">65%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>blush-left &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">65%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>beak-top &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">40%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-beak, orange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>beak-bottom &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">65%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">42%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--penguin-beak, orange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">16%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  body &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#c6faf1</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>penguin * &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>penguin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>penguin-bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right-hand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left-hand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right-feet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left-feet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>penguin-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right-cheek<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left-cheek<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>belly<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right-eye<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sparkle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left-eye<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sparkle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blush-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blush-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beak-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beak-bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/11/08/Review-HTML-&-CSS-1/1604985404187.png"></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Building Issue</title>
      <link href="2020/11/07/Hexo-Building-Issue/"/>
      <url>2020/11/07/Hexo-Building-Issue/</url>
      
        <content type="html"><![CDATA[<h2 id="问题1：Git-Page部署问题"><a href="#问题1：Git-Page部署问题" class="headerlink" title="问题1：Git Page部署问题"></a>问题1：Git Page部署问题</h2><p>The value {} was passed to a date-related filter that expects valid dates in /_layouts/default.html or one of its layouts. For more information, see <a href="https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#date-is-not-a-valid-datetime">https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#date-is-not-a-valid-datetime</a>.</p><p><strong>Solution：</strong></p><p>没有用jekyll时，在github.io仓库根目录建立名为.nojekyll的空文件，以跳过jekyll检查。</p><h2 id="问题2：Git-Page部署问题-404"><a href="#问题2：Git-Page部署问题-404" class="headerlink" title="问题2：Git Page部署问题-404"></a>问题2：Git Page部署问题-404</h2><p>404 not found：找不到index.html</p><p><strong>Solution：</strong><br>问题就出在hexo的deploy了。</p><p>hexo gitpage 部署命令注意格式</p><p>_config.yml中</p><p>deploy:<br>type: git<br>repo: <a href="https://github.com/">https://github.com/</a><username>/<project>  # example, <a href="https://github.com/hexojs/hexojs.github.io">https://github.com/hexojs/hexojs.github.io</a><br>branch: master</project></username></p><h2 id="问题3：编译错误"><a href="#问题3：编译错误" class="headerlink" title="问题3：编译错误"></a>问题3：编译错误</h2><p>今天使用hexo发布文章，输入指令hexo g的时候出现了如题的错误：<br>can not read a block mapping entry; a multiline key may not be an implicit key at line 2, column 5:</p><p><strong>Solution：</strong><br>实际上是文章开头的配置，注意冒号之后的空格<br>title: Hexo Building Issue<br>date: 2020-11-07 21:28:54<br>tags: Hexo</p><h2 id="问题4：编译错误"><a href="#问题4：编译错误" class="headerlink" title="问题4：编译错误"></a>问题4：编译错误</h2><p>当提交hexo文件代码到git，重新clone的时候，编译的时候会出现错误：<br>“Cannot find module ‘./build/Release/DTraceProviderBindings’”<br>ERROR Local hexo not found in ~/Documents/（文件地址）<br>ERROR Try running: ‘npm install hexo –save’</p><p><strong>Solution：</strong><br>npm install hexo –no-optional<br>或者<br>$ npm uninstall hexo-cli -g<br>$ npm install hexo-cli -g<br>（实际上是没有办法上传node modules）</p><h2 id="问题5：右侧目录"><a href="#问题5：右侧目录" class="headerlink" title="问题5：右侧目录"></a>问题5：右侧目录</h2><p>hexo yilia主题配置中的确实模块- 右侧的文章列表。按照官方指引，但是没有实现列表</p><p><strong>Solution：</strong><br>1.有没有安装在blog的根目录<br>2.在config中的配置，复制粘贴时，注意缩进距离（此处文件，格式很重要）</p><h2 id="问题6：-TOC"><a href="#问题6：-TOC" class="headerlink" title="问题6：[TOC]"></a>问题6：[TOC]</h2><p>[TOC] 不能成功出目录（typora文件显示成功，但是hexo运行时，没有显示目录）</p><p><strong>Solution：</strong></p><p>看清楚config中的toc 等级设置，由于不同主题，设置会不一样！（在config文件中）</p><h2 id="问题7：代码高亮"><a href="#问题7：代码高亮" class="headerlink" title="问题7：代码高亮"></a>问题7：代码高亮</h2><p>代码高亮显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-haskell"><code class="language-haskell"><span class="token hvariable">npm</span> <span class="token hvariable">i</span> <span class="token operator">-</span><span class="token constant">S</span> <span class="token hvariable">hexo</span><span class="token operator">-</span><span class="token hvariable">prism</span><span class="token operator">-</span><span class="token hvariable">plugin</span></code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">"preprocess"</span> <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">"tomorrow"</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h2 id="问题7：大括号的编译问题"><a href="#问题7：大括号的编译问题" class="headerlink" title="问题7：大括号的编译问题"></a>问题7：大括号的编译问题</h2><p>左右花括号（left/right curly brace）都不显示，在typora软件中代码块中显示无碍，但是hexo post中无法正常显示</p><table><thead><tr><th>名称</th><th>字符</th><th>ASCII</th><th>16进制</th><th>URL编码</th><th align="center">HTML编码</th></tr></thead><tbody><tr><td>左花括号</td><td>{</td><td>123</td><td>\x7b</td><td>%7b</td><td align="center">&amp;#123</td></tr><tr><td>管道符</td><td>|</td><td>124</td><td>\x7c</td><td>%7c</td><td align="center">&amp;#124</td></tr><tr><td>右花括号</td><td>}</td><td>125</td><td>\x7d</td><td>%7d</td><td align="center">&amp;#125</td></tr></tbody></table><p><img src="/2020/11/07/Hexo-Building-Issue/1604935229359.png"></p><p>解决办法：</p><p>没找到</p><h2 id="问题7：-TOC-跳转不成功"><a href="#问题7：-TOC-跳转不成功" class="headerlink" title="问题7： TOC 跳转不成功"></a>问题7： TOC 跳转不成功</h2><p>目录显示的层级正确，但是点击对应的标题，没有办法实现跳转</p><p>solution：</p><p>层级设置不可以跟排列序号同时使用</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
